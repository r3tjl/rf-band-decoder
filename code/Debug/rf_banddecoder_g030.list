
rf_banddecoder_g030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002494  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800254c  0800254c  0000354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002624  08002624  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002624  08002624  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002624  08002624  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002624  08002624  00003624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002628  08002628  00003628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800262c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08002638  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002638  00004124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a89  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282c  00000000  00000000  00015abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009102  00000000  00000000  000182e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a70  00000000  00000000  000213f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000114b  00000000  00000000  00021e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016132  00000000  00000000  00022fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013dbf  00000000  00000000  000390dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a798  00000000  00000000  0004ce9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7634  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aa4  00000000  00000000  000d7678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000d911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002534 	.word	0x08002534

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002534 	.word	0x08002534

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <TestOuts>:
	LL_GPIO_ResetOutputPin(BAND6_GPIO_Port, BAND6_Pin);
	LL_GPIO_ResetOutputPin(BAND7_GPIO_Port, BAND7_Pin);
	LL_GPIO_ResetOutputPin(BAND8_GPIO_Port, BAND8_Pin);
}

void TestOuts(){
 8000218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800021a:	24a0      	movs	r4, #160	@ 0xa0
 800021c:	46de      	mov	lr, fp
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	2301      	movs	r3, #1
 8000226:	05e4      	lsls	r4, r4, #23
 8000228:	b5e0      	push	{r5, r6, r7, lr}
	LL_GPIO_SetOutputPin(BAND1_GPIO_Port, BAND1_Pin);
	LL_mDelay(200);
 800022a:	20c8      	movs	r0, #200	@ 0xc8
 800022c:	61a3      	str	r3, [r4, #24]
 800022e:	4699      	mov	r9, r3
 8000230:	f002 f93e 	bl	80024b0 <LL_mDelay>
 8000234:	2302      	movs	r3, #2
 8000236:	2704      	movs	r7, #4
 8000238:	2608      	movs	r6, #8
 800023a:	2510      	movs	r5, #16
 800023c:	61a3      	str	r3, [r4, #24]
	LL_GPIO_SetOutputPin(BAND2_GPIO_Port, BAND2_Pin);
	LL_mDelay(200);
 800023e:	20c8      	movs	r0, #200	@ 0xc8
 8000240:	4698      	mov	r8, r3
 8000242:	f002 f935 	bl	80024b0 <LL_mDelay>
 8000246:	61a7      	str	r7, [r4, #24]
	LL_GPIO_SetOutputPin(BAND3_GPIO_Port, BAND3_Pin);
	LL_mDelay(200);
 8000248:	20c8      	movs	r0, #200	@ 0xc8
 800024a:	f002 f931 	bl	80024b0 <LL_mDelay>
 800024e:	61a6      	str	r6, [r4, #24]
	LL_GPIO_SetOutputPin(BAND4_GPIO_Port, BAND4_Pin);
	LL_mDelay(200);
 8000250:	20c8      	movs	r0, #200	@ 0xc8
 8000252:	f002 f92d 	bl	80024b0 <LL_mDelay>
 8000256:	61a5      	str	r5, [r4, #24]
	LL_GPIO_SetOutputPin(BAND5_GPIO_Port, BAND5_Pin);
	LL_mDelay(200);
 8000258:	20c8      	movs	r0, #200	@ 0xc8
 800025a:	f002 f929 	bl	80024b0 <LL_mDelay>
 800025e:	2320      	movs	r3, #32
	LL_GPIO_SetOutputPin(BAND6_GPIO_Port, BAND6_Pin);
	LL_mDelay(200);
 8000260:	20c8      	movs	r0, #200	@ 0xc8
 8000262:	61a3      	str	r3, [r4, #24]
 8000264:	f002 f924 	bl	80024b0 <LL_mDelay>
 8000268:	2280      	movs	r2, #128	@ 0x80
	LL_GPIO_SetOutputPin(BAND7_GPIO_Port, BAND7_Pin);
	LL_mDelay(200);
 800026a:	20c8      	movs	r0, #200	@ 0xc8
 800026c:	61a2      	str	r2, [r4, #24]
 800026e:	f002 f91f 	bl	80024b0 <LL_mDelay>
 8000272:	2180      	movs	r1, #128	@ 0x80
 8000274:	0109      	lsls	r1, r1, #4
 8000276:	61a1      	str	r1, [r4, #24]
	LL_GPIO_SetOutputPin(BAND8_GPIO_Port, BAND8_Pin);
	LL_mDelay(200);
 8000278:	20c8      	movs	r0, #200	@ 0xc8
 800027a:	f002 f919 	bl	80024b0 <LL_mDelay>
 800027e:	4811      	ldr	r0, [pc, #68]	@ (80002c4 <TestOuts+0xac>)
 8000280:	4682      	mov	sl, r0
 8000282:	2080      	movs	r0, #128	@ 0x80
 8000284:	0200      	lsls	r0, r0, #8
 8000286:	4683      	mov	fp, r0
 8000288:	4650      	mov	r0, sl
 800028a:	465b      	mov	r3, fp
 800028c:	6183      	str	r3, [r0, #24]
	LL_GPIO_SetOutputPin(PTT_OUT_GPIO_Port, PTT_OUT_Pin);
	LL_mDelay(200);
 800028e:	20c8      	movs	r0, #200	@ 0xc8
 8000290:	f002 f90e 	bl	80024b0 <LL_mDelay>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000294:	4650      	mov	r0, sl
 8000296:	465b      	mov	r3, fp
 8000298:	6283      	str	r3, [r0, #40]	@ 0x28
 800029a:	4648      	mov	r0, r9
 800029c:	2180      	movs	r1, #128	@ 0x80
 800029e:	62a0      	str	r0, [r4, #40]	@ 0x28
 80002a0:	2320      	movs	r3, #32
 80002a2:	4640      	mov	r0, r8
 80002a4:	2280      	movs	r2, #128	@ 0x80
 80002a6:	0109      	lsls	r1, r1, #4
 80002a8:	62a0      	str	r0, [r4, #40]	@ 0x28
 80002aa:	62a7      	str	r7, [r4, #40]	@ 0x28
 80002ac:	62a6      	str	r6, [r4, #40]	@ 0x28
 80002ae:	62a5      	str	r5, [r4, #40]	@ 0x28
 80002b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80002b2:	62a2      	str	r2, [r4, #40]	@ 0x28
 80002b4:	62a1      	str	r1, [r4, #40]	@ 0x28
	LL_GPIO_ResetOutputPin(PTT_OUT_GPIO_Port, PTT_OUT_Pin);
	ResetAllOuts();
}
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	46bb      	mov	fp, r7
 80002ba:	46b2      	mov	sl, r6
 80002bc:	46a9      	mov	r9, r5
 80002be:	46a0      	mov	r8, r4
 80002c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002c2:	46c0      	nop			@ (mov r8, r8)
 80002c4:	50000800 	.word	0x50000800

080002c8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim == &htim16) {
 80002ca:	4c1b      	ldr	r4, [pc, #108]	@ (8000338 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002cc:	4284      	cmp	r4, r0
 80002ce:	d000      	beq.n	80002d2 <HAL_TIM_PeriodElapsedCallback+0xa>
		//LL_GPIO_TogglePin(BAND1_GPIO_Port, BAND1_Pin);
		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
	}
}
 80002d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80002d2:	2100      	movs	r1, #0
 80002d4:	0020      	movs	r0, r4
 80002d6:	f001 fb7d 	bl	80019d4 <HAL_TIM_PWM_Stop>
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim1);
 80002da:	4b18      	ldr	r3, [pc, #96]	@ (800033c <HAL_TIM_PeriodElapsedCallback+0x74>)
		current_freq = freq_raw/250;
 80002dc:	21fa      	movs	r1, #250	@ 0xfa
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim1);
 80002de:	681e      	ldr	r6, [r3, #0]
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 80002e0:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <HAL_TIM_PeriodElapsedCallback+0x78>)
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim1);
 80002e2:	6a72      	ldr	r2, [r6, #36]	@ 0x24
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 80002e4:	681f      	ldr	r7, [r3, #0]
 80002e6:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
		uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 80002e8:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
		uint32_t freq_raw = count_main + (count_secondary * (arr + 1));
 80002ea:	042d      	lsls	r5, r5, #16
 80002ec:	041b      	lsls	r3, r3, #16
 80002ee:	0c1b      	lsrs	r3, r3, #16
 80002f0:	3301      	adds	r3, #1
 80002f2:	0c2d      	lsrs	r5, r5, #16
 80002f4:	435d      	muls	r5, r3
 80002f6:	0413      	lsls	r3, r2, #16
 80002f8:	0c1b      	lsrs	r3, r3, #16
 80002fa:	18ed      	adds	r5, r5, r3
		current_freq = freq_raw/250;
 80002fc:	0028      	movs	r0, r5
 80002fe:	f7ff feff 	bl	8000100 <__udivsi3>
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000304:	6018      	str	r0, [r3, #0]
		if (current_freq >= 1) count++; else count = 0;
 8000306:	2df9      	cmp	r5, #249	@ 0xf9
 8000308:	dd11      	ble.n	800032e <HAL_TIM_PeriodElapsedCallback+0x66>
 800030a:	4a0f      	ldr	r2, [pc, #60]	@ (8000348 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800030c:	6813      	ldr	r3, [r2, #0]
 800030e:	3301      	adds	r3, #1
 8000310:	6013      	str	r3, [r2, #0]
		if (count == 3) {
 8000312:	2b03      	cmp	r3, #3
 8000314:	d103      	bne.n	800031e <HAL_TIM_PeriodElapsedCallback+0x56>
			freq = current_freq;
 8000316:	4b0d      	ldr	r3, [pc, #52]	@ (800034c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000318:	6018      	str	r0, [r3, #0]
			count=0;
 800031a:	2300      	movs	r3, #0
 800031c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 800031e:	2300      	movs	r3, #0
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000320:	2100      	movs	r1, #0
		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 8000322:	6273      	str	r3, [r6, #36]	@ 0x24
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000324:	0020      	movs	r0, r4
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000326:	627b      	str	r3, [r7, #36]	@ 0x24
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000328:	f001 faf0 	bl	800190c <HAL_TIM_PWM_Start>
}
 800032c:	e7d0      	b.n	80002d0 <HAL_TIM_PeriodElapsedCallback+0x8>
 800032e:	2200      	movs	r2, #0
 8000330:	4b05      	ldr	r3, [pc, #20]	@ (8000348 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000332:	601a      	str	r2, [r3, #0]
		if (count == 3) {
 8000334:	e7f3      	b.n	800031e <HAL_TIM_PeriodElapsedCallback+0x56>
 8000336:	46c0      	nop			@ (mov r8, r8)
 8000338:	20000028 	.word	0x20000028
 800033c:	200000c0 	.word	0x200000c0
 8000340:	20000074 	.word	0x20000074
 8000344:	20000118 	.word	0x20000118
 8000348:	20000110 	.word	0x20000110
 800034c:	2000011c 	.word	0x2000011c

08000350 <SetOuts>:
	if ((freq >= 23000)&&(freq <= 31000)) {flag_band=8; previous_frequency = freq; freq = 0;}
}


void SetOuts(){
	if (flag_band == 1){
 8000350:	4b5a      	ldr	r3, [pc, #360]	@ (80004bc <SetOuts+0x16c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d048      	beq.n	80003ea <SetOuts+0x9a>
		ResetAllOuts();
		LL_GPIO_SetOutputPin(BAND1_GPIO_Port, BAND1_Pin);
	}
	if (flag_band == 2){
 8000358:	2b02      	cmp	r3, #2
 800035a:	d113      	bne.n	8000384 <SetOuts+0x34>
 800035c:	22a0      	movs	r2, #160	@ 0xa0
 800035e:	2101      	movs	r1, #1
 8000360:	05d2      	lsls	r2, r2, #23
 8000362:	6291      	str	r1, [r2, #40]	@ 0x28
 8000364:	6293      	str	r3, [r2, #40]	@ 0x28
 8000366:	3103      	adds	r1, #3
 8000368:	6291      	str	r1, [r2, #40]	@ 0x28
 800036a:	3104      	adds	r1, #4
 800036c:	6291      	str	r1, [r2, #40]	@ 0x28
 800036e:	3108      	adds	r1, #8
 8000370:	6291      	str	r1, [r2, #40]	@ 0x28
 8000372:	3110      	adds	r1, #16
 8000374:	6291      	str	r1, [r2, #40]	@ 0x28
 8000376:	3160      	adds	r1, #96	@ 0x60
 8000378:	6291      	str	r1, [r2, #40]	@ 0x28
 800037a:	2180      	movs	r1, #128	@ 0x80
 800037c:	0109      	lsls	r1, r1, #4
 800037e:	6291      	str	r1, [r2, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000380:	6193      	str	r3, [r2, #24]
		}
	if (flag_band == 0){
			ResetAllOuts();
		}

}
 8000382:	4770      	bx	lr
	if (flag_band == 3){
 8000384:	2b03      	cmp	r3, #3
 8000386:	d010      	beq.n	80003aa <SetOuts+0x5a>
	if (flag_band == 4){
 8000388:	2b04      	cmp	r3, #4
 800038a:	d023      	beq.n	80003d4 <SetOuts+0x84>
	if (flag_band == 5){
 800038c:	2b05      	cmp	r3, #5
 800038e:	d133      	bne.n	80003f8 <SetOuts+0xa8>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000390:	23a0      	movs	r3, #160	@ 0xa0
 8000392:	2201      	movs	r2, #1
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	629a      	str	r2, [r3, #40]	@ 0x28
 8000398:	3201      	adds	r2, #1
 800039a:	629a      	str	r2, [r3, #40]	@ 0x28
 800039c:	3202      	adds	r2, #2
 800039e:	629a      	str	r2, [r3, #40]	@ 0x28
 80003a0:	3204      	adds	r2, #4
 80003a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80003a4:	3208      	adds	r2, #8
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80003a8:	e00b      	b.n	80003c2 <SetOuts+0x72>
 80003aa:	23a0      	movs	r3, #160	@ 0xa0
 80003ac:	2201      	movs	r2, #1
 80003ae:	2108      	movs	r1, #8
 80003b0:	05db      	lsls	r3, r3, #23
 80003b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80003b4:	3201      	adds	r2, #1
 80003b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80003b8:	3202      	adds	r2, #2
 80003ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80003bc:	6299      	str	r1, [r3, #40]	@ 0x28
 80003be:	3108      	adds	r1, #8
 80003c0:	6299      	str	r1, [r3, #40]	@ 0x28
 80003c2:	2120      	movs	r1, #32
 80003c4:	6299      	str	r1, [r3, #40]	@ 0x28
 80003c6:	2180      	movs	r1, #128	@ 0x80
 80003c8:	6299      	str	r1, [r3, #40]	@ 0x28
 80003ca:	2180      	movs	r1, #128	@ 0x80
 80003cc:	0109      	lsls	r1, r1, #4
 80003ce:	6299      	str	r1, [r3, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80003d0:	619a      	str	r2, [r3, #24]
	if (flag_band == 0){
 80003d2:	e7d6      	b.n	8000382 <SetOuts+0x32>
  WRITE_REG(GPIOx->BRR, PinMask);
 80003d4:	22a0      	movs	r2, #160	@ 0xa0
 80003d6:	2101      	movs	r1, #1
 80003d8:	05d2      	lsls	r2, r2, #23
 80003da:	6291      	str	r1, [r2, #40]	@ 0x28
 80003dc:	3101      	adds	r1, #1
 80003de:	6291      	str	r1, [r2, #40]	@ 0x28
 80003e0:	6293      	str	r3, [r2, #40]	@ 0x28
 80003e2:	3304      	adds	r3, #4
 80003e4:	6293      	str	r3, [r2, #40]	@ 0x28
 80003e6:	310e      	adds	r1, #14
 80003e8:	e7c2      	b.n	8000370 <SetOuts+0x20>
 80003ea:	22a0      	movs	r2, #160	@ 0xa0
 80003ec:	2102      	movs	r1, #2
 80003ee:	05d2      	lsls	r2, r2, #23
 80003f0:	6293      	str	r3, [r2, #40]	@ 0x28
 80003f2:	6291      	str	r1, [r2, #40]	@ 0x28
 80003f4:	3102      	adds	r1, #2
 80003f6:	e7b7      	b.n	8000368 <SetOuts+0x18>
	if (flag_band == 6){
 80003f8:	2b06      	cmp	r3, #6
 80003fa:	d10e      	bne.n	800041a <SetOuts+0xca>
 80003fc:	23a0      	movs	r3, #160	@ 0xa0
 80003fe:	2201      	movs	r2, #1
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	629a      	str	r2, [r3, #40]	@ 0x28
 8000404:	3201      	adds	r2, #1
 8000406:	629a      	str	r2, [r3, #40]	@ 0x28
 8000408:	3202      	adds	r2, #2
 800040a:	629a      	str	r2, [r3, #40]	@ 0x28
 800040c:	3204      	adds	r2, #4
 800040e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000410:	3208      	adds	r2, #8
 8000412:	629a      	str	r2, [r3, #40]	@ 0x28
 8000414:	3210      	adds	r2, #16
 8000416:	629a      	str	r2, [r3, #40]	@ 0x28
 8000418:	e7d5      	b.n	80003c6 <SetOuts+0x76>
	if (flag_band == 7){
 800041a:	2b07      	cmp	r3, #7
 800041c:	d114      	bne.n	8000448 <SetOuts+0xf8>
 800041e:	23a0      	movs	r3, #160	@ 0xa0
 8000420:	2201      	movs	r2, #1
 8000422:	2180      	movs	r1, #128	@ 0x80
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	629a      	str	r2, [r3, #40]	@ 0x28
 8000428:	3201      	adds	r2, #1
 800042a:	629a      	str	r2, [r3, #40]	@ 0x28
 800042c:	3202      	adds	r2, #2
 800042e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000430:	3204      	adds	r2, #4
 8000432:	629a      	str	r2, [r3, #40]	@ 0x28
 8000434:	3208      	adds	r2, #8
 8000436:	629a      	str	r2, [r3, #40]	@ 0x28
 8000438:	3210      	adds	r2, #16
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
 800043c:	0109      	lsls	r1, r1, #4
 800043e:	3260      	adds	r2, #96	@ 0x60
 8000440:	629a      	str	r2, [r3, #40]	@ 0x28
 8000442:	6299      	str	r1, [r3, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000444:	619a      	str	r2, [r3, #24]
	if (flag_band == 8){
 8000446:	e79c      	b.n	8000382 <SetOuts+0x32>
 8000448:	2b08      	cmp	r3, #8
 800044a:	d11b      	bne.n	8000484 <SetOuts+0x134>
  WRITE_REG(GPIOx->BRR, PinMask);
 800044c:	22a0      	movs	r2, #160	@ 0xa0
 800044e:	2101      	movs	r1, #1
 8000450:	05d2      	lsls	r2, r2, #23
 8000452:	6291      	str	r1, [r2, #40]	@ 0x28
 8000454:	3101      	adds	r1, #1
 8000456:	6291      	str	r1, [r2, #40]	@ 0x28
 8000458:	3102      	adds	r1, #2
 800045a:	6291      	str	r1, [r2, #40]	@ 0x28
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	6293      	str	r3, [r2, #40]	@ 0x28
 8000460:	3308      	adds	r3, #8
 8000462:	6293      	str	r3, [r2, #40]	@ 0x28
 8000464:	3310      	adds	r3, #16
 8000466:	6293      	str	r3, [r2, #40]	@ 0x28
 8000468:	0109      	lsls	r1, r1, #4
 800046a:	3360      	adds	r3, #96	@ 0x60
 800046c:	6293      	str	r3, [r2, #40]	@ 0x28
 800046e:	6291      	str	r1, [r2, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000470:	6191      	str	r1, [r2, #24]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000472:	4a13      	ldr	r2, [pc, #76]	@ (80004c0 <SetOuts+0x170>)
 8000474:	6912      	ldr	r2, [r2, #16]
 8000476:	4213      	tst	r3, r2
 8000478:	d11b      	bne.n	80004b2 <SetOuts+0x162>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800047a:	2280      	movs	r2, #128	@ 0x80
 800047c:	4b11      	ldr	r3, [pc, #68]	@ (80004c4 <SetOuts+0x174>)
 800047e:	0212      	lsls	r2, r2, #8
 8000480:	619a      	str	r2, [r3, #24]
	if (flag_band == 0){
 8000482:	e77e      	b.n	8000382 <SetOuts+0x32>
 8000484:	2b00      	cmp	r3, #0
 8000486:	d000      	beq.n	800048a <SetOuts+0x13a>
 8000488:	e77b      	b.n	8000382 <SetOuts+0x32>
  WRITE_REG(GPIOx->BRR, PinMask);
 800048a:	23a0      	movs	r3, #160	@ 0xa0
 800048c:	2201      	movs	r2, #1
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
 8000492:	3201      	adds	r2, #1
 8000494:	629a      	str	r2, [r3, #40]	@ 0x28
 8000496:	3202      	adds	r2, #2
 8000498:	629a      	str	r2, [r3, #40]	@ 0x28
 800049a:	3204      	adds	r2, #4
 800049c:	629a      	str	r2, [r3, #40]	@ 0x28
 800049e:	3208      	adds	r2, #8
 80004a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80004a2:	3210      	adds	r2, #16
 80004a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80004a6:	3260      	adds	r2, #96	@ 0x60
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	0112      	lsls	r2, r2, #4
 80004ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004b0:	e767      	b.n	8000382 <SetOuts+0x32>
 80004b2:	2280      	movs	r2, #128	@ 0x80
 80004b4:	4b03      	ldr	r3, [pc, #12]	@ (80004c4 <SetOuts+0x174>)
 80004b6:	0212      	lsls	r2, r2, #8
 80004b8:	629a      	str	r2, [r3, #40]	@ 0x28
	if (flag_band == 0){
 80004ba:	e762      	b.n	8000382 <SetOuts+0x32>
 80004bc:	2000010c 	.word	0x2000010c
 80004c0:	50000400 	.word	0x50000400
 80004c4:	50000800 	.word	0x50000800

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b510      	push	{r4, lr}
 80004ca:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004cc:	2234      	movs	r2, #52	@ 0x34
 80004ce:	2100      	movs	r1, #0
 80004d0:	a804      	add	r0, sp, #16
 80004d2:	f002 f803 	bl	80024dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	2210      	movs	r2, #16
 80004d8:	2100      	movs	r1, #0
 80004da:	4668      	mov	r0, sp
 80004dc:	f001 fffe 	bl	80024dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e0:	2080      	movs	r0, #128	@ 0x80
 80004e2:	0080      	lsls	r0, r0, #2
 80004e4:	f000 fd1e 	bl	8000f24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004e8:	23a0      	movs	r3, #160	@ 0xa0
 80004ea:	2201      	movs	r2, #1
 80004ec:	02db      	lsls	r3, r3, #11
 80004ee:	9204      	str	r2, [sp, #16]
 80004f0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f2:	2303      	movs	r3, #3
 80004f4:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80004f6:	2300      	movs	r3, #0
 80004f8:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004fa:	3308      	adds	r3, #8
 80004fc:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004fe:	2380      	movs	r3, #128	@ 0x80
 8000500:	029b      	lsls	r3, r3, #10
 8000502:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000504:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000508:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800050a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800050e:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000510:	f000 fd38 	bl	8000f84 <HAL_RCC_OscConfig>
 8000514:	2800      	cmp	r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x54>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051a:	e7fe      	b.n	800051a <SystemClock_Config+0x52>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051c:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000520:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000522:	2102      	movs	r1, #2
 8000524:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000526:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000528:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052a:	f000 ffcd 	bl	80014c8 <HAL_RCC_ClockConfig>
 800052e:	2800      	cmp	r0, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x6e>
 8000532:	b672      	cpsid	i
  while (1)
 8000534:	e7fe      	b.n	8000534 <SystemClock_Config+0x6c>
}
 8000536:	b012      	add	sp, #72	@ 0x48
 8000538:	bd10      	pop	{r4, pc}
 800053a:	46c0      	nop			@ (mov r8, r8)

0800053c <main>:
{
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	46de      	mov	lr, fp
 8000540:	4657      	mov	r7, sl
 8000542:	464e      	mov	r6, r9
 8000544:	4645      	mov	r5, r8
 8000546:	b5e0      	push	{r5, r6, r7, lr}
 8000548:	b09f      	sub	sp, #124	@ 0x7c
  HAL_Init();
 800054a:	f000 fb83 	bl	8000c54 <HAL_Init>
  SystemClock_Config();
 800054e:	f7ff ffbb 	bl	80004c8 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	2214      	movs	r2, #20
 8000554:	2100      	movs	r1, #0
 8000556:	a811      	add	r0, sp, #68	@ 0x44
 8000558:	f001 ffc0 	bl	80024dc <memset>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 800055c:	2102      	movs	r1, #2
 800055e:	2704      	movs	r7, #4
 8000560:	2501      	movs	r5, #1
 8000562:	2480      	movs	r4, #128	@ 0x80
 8000564:	4be0      	ldr	r3, [pc, #896]	@ (80008e8 <main+0x3ac>)
 8000566:	2080      	movs	r0, #128	@ 0x80
 8000568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800056a:	0224      	lsls	r4, r4, #8
 800056c:	430a      	orrs	r2, r1
 800056e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000570:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000572:	26a0      	movs	r6, #160	@ 0xa0
 8000574:	400a      	ands	r2, r1
 8000576:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000578:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 800057a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800057c:	4681      	mov	r9, r0
 800057e:	433a      	orrs	r2, r7
 8000580:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000584:	05f6      	lsls	r6, r6, #23
 8000586:	403a      	ands	r2, r7
 8000588:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800058a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 800058c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058e:	4688      	mov	r8, r1
 8000590:	432a      	orrs	r2, r5
 8000592:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000596:	2210      	movs	r2, #16
 8000598:	402b      	ands	r3, r5
 800059a:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800059c:	9b03      	ldr	r3, [sp, #12]
 800059e:	4bd3      	ldr	r3, [pc, #844]	@ (80008ec <main+0x3b0>)
 80005a0:	629c      	str	r4, [r3, #40]	@ 0x28
 80005a2:	469b      	mov	fp, r3
 80005a4:	000b      	movs	r3, r1
 80005a6:	62b5      	str	r5, [r6, #40]	@ 0x28
 80005a8:	3306      	adds	r3, #6
 80005aa:	62b1      	str	r1, [r6, #40]	@ 0x28
 80005ac:	311e      	adds	r1, #30
 80005ae:	62b7      	str	r7, [r6, #40]	@ 0x28
 80005b0:	62b3      	str	r3, [r6, #40]	@ 0x28
 80005b2:	62b2      	str	r2, [r6, #40]	@ 0x28
 80005b4:	62b1      	str	r1, [r6, #40]	@ 0x28
 80005b6:	62b0      	str	r0, [r6, #40]	@ 0x28
 80005b8:	48cd      	ldr	r0, [pc, #820]	@ (80008f0 <main+0x3b4>)
  GPIO_InitStruct.Pin = PTT_IN_Pin;
 80005ba:	464b      	mov	r3, r9
 80005bc:	6285      	str	r5, [r0, #40]	@ 0x28
 80005be:	4682      	mov	sl, r0
 80005c0:	2080      	movs	r0, #128	@ 0x80
 80005c2:	0100      	lsls	r0, r0, #4
 80005c4:	62b0      	str	r0, [r6, #40]	@ 0x28
  LL_GPIO_Init(PTT_IN_GPIO_Port, &GPIO_InitStruct);
 80005c6:	a910      	add	r1, sp, #64	@ 0x40
 80005c8:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = PTT_IN_Pin;
 80005ca:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80005cc:	9514      	str	r5, [sp, #80]	@ 0x50
  LL_GPIO_Init(PTT_IN_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f001 fea9 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = PTT_OUT_Pin;
 80005d2:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005d4:	2400      	movs	r4, #0
  LL_GPIO_Init(PTT_OUT_GPIO_Port, &GPIO_InitStruct);
 80005d6:	a910      	add	r1, sp, #64	@ 0x40
 80005d8:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005da:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005dc:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005de:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005e0:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(PTT_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f001 fe9f 	bl	8002324 <LL_GPIO_Init>
  LL_GPIO_Init(BAND1_GPIO_Port, &GPIO_InitStruct);
 80005e6:	0030      	movs	r0, r6
 80005e8:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = BAND1_Pin;
 80005ea:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005ec:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005ee:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005f0:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005f2:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND1_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f001 fe96 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND2_Pin;
 80005f8:	4643      	mov	r3, r8
  LL_GPIO_Init(BAND2_GPIO_Port, &GPIO_InitStruct);
 80005fa:	0030      	movs	r0, r6
 80005fc:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = BAND2_Pin;
 80005fe:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000600:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000602:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000604:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000606:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND2_GPIO_Port, &GPIO_InitStruct);
 8000608:	f001 fe8c 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND3_Pin;
 800060c:	9710      	str	r7, [sp, #64]	@ 0x40
  LL_GPIO_Init(BAND3_GPIO_Port, &GPIO_InitStruct);
 800060e:	af10      	add	r7, sp, #64	@ 0x40
 8000610:	0039      	movs	r1, r7
 8000612:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000614:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000616:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000618:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800061a:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND3_GPIO_Port, &GPIO_InitStruct);
 800061c:	f001 fe82 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND4_Pin;
 8000620:	2308      	movs	r3, #8
  LL_GPIO_Init(BAND4_GPIO_Port, &GPIO_InitStruct);
 8000622:	0039      	movs	r1, r7
 8000624:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND4_Pin;
 8000626:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000628:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800062a:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800062c:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800062e:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND4_GPIO_Port, &GPIO_InitStruct);
 8000630:	f001 fe78 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND5_Pin;
 8000634:	2210      	movs	r2, #16
  LL_GPIO_Init(BAND5_GPIO_Port, &GPIO_InitStruct);
 8000636:	0039      	movs	r1, r7
 8000638:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND5_Pin;
 800063a:	9210      	str	r2, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800063c:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800063e:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000640:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000642:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND5_GPIO_Port, &GPIO_InitStruct);
 8000644:	f001 fe6e 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND6_Pin;
 8000648:	2120      	movs	r1, #32
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 800064a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND6_Pin;
 800064c:	9110      	str	r1, [sp, #64]	@ 0x40
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 800064e:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000650:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000652:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000654:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000656:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 8000658:	f001 fe64 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND7_Pin;
 800065c:	464b      	mov	r3, r9
  LL_GPIO_Init(BAND7_GPIO_Port, &GPIO_InitStruct);
 800065e:	0039      	movs	r1, r7
 8000660:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND7_Pin;
 8000662:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000664:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000666:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000668:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800066a:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND7_GPIO_Port, &GPIO_InitStruct);
 800066c:	f001 fe5a 	bl	8002324 <LL_GPIO_Init>
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000670:	0039      	movs	r1, r7
 8000672:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LED_Pin;
 8000674:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000676:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000678:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800067a:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800067c:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800067e:	f001 fe51 	bl	8002324 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND8_Pin;
 8000682:	2080      	movs	r0, #128	@ 0x80
 8000684:	0100      	lsls	r0, r0, #4
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 8000686:	0039      	movs	r1, r7
  GPIO_InitStruct.Pin = BAND8_Pin;
 8000688:	9010      	str	r0, [sp, #64]	@ 0x40
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 800068a:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800068c:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800068e:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000690:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000692:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 8000694:	f001 fe46 	bl	8002324 <LL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000698:	2210      	movs	r2, #16
 800069a:	2100      	movs	r1, #0
 800069c:	a808      	add	r0, sp, #32
 800069e:	f001 ff1d 	bl	80024dc <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006a2:	2214      	movs	r2, #20
 80006a4:	2100      	movs	r1, #0
 80006a6:	0038      	movs	r0, r7
 80006a8:	f001 ff18 	bl	80024dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	220c      	movs	r2, #12
 80006ae:	2100      	movs	r1, #0
 80006b0:	a804      	add	r0, sp, #16
 80006b2:	f001 ff13 	bl	80024dc <memset>
  htim1.Instance = TIM1;
 80006b6:	4d8f      	ldr	r5, [pc, #572]	@ (80008f4 <main+0x3b8>)
 80006b8:	4b8f      	ldr	r3, [pc, #572]	@ (80008f8 <main+0x3bc>)
  htim1.Init.Period = 65535;
 80006ba:	4e90      	ldr	r6, [pc, #576]	@ (80008fc <main+0x3c0>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006bc:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 80006be:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 80006c0:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65535;
 80006c4:	60ee      	str	r6, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c6:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80006c8:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ca:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006cc:	f000 ffc4 	bl	8001658 <HAL_TIM_Base_Init>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x19c>
 80006d4:	b672      	cpsid	i
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0x19a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80006d8:	2380      	movs	r3, #128	@ 0x80
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80006da:	9009      	str	r0, [sp, #36]	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80006dc:	019b      	lsls	r3, r3, #6
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80006de:	900a      	str	r0, [sp, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 80006e0:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e2:	a908      	add	r1, sp, #32
 80006e4:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80006e6:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e8:	f001 fb76 	bl	8001dd8 <HAL_TIM_ConfigClockSource>
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d001      	beq.n	80006f4 <main+0x1b8>
 80006f0:	b672      	cpsid	i
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x1b6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80006f4:	2205      	movs	r2, #5
 80006f6:	2360      	movs	r3, #96	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80006f8:	9012      	str	r0, [sp, #72]	@ 0x48
  sSlaveConfig.TriggerFilter = 0;
 80006fa:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80006fc:	a910      	add	r1, sp, #64	@ 0x40
 80006fe:	0028      	movs	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000700:	9210      	str	r2, [sp, #64]	@ 0x40
 8000702:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000704:	f001 fc20 	bl	8001f48 <HAL_TIM_SlaveConfigSynchro>
 8000708:	2800      	cmp	r0, #0
 800070a:	d001      	beq.n	8000710 <main+0x1d4>
 800070c:	b672      	cpsid	i
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x1d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000710:	2220      	movs	r2, #32
 8000712:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000716:	a904      	add	r1, sp, #16
 8000718:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800071a:	9204      	str	r2, [sp, #16]
 800071c:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800071e:	f001 fd67 	bl	80021f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000722:	1e04      	subs	r4, r0, #0
 8000724:	d001      	beq.n	800072a <main+0x1ee>
 8000726:	b672      	cpsid	i
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x1ec>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	0001      	movs	r1, r0
 800072c:	2210      	movs	r2, #16
 800072e:	a808      	add	r0, sp, #32
 8000730:	f001 fed4 	bl	80024dc <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000734:	2214      	movs	r2, #20
 8000736:	0021      	movs	r1, r4
 8000738:	a810      	add	r0, sp, #64	@ 0x40
 800073a:	f001 fecf 	bl	80024dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800073e:	220c      	movs	r2, #12
 8000740:	0021      	movs	r1, r4
 8000742:	a804      	add	r0, sp, #16
 8000744:	f001 feca 	bl	80024dc <memset>
  htim3.Instance = TIM3;
 8000748:	4f6d      	ldr	r7, [pc, #436]	@ (8000900 <main+0x3c4>)
 800074a:	4b6e      	ldr	r3, [pc, #440]	@ (8000904 <main+0x3c8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800074c:	0038      	movs	r0, r7
  htim3.Instance = TIM3;
 800074e:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 0;
 8000750:	607c      	str	r4, [r7, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000752:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 65535;
 8000754:	60fe      	str	r6, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000756:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800075a:	f000 ff7d 	bl	8001658 <HAL_TIM_Base_Init>
 800075e:	2800      	cmp	r0, #0
 8000760:	d001      	beq.n	8000766 <main+0x22a>
 8000762:	b672      	cpsid	i
  while (1)
 8000764:	e7fe      	b.n	8000764 <main+0x228>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000766:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000768:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076a:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800076c:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000770:	f001 fb32 	bl	8001dd8 <HAL_TIM_ConfigClockSource>
 8000774:	2800      	cmp	r0, #0
 8000776:	d001      	beq.n	800077c <main+0x240>
 8000778:	b672      	cpsid	i
  while (1)
 800077a:	e7fe      	b.n	800077a <main+0x23e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800077c:	2205      	movs	r2, #5
 800077e:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000780:	0038      	movs	r0, r7
 8000782:	a910      	add	r1, sp, #64	@ 0x40
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000784:	9210      	str	r2, [sp, #64]	@ 0x40
 8000786:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000788:	f001 fbde 	bl	8001f48 <HAL_TIM_SlaveConfigSynchro>
 800078c:	2800      	cmp	r0, #0
 800078e:	d001      	beq.n	8000794 <main+0x258>
 8000790:	b672      	cpsid	i
  while (1)
 8000792:	e7fe      	b.n	8000792 <main+0x256>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000794:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000796:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000798:	a904      	add	r1, sp, #16
 800079a:	0038      	movs	r0, r7
 800079c:	f001 fd28 	bl	80021f0 <HAL_TIMEx_MasterConfigSynchronization>
 80007a0:	1e06      	subs	r6, r0, #0
 80007a2:	d001      	beq.n	80007a8 <main+0x26c>
 80007a4:	b672      	cpsid	i
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <main+0x26a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	0001      	movs	r1, r0
 80007aa:	221c      	movs	r2, #28
 80007ac:	a808      	add	r0, sp, #32
 80007ae:	f001 fe95 	bl	80024dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007b2:	2234      	movs	r2, #52	@ 0x34
 80007b4:	0031      	movs	r1, r6
 80007b6:	a810      	add	r0, sp, #64	@ 0x40
 80007b8:	f001 fe90 	bl	80024dc <memset>
  htim16.Instance = TIM16;
 80007bc:	4c52      	ldr	r4, [pc, #328]	@ (8000908 <main+0x3cc>)
 80007be:	4b53      	ldr	r3, [pc, #332]	@ (800090c <main+0x3d0>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007c0:	0020      	movs	r0, r4
  htim16.Instance = TIM16;
 80007c2:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 63999;
 80007c4:	4b52      	ldr	r3, [pc, #328]	@ (8000910 <main+0x3d4>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	60a6      	str	r6, [r4, #8]
  htim16.Init.Prescaler = 63999;
 80007c8:	6063      	str	r3, [r4, #4]
  htim16.Init.Period = 250;
 80007ca:	23fa      	movs	r3, #250	@ 0xfa
 80007cc:	60e3      	str	r3, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ce:	464b      	mov	r3, r9
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d0:	6126      	str	r6, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 80007d2:	6166      	str	r6, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80007d6:	f000 ff3f 	bl	8001658 <HAL_TIM_Base_Init>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d001      	beq.n	80007e2 <main+0x2a6>
 80007de:	b672      	cpsid	i
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x2a4>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80007e2:	0020      	movs	r0, r4
 80007e4:	f001 f812 	bl	800180c <HAL_TIM_PWM_Init>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d001      	beq.n	80007f0 <main+0x2b4>
 80007ec:	b672      	cpsid	i
  while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0x2b2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f0:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f2:	2000      	movs	r0, #0
 80007f4:	2100      	movs	r1, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f6:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	900c      	str	r0, [sp, #48]	@ 0x30
 80007fa:	910d      	str	r1, [sp, #52]	@ 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fe:	0020      	movs	r0, r4
  sConfigOC.Pulse = 249;
 8000800:	3399      	adds	r3, #153	@ 0x99
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000802:	a908      	add	r1, sp, #32
  sConfigOC.Pulse = 249;
 8000804:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000808:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800080a:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	f001 f940 	bl	8001a90 <HAL_TIM_PWM_ConfigChannel>
 8000810:	2800      	cmp	r0, #0
 8000812:	d001      	beq.n	8000818 <main+0x2dc>
 8000814:	b672      	cpsid	i
  while (1)
 8000816:	e7fe      	b.n	8000816 <main+0x2da>
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800081c:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800081e:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000820:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 8000822:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000824:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000826:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000828:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800082a:	a910      	add	r1, sp, #64	@ 0x40
 800082c:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800082e:	9214      	str	r2, [sp, #80]	@ 0x50
 8000830:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000832:	f001 fd11 	bl	8002258 <HAL_TIMEx_ConfigBreakDeadTime>
 8000836:	1e06      	subs	r6, r0, #0
 8000838:	d001      	beq.n	800083e <main+0x302>
 800083a:	b672      	cpsid	i
  while (1)
 800083c:	e7fe      	b.n	800083c <main+0x300>
  HAL_TIM_MspPostInit(&htim16);
 800083e:	0020      	movs	r0, r4
 8000840:	f000 f962 	bl	8000b08 <HAL_TIM_MspPostInit>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000844:	0031      	movs	r1, r6
 8000846:	2214      	movs	r2, #20
 8000848:	a810      	add	r0, sp, #64	@ 0x40
 800084a:	f001 fe47 	bl	80024dc <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <main+0x3ac>)
 8000852:	02c9      	lsls	r1, r1, #11
 8000854:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000856:	482f      	ldr	r0, [pc, #188]	@ (8000914 <main+0x3d8>)
 8000858:	430a      	orrs	r2, r1
 800085a:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	400b      	ands	r3, r1
 8000860:	21c5      	movs	r1, #197	@ 0xc5
 8000862:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8000864:	9b08      	ldr	r3, [sp, #32]
 8000866:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <main+0x3dc>)
 8000868:	0089      	lsls	r1, r1, #2
 800086a:	585a      	ldr	r2, [r3, r1]
 800086c:	4002      	ands	r2, r0
 800086e:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	03d2      	lsls	r2, r2, #15
 8000874:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 63999;
 8000876:	2140      	movs	r1, #64	@ 0x40
 8000878:	466a      	mov	r2, sp
 800087a:	4b28      	ldr	r3, [pc, #160]	@ (800091c <main+0x3e0>)
 800087c:	1852      	adds	r2, r2, r1
 800087e:	8013      	strh	r3, [r2, #0]
  TIM_InitStruct.Autoreload = 499;
 8000880:	23f4      	movs	r3, #244	@ 0xf4
 8000882:	33ff      	adds	r3, #255	@ 0xff
 8000884:	9312      	str	r3, [sp, #72]	@ 0x48
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000886:	4b26      	ldr	r3, [pc, #152]	@ (8000920 <main+0x3e4>)
 8000888:	0011      	movs	r1, r2
 800088a:	4698      	mov	r8, r3
 800088c:	0018      	movs	r0, r3
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800088e:	9611      	str	r6, [sp, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000890:	9613      	str	r6, [sp, #76]	@ 0x4c
  TIM_InitStruct.RepetitionCounter = 0;
 8000892:	9614      	str	r6, [sp, #80]	@ 0x50
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000894:	f001 fdcc 	bl	8002430 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000898:	4643      	mov	r3, r8
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	4313      	orrs	r3, r2
 80008a0:	4642      	mov	r2, r8
 80008a2:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80008a4:	2301      	movs	r3, #1
 80008a6:	4641      	mov	r1, r8
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	431a      	orrs	r2, r3
 80008ac:	600a      	str	r2, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80008ae:	68ca      	ldr	r2, [r1, #12]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	60cb      	str	r3, [r1, #12]
  TestOuts();
 80008b4:	f7ff fcb0 	bl	8000218 <TestOuts>
  HAL_TIM_Base_Start_IT(&htim16);
 80008b8:	0020      	movs	r0, r4
 80008ba:	f000 ff77 	bl	80017ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80008be:	0031      	movs	r1, r6
 80008c0:	0020      	movs	r0, r4
 80008c2:	f001 f823 	bl	800190c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 80008c6:	0028      	movs	r0, r5
 80008c8:	f000 ff46 	bl	8001758 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80008cc:	0038      	movs	r0, r7
 80008ce:	f000 ff43 	bl	8001758 <HAL_TIM_Base_Start>
	if ((freq >= 23000)&&(freq <= 31000)) {flag_band=8; previous_frequency = freq; freq = 0;}
 80008d2:	23fa      	movs	r3, #250	@ 0xfa
 80008d4:	015b      	lsls	r3, r3, #5
	if ((freq >= 900)&&(freq <= 2900)) {flag_band=1; previous_frequency = freq; freq = 0;}
 80008d6:	27fa      	movs	r7, #250	@ 0xfa
	if ((freq >= 23000)&&(freq <= 31000)) {flag_band=8; previous_frequency = freq; freq = 0;}
 80008d8:	4699      	mov	r9, r3
 80008da:	2308      	movs	r3, #8
 80008dc:	4c11      	ldr	r4, [pc, #68]	@ (8000924 <main+0x3e8>)
 80008de:	4698      	mov	r8, r3
 80008e0:	4e11      	ldr	r6, [pc, #68]	@ (8000928 <main+0x3ec>)
 80008e2:	4d12      	ldr	r5, [pc, #72]	@ (800092c <main+0x3f0>)
	if ((freq >= 900)&&(freq <= 2900)) {flag_band=1; previous_frequency = freq; freq = 0;}
 80008e4:	00ff      	lsls	r7, r7, #3
 80008e6:	e03e      	b.n	8000966 <main+0x42a>
 80008e8:	40021000 	.word	0x40021000
 80008ec:	50000800 	.word	0x50000800
 80008f0:	50000400 	.word	0x50000400
 80008f4:	200000c0 	.word	0x200000c0
 80008f8:	40012c00 	.word	0x40012c00
 80008fc:	0000ffff 	.word	0x0000ffff
 8000900:	20000074 	.word	0x20000074
 8000904:	40000400 	.word	0x40000400
 8000908:	20000028 	.word	0x20000028
 800090c:	40014400 	.word	0x40014400
 8000910:	0000f9ff 	.word	0x0000f9ff
 8000914:	ff00ffff 	.word	0xff00ffff
 8000918:	e000e100 	.word	0xe000e100
 800091c:	fffff9ff 	.word	0xfffff9ff
 8000920:	40014800 	.word	0x40014800
 8000924:	2000011c 	.word	0x2000011c
 8000928:	2000010c 	.word	0x2000010c
 800092c:	20000114 	.word	0x20000114
 8000930:	2201      	movs	r2, #1
 8000932:	602b      	str	r3, [r5, #0]
 8000934:	2300      	movs	r3, #0
 8000936:	6032      	str	r2, [r6, #0]
 8000938:	6023      	str	r3, [r4, #0]
	if ((freq >= 9000)&&(freq <= 11000)) {flag_band=4; previous_frequency = freq; freq = 0;}
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	4a27      	ldr	r2, [pc, #156]	@ (80009dc <main+0x4a0>)
 800093e:	189a      	adds	r2, r3, r2
 8000940:	42ba      	cmp	r2, r7
 8000942:	d81f      	bhi.n	8000984 <main+0x448>
 8000944:	2204      	movs	r2, #4
 8000946:	602b      	str	r3, [r5, #0]
 8000948:	2300      	movs	r3, #0
 800094a:	6032      	str	r2, [r6, #0]
 800094c:	6023      	str	r3, [r4, #0]
	if ((freq >= 20000)&&(freq <= 22000)) {flag_band=7; previous_frequency = freq; freq = 0;}
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <main+0x4a4>)
 8000952:	189a      	adds	r2, r3, r2
 8000954:	42ba      	cmp	r2, r7
 8000956:	d81f      	bhi.n	8000998 <main+0x45c>
 8000958:	2207      	movs	r2, #7
 800095a:	602b      	str	r3, [r5, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	6032      	str	r2, [r6, #0]
 8000960:	6023      	str	r3, [r4, #0]
	  SetOuts();
 8000962:	f7ff fcf5 	bl	8000350 <SetOuts>
	if ((freq >= 900)&&(freq <= 2900)) {flag_band=1; previous_frequency = freq; freq = 0;}
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <main+0x4a8>)
 800096a:	189a      	adds	r2, r3, r2
 800096c:	42ba      	cmp	r2, r7
 800096e:	d9df      	bls.n	8000930 <main+0x3f4>
	if ((freq >= 2950)&&(freq <= 4500)) {flag_band=2; previous_frequency = freq; freq = 0;}
 8000970:	4a1d      	ldr	r2, [pc, #116]	@ (80009e8 <main+0x4ac>)
 8000972:	491e      	ldr	r1, [pc, #120]	@ (80009ec <main+0x4b0>)
 8000974:	189a      	adds	r2, r3, r2
 8000976:	428a      	cmp	r2, r1
 8000978:	d819      	bhi.n	80009ae <main+0x472>
 800097a:	2202      	movs	r2, #2
 800097c:	602b      	str	r3, [r5, #0]
 800097e:	2300      	movs	r3, #0
 8000980:	6032      	str	r2, [r6, #0]
 8000982:	6023      	str	r3, [r4, #0]
	if ((freq >= 13000)&&(freq <=15000)) {flag_band=5; previous_frequency = freq; freq = 0;}
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <main+0x4b4>)
 8000988:	189a      	adds	r2, r3, r2
 800098a:	42ba      	cmp	r2, r7
 800098c:	d81a      	bhi.n	80009c4 <main+0x488>
 800098e:	2205      	movs	r2, #5
 8000990:	602b      	str	r3, [r5, #0]
 8000992:	2300      	movs	r3, #0
 8000994:	6032      	str	r2, [r6, #0]
 8000996:	6023      	str	r3, [r4, #0]
	if ((freq >= 23000)&&(freq <= 31000)) {flag_band=8; previous_frequency = freq; freq = 0;}
 8000998:	6823      	ldr	r3, [r4, #0]
 800099a:	4a16      	ldr	r2, [pc, #88]	@ (80009f4 <main+0x4b8>)
 800099c:	189a      	adds	r2, r3, r2
 800099e:	454a      	cmp	r2, r9
 80009a0:	d8df      	bhi.n	8000962 <main+0x426>
 80009a2:	4642      	mov	r2, r8
 80009a4:	602b      	str	r3, [r5, #0]
 80009a6:	2300      	movs	r3, #0
 80009a8:	6032      	str	r2, [r6, #0]
 80009aa:	6023      	str	r3, [r4, #0]
 80009ac:	e7d9      	b.n	8000962 <main+0x426>
	if ((freq >= 6500)&&(freq <= 7500)) {flag_band=3; previous_frequency = freq; freq = 0;}
 80009ae:	21fa      	movs	r1, #250	@ 0xfa
 80009b0:	4a11      	ldr	r2, [pc, #68]	@ (80009f8 <main+0x4bc>)
 80009b2:	0089      	lsls	r1, r1, #2
 80009b4:	189a      	adds	r2, r3, r2
 80009b6:	428a      	cmp	r2, r1
 80009b8:	d8bf      	bhi.n	800093a <main+0x3fe>
 80009ba:	2203      	movs	r2, #3
 80009bc:	602b      	str	r3, [r5, #0]
 80009be:	2300      	movs	r3, #0
 80009c0:	6032      	str	r2, [r6, #0]
 80009c2:	6023      	str	r3, [r4, #0]
	if ((freq >= 17000)&&(freq <= 19000)) {flag_band=6; previous_frequency = freq; freq = 0;}
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <main+0x4c0>)
 80009c8:	189a      	adds	r2, r3, r2
 80009ca:	42ba      	cmp	r2, r7
 80009cc:	d8bf      	bhi.n	800094e <main+0x412>
 80009ce:	2206      	movs	r2, #6
 80009d0:	602b      	str	r3, [r5, #0]
 80009d2:	2300      	movs	r3, #0
 80009d4:	6032      	str	r2, [r6, #0]
 80009d6:	6023      	str	r3, [r4, #0]
	if ((freq >= 23000)&&(freq <= 31000)) {flag_band=8; previous_frequency = freq; freq = 0;}
 80009d8:	e7c3      	b.n	8000962 <main+0x426>
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	ffffdcd8 	.word	0xffffdcd8
 80009e0:	ffffb1e0 	.word	0xffffb1e0
 80009e4:	fffffc7c 	.word	0xfffffc7c
 80009e8:	fffff47a 	.word	0xfffff47a
 80009ec:	0000060e 	.word	0x0000060e
 80009f0:	ffffcd38 	.word	0xffffcd38
 80009f4:	ffffa628 	.word	0xffffa628
 80009f8:	ffffe69c 	.word	0xffffe69c
 80009fc:	ffffbd98 	.word	0xffffbd98

08000a00 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a00:	2201      	movs	r2, #1
 8000a02:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_MspInit+0x2c>)
{
 8000a04:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000a08:	4311      	orrs	r1, r2
 8000a0a:	6419      	str	r1, [r3, #64]	@ 0x40
 8000a0c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000a0e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a10:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	9200      	str	r2, [sp, #0]
 8000a14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a18:	0549      	lsls	r1, r1, #21
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a20:	400b      	ands	r3, r1
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a26:	b002      	add	sp, #8
 8000a28:	4770      	bx	lr
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a30:	b530      	push	{r4, r5, lr}
 8000a32:	0004      	movs	r4, r0
 8000a34:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	2214      	movs	r2, #20
 8000a38:	2100      	movs	r1, #0
 8000a3a:	a806      	add	r0, sp, #24
 8000a3c:	f001 fd4e 	bl	80024dc <memset>
  if(htim_base->Instance==TIM1)
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	4a2c      	ldr	r2, [pc, #176]	@ (8000af4 <HAL_TIM_Base_MspInit+0xc4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d024      	beq.n	8000a92 <HAL_TIM_Base_MspInit+0x62>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000a48:	4a2b      	ldr	r2, [pc, #172]	@ (8000af8 <HAL_TIM_Base_MspInit+0xc8>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d004      	beq.n	8000a58 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8000a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000afc <HAL_TIM_Base_MspInit+0xcc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d00b      	beq.n	8000a6c <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a54:	b00d      	add	sp, #52	@ 0x34
 8000a56:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a58:	2302      	movs	r3, #2
 8000a5a:	4a29      	ldr	r2, [pc, #164]	@ (8000b00 <HAL_TIM_Base_MspInit+0xd0>)
 8000a5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000a5e:	4319      	orrs	r1, r3
 8000a60:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000a62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000a64:	4013      	ands	r3, r2
 8000a66:	9304      	str	r3, [sp, #16]
 8000a68:	9b04      	ldr	r3, [sp, #16]
 8000a6a:	e7f3      	b.n	8000a54 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	4b24      	ldr	r3, [pc, #144]	@ (8000b00 <HAL_TIM_Base_MspInit+0xd0>)
 8000a70:	0289      	lsls	r1, r1, #10
 8000a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000a74:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a76:	430a      	orrs	r2, r1
 8000a78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a7e:	400b      	ands	r3, r1
 8000a80:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000a82:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a84:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000a86:	f000 f90b 	bl	8000ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000a8a:	2015      	movs	r0, #21
 8000a8c:	f000 f932 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
}
 8000a90:	e7e0      	b.n	8000a54 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a92:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	2402      	movs	r4, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a98:	4b19      	ldr	r3, [pc, #100]	@ (8000b00 <HAL_TIM_Base_MspInit+0xd0>)
 8000a9a:	0109      	lsls	r1, r1, #4
 8000a9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa8:	400a      	ands	r2, r1
 8000aaa:	9201      	str	r2, [sp, #4]
 8000aac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	432a      	orrs	r2, r5
 8000ab4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ab8:	402a      	ands	r2, r5
 8000aba:	9202      	str	r2, [sp, #8]
 8000abc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ac0:	4322      	orrs	r2, r4
 8000ac2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ac6:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac8:	4023      	ands	r3, r4
 8000aca:	9303      	str	r3, [sp, #12]
 8000acc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	0152      	lsls	r2, r2, #5
 8000ad2:	9206      	str	r2, [sp, #24]
 8000ad4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000ad6:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f000 f932 	bl	8000d40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000adc:	2308      	movs	r3, #8
 8000ade:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <HAL_TIM_Base_MspInit+0xd4>)
 8000ae4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000aec:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f000 f927 	bl	8000d40 <HAL_GPIO_Init>
 8000af2:	e7af      	b.n	8000a54 <HAL_TIM_Base_MspInit+0x24>
 8000af4:	40012c00 	.word	0x40012c00
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40014400 	.word	0x40014400
 8000b00:	40021000 	.word	0x40021000
 8000b04:	50000400 	.word	0x50000400

08000b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b08:	b510      	push	{r4, lr}
 8000b0a:	0004      	movs	r4, r0
 8000b0c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0e:	2214      	movs	r2, #20
 8000b10:	2100      	movs	r1, #0
 8000b12:	a802      	add	r0, sp, #8
 8000b14:	f001 fce2 	bl	80024dc <memset>
  if(htim->Instance==TIM16)
 8000b18:	4b0d      	ldr	r3, [pc, #52]	@ (8000b50 <HAL_TIM_MspPostInit+0x48>)
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d001      	beq.n	8000b24 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000b20:	b008      	add	sp, #32
 8000b22:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b24:	2301      	movs	r3, #1
 8000b26:	4a0b      	ldr	r2, [pc, #44]	@ (8000b54 <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	4319      	orrs	r1, r3
 8000b30:	6351      	str	r1, [r2, #52]	@ 0x34
 8000b32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b34:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4013      	ands	r3, r2
 8000b38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3a:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	9202      	str	r2, [sp, #8]
 8000b42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000b44:	2305      	movs	r3, #5
 8000b46:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f000 f8fa 	bl	8000d40 <HAL_GPIO_Init>
}
 8000b4c:	e7e8      	b.n	8000b20 <HAL_TIM_MspPostInit+0x18>
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	40014400 	.word	0x40014400
 8000b54:	40021000 	.word	0x40021000

08000b58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	e7fe      	b.n	8000b58 <NMI_Handler>
 8000b5a:	46c0      	nop			@ (mov r8, r8)

08000b5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <HardFault_Handler>
 8000b5e:	46c0      	nop			@ (mov r8, r8)

08000b60 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b60:	4770      	bx	lr
 8000b62:	46c0      	nop			@ (mov r8, r8)

08000b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000b64:	4770      	bx	lr
 8000b66:	46c0      	nop			@ (mov r8, r8)

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6a:	f000 f887 	bl	8000c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6e:	bd10      	pop	{r4, pc}

08000b70 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000b70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000b72:	4802      	ldr	r0, [pc, #8]	@ (8000b7c <TIM16_IRQHandler+0xc>)
 8000b74:	f001 fa82 	bl	800207c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	20000028 	.word	0x20000028

08000b80 <TIM17_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000b80:	2301      	movs	r3, #1
 8000b82:	4a09      	ldr	r2, [pc, #36]	@ (8000ba8 <TIM17_IRQHandler+0x28>)

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000b84:	b510      	push	{r4, lr}
 8000b86:	6911      	ldr	r1, [r2, #16]
 8000b88:	420b      	tst	r3, r1
 8000b8a:	d00b      	beq.n	8000ba4 <TIM17_IRQHandler+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000b8c:	2102      	movs	r1, #2
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000b8e:	2480      	movs	r4, #128	@ 0x80
 8000b90:	4249      	negs	r1, r1
 8000b92:	6111      	str	r1, [r2, #16]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000b94:	4905      	ldr	r1, [pc, #20]	@ (8000bac <TIM17_IRQHandler+0x2c>)
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000b96:	0264      	lsls	r4, r4, #9
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000b98:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000b9a:	0402      	lsls	r2, r0, #16
 8000b9c:	4022      	ands	r2, r4
 8000b9e:	4383      	bics	r3, r0
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	618b      	str	r3, [r1, #24]
	}
  /* USER CODE END TIM17_IRQn 0 */
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000ba4:	bd10      	pop	{r4, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	40014800 	.word	0x40014800
 8000bac:	50000400 	.word	0x50000400

08000bb0 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	4770      	bx	lr
 8000bb2:	46c0      	nop			@ (mov r8, r8)

08000bb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bb4:	480d      	ldr	r0, [pc, #52]	@ (8000bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb8:	f7ff fffa 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bbc:	480c      	ldr	r0, [pc, #48]	@ (8000bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bbe:	490d      	ldr	r1, [pc, #52]	@ (8000bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf8 <LoopForever+0xe>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc4:	e002      	b.n	8000bcc <LoopCopyDataInit>

08000bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bca:	3304      	adds	r3, #4

08000bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd0:	d3f9      	bcc.n	8000bc6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000c00 <LoopForever+0x16>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd8:	e001      	b.n	8000bde <LoopFillZerobss>

08000bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bdc:	3204      	adds	r2, #4

08000bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be0:	d3fb      	bcc.n	8000bda <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000be2:	f001 fc83 	bl	80024ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000be6:	f7ff fca9 	bl	800053c <main>

08000bea <LoopForever>:

LoopForever:
  b LoopForever
 8000bea:	e7fe      	b.n	8000bea <LoopForever>
  ldr   r0, =_estack
 8000bec:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bf8:	0800262c 	.word	0x0800262c
  ldr r2, =_sbss
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c00:	20000124 	.word	0x20000124

08000c04 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c04:	e7fe      	b.n	8000c04 <ADC1_IRQHandler>
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_InitTick+0x40>)
{
 8000c0c:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000c0e:	7819      	ldrb	r1, [r3, #0]
 8000c10:	2900      	cmp	r1, #0
 8000c12:	d101      	bne.n	8000c18 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c14:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c18:	20fa      	movs	r0, #250	@ 0xfa
 8000c1a:	0080      	lsls	r0, r0, #2
 8000c1c:	f7ff fa70 	bl	8000100 <__udivsi3>
 8000c20:	4d0a      	ldr	r5, [pc, #40]	@ (8000c4c <HAL_InitTick+0x44>)
 8000c22:	0001      	movs	r1, r0
 8000c24:	6828      	ldr	r0, [r5, #0]
 8000c26:	f7ff fa6b 	bl	8000100 <__udivsi3>
 8000c2a:	f000 f86f 	bl	8000d0c <HAL_SYSTICK_Config>
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d1f0      	bne.n	8000c14 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	2c03      	cmp	r4, #3
 8000c34:	d8ee      	bhi.n	8000c14 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c36:	3801      	subs	r0, #1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	0021      	movs	r1, r4
 8000c3c:	f000 f830 	bl	8000ca0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_InitTick+0x48>)
 8000c42:	2000      	movs	r0, #0
 8000c44:	601c      	str	r4, [r3, #0]
  return status;
 8000c46:	e7e6      	b.n	8000c16 <HAL_InitTick+0xe>
 8000c48:	20000004 	.word	0x20000004
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008

08000c54 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_Init+0x24>)
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	6811      	ldr	r1, [r2, #0]
{
 8000c5c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5e:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c60:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c62:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c64:	f7ff ffd0 	bl	8000c08 <HAL_InitTick>
 8000c68:	1e04      	subs	r4, r0, #0
 8000c6a:	d002      	beq.n	8000c72 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000c6c:	2401      	movs	r4, #1
}
 8000c6e:	0020      	movs	r0, r4
 8000c70:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000c72:	f7ff fec5 	bl	8000a00 <HAL_MspInit>
 8000c76:	e7fa      	b.n	8000c6e <HAL_Init+0x1a>
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_IncTick+0x10>)
 8000c7e:	4b04      	ldr	r3, [pc, #16]	@ (8000c90 <HAL_IncTick+0x14>)
 8000c80:	6811      	ldr	r1, [r2, #0]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	185b      	adds	r3, r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	4770      	bx	lr
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	20000120 	.word	0x20000120
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000c94:	4b01      	ldr	r3, [pc, #4]	@ (8000c9c <HAL_GetTick+0x8>)
 8000c96:	6818      	ldr	r0, [r3, #0]
}
 8000c98:	4770      	bx	lr
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	20000120 	.word	0x20000120

08000ca0 <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca0:	22ff      	movs	r2, #255	@ 0xff
 8000ca2:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b510      	push	{r4, lr}
 8000ca6:	0014      	movs	r4, r2
 8000ca8:	4003      	ands	r3, r0
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cae:	0189      	lsls	r1, r1, #6
 8000cb0:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cb2:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb4:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	db0b      	blt.n	8000cd2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <HAL_NVIC_SetPriority+0x4c>)
 8000cbc:	21c0      	movs	r1, #192	@ 0xc0
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	0880      	lsrs	r0, r0, #2
 8000cc2:	0080      	lsls	r0, r0, #2
 8000cc4:	4460      	add	r0, ip
 8000cc6:	0089      	lsls	r1, r1, #2
 8000cc8:	5843      	ldr	r3, [r0, r1]
 8000cca:	4023      	ands	r3, r4
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000cd0:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	4906      	ldr	r1, [pc, #24]	@ (8000cf0 <HAL_NVIC_SetPriority+0x50>)
 8000cd6:	4003      	ands	r3, r0
 8000cd8:	468c      	mov	ip, r1
 8000cda:	3b08      	subs	r3, #8
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4463      	add	r3, ip
 8000ce2:	69d9      	ldr	r1, [r3, #28]
 8000ce4:	400c      	ands	r4, r1
 8000ce6:	4314      	orrs	r4, r2
 8000ce8:	61dc      	str	r4, [r3, #28]
 8000cea:	e7f1      	b.n	8000cd0 <HAL_NVIC_SetPriority+0x30>
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	db05      	blt.n	8000d04 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf8:	221f      	movs	r2, #31
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4002      	ands	r2, r0
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	4a01      	ldr	r2, [pc, #4]	@ (8000d08 <HAL_NVIC_EnableIRQ+0x14>)
 8000d02:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d04:	4770      	bx	lr
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d0c:	2280      	movs	r2, #128	@ 0x80
 8000d0e:	1e43      	subs	r3, r0, #1
 8000d10:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d12:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d20e      	bcs.n	8000d36 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d18:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1a:	4a07      	ldr	r2, [pc, #28]	@ (8000d38 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	6a03      	ldr	r3, [r0, #32]
 8000d22:	0609      	lsls	r1, r1, #24
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	0a1b      	lsrs	r3, r3, #8
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d2e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	3307      	adds	r3, #7
 8000d34:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000d36:	4770      	bx	lr
 8000d38:	e000e010 	.word	0xe000e010
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d42:	46de      	mov	lr, fp
 8000d44:	4657      	mov	r7, sl
 8000d46:	464e      	mov	r6, r9
 8000d48:	4645      	mov	r5, r8
 8000d4a:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4c:	680c      	ldr	r4, [r1, #0]
{
 8000d4e:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8000d50:	2300      	movs	r3, #0
{
 8000d52:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d068      	beq.n	8000e2a <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d58:	2201      	movs	r2, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	4694      	mov	ip, r2
 8000d5e:	4022      	ands	r2, r4
 8000d60:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8000d62:	4662      	mov	r2, ip
 8000d64:	4214      	tst	r4, r2
 8000d66:	d05c      	beq.n	8000e22 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d68:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6a:	465a      	mov	r2, fp
 8000d6c:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d6e:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d70:	6855      	ldr	r5, [r2, #4]
 8000d72:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d74:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d76:	402a      	ands	r2, r5
 8000d78:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7a:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d7c:	2e01      	cmp	r6, #1
 8000d7e:	d95b      	bls.n	8000e38 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d80:	2a03      	cmp	r2, #3
 8000d82:	d000      	beq.n	8000d86 <HAL_GPIO_Init+0x46>
 8000d84:	e0ad      	b.n	8000ee2 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d86:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000d88:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d8a:	9900      	ldr	r1, [sp, #0]
 8000d8c:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d8e:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000d90:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d92:	22c0      	movs	r2, #192	@ 0xc0
 8000d94:	0292      	lsls	r2, r2, #10
 8000d96:	4215      	tst	r5, r2
 8000d98:	d043      	beq.n	8000e22 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000d9a:	2703      	movs	r7, #3
 8000d9c:	260f      	movs	r6, #15
 8000d9e:	495d      	ldr	r1, [pc, #372]	@ (8000f14 <HAL_GPIO_Init+0x1d4>)
 8000da0:	401f      	ands	r7, r3
 8000da2:	468c      	mov	ip, r1
 8000da4:	00ff      	lsls	r7, r7, #3
 8000da6:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8000da8:	089a      	lsrs	r2, r3, #2
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000db0:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000db2:	26a0      	movs	r6, #160	@ 0xa0
 8000db4:	05f6      	lsls	r6, r6, #23
 8000db6:	42b0      	cmp	r0, r6
 8000db8:	d00e      	beq.n	8000dd8 <HAL_GPIO_Init+0x98>
 8000dba:	4e57      	ldr	r6, [pc, #348]	@ (8000f18 <HAL_GPIO_Init+0x1d8>)
 8000dbc:	42b0      	cmp	r0, r6
 8000dbe:	d100      	bne.n	8000dc2 <HAL_GPIO_Init+0x82>
 8000dc0:	e0a0      	b.n	8000f04 <HAL_GPIO_Init+0x1c4>
 8000dc2:	4e56      	ldr	r6, [pc, #344]	@ (8000f1c <HAL_GPIO_Init+0x1dc>)
 8000dc4:	42b0      	cmp	r0, r6
 8000dc6:	d100      	bne.n	8000dca <HAL_GPIO_Init+0x8a>
 8000dc8:	e0a0      	b.n	8000f0c <HAL_GPIO_Init+0x1cc>
 8000dca:	4e55      	ldr	r6, [pc, #340]	@ (8000f20 <HAL_GPIO_Init+0x1e0>)
 8000dcc:	42b0      	cmp	r0, r6
 8000dce:	d100      	bne.n	8000dd2 <HAL_GPIO_Init+0x92>
 8000dd0:	e094      	b.n	8000efc <HAL_GPIO_Init+0x1bc>
 8000dd2:	2605      	movs	r6, #5
 8000dd4:	40be      	lsls	r6, r7
 8000dd6:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dd8:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8000dda:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8000ddc:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8000dde:	4a4d      	ldr	r2, [pc, #308]	@ (8000f14 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de0:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8000de2:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8000de4:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000de6:	4235      	tst	r5, r6
 8000de8:	d000      	beq.n	8000dec <HAL_GPIO_Init+0xac>
 8000dea:	e077      	b.n	8000edc <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000dec:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000dee:	4e49      	ldr	r6, [pc, #292]	@ (8000f14 <HAL_GPIO_Init+0x1d4>)
 8000df0:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8000df2:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df4:	2680      	movs	r6, #128	@ 0x80
 8000df6:	03b6      	lsls	r6, r6, #14
 8000df8:	4235      	tst	r5, r6
 8000dfa:	d16c      	bne.n	8000ed6 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8000dfc:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8000dfe:	4e45      	ldr	r6, [pc, #276]	@ (8000f14 <HAL_GPIO_Init+0x1d4>)
 8000e00:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e02:	2284      	movs	r2, #132	@ 0x84
 8000e04:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e06:	03af      	lsls	r7, r5, #14
 8000e08:	d462      	bmi.n	8000ed0 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000e0a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000e0c:	2784      	movs	r7, #132	@ 0x84
 8000e0e:	4e41      	ldr	r6, [pc, #260]	@ (8000f14 <HAL_GPIO_Init+0x1d4>)
 8000e10:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8000e12:	2280      	movs	r2, #128	@ 0x80
 8000e14:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e16:	03ed      	lsls	r5, r5, #15
 8000e18:	d456      	bmi.n	8000ec8 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8000e1a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	4d3d      	ldr	r5, [pc, #244]	@ (8000f14 <HAL_GPIO_Init+0x1d4>)
 8000e20:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	0022      	movs	r2, r4
      }
    }

    position++;
 8000e24:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	40da      	lsrs	r2, r3
 8000e28:	d196      	bne.n	8000d58 <HAL_GPIO_Init+0x18>
  }
}
 8000e2a:	b003      	add	sp, #12
 8000e2c:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2e:	46bb      	mov	fp, r7
 8000e30:	46b2      	mov	sl, r6
 8000e32:	46a9      	mov	r9, r5
 8000e34:	46a0      	mov	r8, r4
 8000e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000e38:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3a:	000e      	movs	r6, r1
 8000e3c:	9900      	ldr	r1, [sp, #0]
 8000e3e:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e40:	4659      	mov	r1, fp
 8000e42:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e44:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e46:	000e      	movs	r6, r1
 8000e48:	40be      	lsls	r6, r7
 8000e4a:	46b0      	mov	r8, r6
 8000e4c:	464e      	mov	r6, r9
 8000e4e:	4641      	mov	r1, r8
 8000e50:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8000e52:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e54:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e56:	000e      	movs	r6, r1
 8000e58:	4661      	mov	r1, ip
 8000e5a:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5c:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5e:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e60:	000e      	movs	r6, r1
 8000e62:	2101      	movs	r1, #1
 8000e64:	400e      	ands	r6, r1
 8000e66:	409e      	lsls	r6, r3
 8000e68:	46b4      	mov	ip, r6
 8000e6a:	4646      	mov	r6, r8
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8000e70:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000e72:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e74:	000e      	movs	r6, r1
 8000e76:	9900      	ldr	r1, [sp, #0]
 8000e78:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e7a:	4659      	mov	r1, fp
 8000e7c:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e7e:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e80:	000e      	movs	r6, r1
 8000e82:	40be      	lsls	r6, r7
 8000e84:	46b4      	mov	ip, r6
 8000e86:	4646      	mov	r6, r8
 8000e88:	4661      	mov	r1, ip
 8000e8a:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8000e8c:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	2a02      	cmp	r2, #2
 8000e90:	d000      	beq.n	8000e94 <HAL_GPIO_Init+0x154>
 8000e92:	e778      	b.n	8000d86 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8000e94:	08d9      	lsrs	r1, r3, #3
 8000e96:	0089      	lsls	r1, r1, #2
 8000e98:	468c      	mov	ip, r1
 8000e9a:	4484      	add	ip, r0
 8000e9c:	4661      	mov	r1, ip
 8000e9e:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	4019      	ands	r1, r3
 8000ea4:	0089      	lsls	r1, r1, #2
 8000ea6:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8000ea8:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eaa:	210f      	movs	r1, #15
 8000eac:	4646      	mov	r6, r8
 8000eae:	40b1      	lsls	r1, r6
 8000eb0:	9e01      	ldr	r6, [sp, #4]
 8000eb2:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb4:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb6:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb8:	4646      	mov	r6, r8
 8000eba:	6909      	ldr	r1, [r1, #16]
 8000ebc:	40b1      	lsls	r1, r6
 8000ebe:	9e01      	ldr	r6, [sp, #4]
 8000ec0:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000ec2:	4661      	mov	r1, ip
 8000ec4:	620e      	str	r6, [r1, #32]
 8000ec6:	e75e      	b.n	8000d86 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000ec8:	4651      	mov	r1, sl
 8000eca:	4311      	orrs	r1, r2
 8000ecc:	000a      	movs	r2, r1
 8000ece:	e7a5      	b.n	8000e1c <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000ed0:	4656      	mov	r6, sl
 8000ed2:	4332      	orrs	r2, r6
 8000ed4:	e79a      	b.n	8000e0c <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8000ed6:	4656      	mov	r6, sl
 8000ed8:	4332      	orrs	r2, r6
 8000eda:	e790      	b.n	8000dfe <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000edc:	4656      	mov	r6, sl
 8000ede:	4332      	orrs	r2, r6
 8000ee0:	e785      	b.n	8000dee <HAL_GPIO_Init+0xae>
 8000ee2:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8000ee4:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ee6:	4031      	ands	r1, r6
 8000ee8:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eea:	4659      	mov	r1, fp
 8000eec:	6889      	ldr	r1, [r1, #8]
 8000eee:	40b9      	lsls	r1, r7
 8000ef0:	468c      	mov	ip, r1
 8000ef2:	4641      	mov	r1, r8
 8000ef4:	4666      	mov	r6, ip
 8000ef6:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000ef8:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000efa:	e744      	b.n	8000d86 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000efc:	2603      	movs	r6, #3
 8000efe:	40be      	lsls	r6, r7
 8000f00:	4331      	orrs	r1, r6
 8000f02:	e769      	b.n	8000dd8 <HAL_GPIO_Init+0x98>
 8000f04:	2601      	movs	r6, #1
 8000f06:	40be      	lsls	r6, r7
 8000f08:	4331      	orrs	r1, r6
 8000f0a:	e765      	b.n	8000dd8 <HAL_GPIO_Init+0x98>
 8000f0c:	2602      	movs	r6, #2
 8000f0e:	40be      	lsls	r6, r7
 8000f10:	4331      	orrs	r1, r6
 8000f12:	e761      	b.n	8000dd8 <HAL_GPIO_Init+0x98>
 8000f14:	40021800 	.word	0x40021800
 8000f18:	50000400 	.word	0x50000400
 8000f1c:	50000800 	.word	0x50000800
 8000f20:	50000c00 	.word	0x50000c00

08000f24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f26:	4c13      	ldr	r4, [pc, #76]	@ (8000f74 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000f28:	4a13      	ldr	r2, [pc, #76]	@ (8000f78 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8000f2a:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000f2c:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f2e:	4013      	ands	r3, r2
 8000f30:	4303      	orrs	r3, r0
 8000f32:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4298      	cmp	r0, r3
 8000f3a:	d001      	beq.n	8000f40 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8000f3c:	0028      	movs	r0, r5
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <HAL_PWREx_ControlVoltageScaling+0x58>)
 8000f42:	490f      	ldr	r1, [pc, #60]	@ (8000f80 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	0058      	lsls	r0, r3, #1
 8000f48:	18c0      	adds	r0, r0, r3
 8000f4a:	0040      	lsls	r0, r0, #1
 8000f4c:	f7ff f8d8 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	6963      	ldr	r3, [r4, #20]
 8000f54:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f56:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f58:	4213      	tst	r3, r2
 8000f5a:	d102      	bne.n	8000f62 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8000f5c:	e7ee      	b.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d005      	beq.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f62:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8000f64:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f66:	4213      	tst	r3, r2
 8000f68:	d1f9      	bne.n	8000f5e <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	e7e6      	b.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8000f6e:	2503      	movs	r5, #3
 8000f70:	e7e4      	b.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x18>
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	40007000 	.word	0x40007000
 8000f78:	fffff9ff 	.word	0xfffff9ff
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	000f4240 	.word	0x000f4240

08000f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	46ce      	mov	lr, r9
 8000f88:	4647      	mov	r7, r8
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	0004      	movs	r4, r0
 8000f8e:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d027      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f94:	6803      	ldr	r3, [r0, #0]
 8000f96:	07da      	lsls	r2, r3, #31
 8000f98:	d511      	bpl.n	8000fbe <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f9a:	2238      	movs	r2, #56	@ 0x38
 8000f9c:	49c0      	ldr	r1, [pc, #768]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8000f9e:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa0:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fa2:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000fa4:	2a10      	cmp	r2, #16
 8000fa6:	d100      	bne.n	8000faa <HAL_RCC_OscConfig+0x26>
 8000fa8:	e0cc      	b.n	8001144 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000faa:	2a08      	cmp	r2, #8
 8000fac:	d000      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x2c>
 8000fae:	e0cd      	b.n	800114c <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb0:	4abb      	ldr	r2, [pc, #748]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8000fb2:	6812      	ldr	r2, [r2, #0]
 8000fb4:	0392      	lsls	r2, r2, #14
 8000fb6:	d502      	bpl.n	8000fbe <HAL_RCC_OscConfig+0x3a>
 8000fb8:	6862      	ldr	r2, [r4, #4]
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d012      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	079a      	lsls	r2, r3, #30
 8000fc0:	d532      	bpl.n	8001028 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc2:	2338      	movs	r3, #56	@ 0x38
 8000fc4:	4ab6      	ldr	r2, [pc, #728]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8000fc6:	6891      	ldr	r1, [r2, #8]
 8000fc8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fca:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000fcc:	2b10      	cmp	r3, #16
 8000fce:	d100      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4e>
 8000fd0:	e10b      	b.n	80011ea <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d000      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x54>
 8000fd6:	e10d      	b.n	80011f4 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	055b      	lsls	r3, r3, #21
 8000fdc:	d508      	bpl.n	8000ff0 <HAL_RCC_OscConfig+0x6c>
 8000fde:	68e3      	ldr	r3, [r4, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8000fe4:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8000fe6:	b003      	add	sp, #12
 8000fe8:	bcc0      	pop	{r6, r7}
 8000fea:	46b9      	mov	r9, r7
 8000fec:	46b0      	mov	r8, r6
 8000fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	6851      	ldr	r1, [r2, #4]
 8000ff2:	6963      	ldr	r3, [r4, #20]
 8000ff4:	48ab      	ldr	r0, [pc, #684]	@ (80012a4 <HAL_RCC_OscConfig+0x320>)
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	4001      	ands	r1, r0
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000ffe:	4aa8      	ldr	r2, [pc, #672]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8001000:	49a9      	ldr	r1, [pc, #676]	@ (80012a8 <HAL_RCC_OscConfig+0x324>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	400b      	ands	r3, r1
 8001006:	6921      	ldr	r1, [r4, #16]
 8001008:	430b      	orrs	r3, r1
 800100a:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	4aa7      	ldr	r2, [pc, #668]	@ (80012ac <HAL_RCC_OscConfig+0x328>)
 8001010:	049b      	lsls	r3, r3, #18
 8001012:	0f5b      	lsrs	r3, r3, #29
 8001014:	40da      	lsrs	r2, r3
 8001016:	49a6      	ldr	r1, [pc, #664]	@ (80012b0 <HAL_RCC_OscConfig+0x32c>)
 8001018:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800101a:	4ba6      	ldr	r3, [pc, #664]	@ (80012b4 <HAL_RCC_OscConfig+0x330>)
 800101c:	6818      	ldr	r0, [r3, #0]
 800101e:	f7ff fdf3 	bl	8000c08 <HAL_InitTick>
 8001022:	2800      	cmp	r0, #0
 8001024:	d1de      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001026:	6823      	ldr	r3, [r4, #0]
 8001028:	071a      	lsls	r2, r3, #28
 800102a:	d46d      	bmi.n	8001108 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800102c:	075b      	lsls	r3, r3, #29
 800102e:	d545      	bpl.n	80010bc <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001030:	2338      	movs	r3, #56	@ 0x38
 8001032:	4a9b      	ldr	r2, [pc, #620]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8001034:	6891      	ldr	r1, [r2, #8]
 8001036:	400b      	ands	r3, r1
 8001038:	2b20      	cmp	r3, #32
 800103a:	d100      	bne.n	800103e <HAL_RCC_OscConfig+0xba>
 800103c:	e0cc      	b.n	80011d8 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800103e:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001040:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001042:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001044:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8001046:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001048:	4219      	tst	r1, r3
 800104a:	d108      	bne.n	800105e <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800104e:	4319      	orrs	r1, r3
 8001050:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001052:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001054:	4013      	ands	r3, r2
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 800105a:	2301      	movs	r3, #1
 800105c:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800105e:	2780      	movs	r7, #128	@ 0x80
 8001060:	4e95      	ldr	r6, [pc, #596]	@ (80012b8 <HAL_RCC_OscConfig+0x334>)
 8001062:	007f      	lsls	r7, r7, #1
 8001064:	6833      	ldr	r3, [r6, #0]
 8001066:	423b      	tst	r3, r7
 8001068:	d100      	bne.n	800106c <HAL_RCC_OscConfig+0xe8>
 800106a:	e0ff      	b.n	800126c <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	68a3      	ldr	r3, [r4, #8]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d100      	bne.n	8001074 <HAL_RCC_OscConfig+0xf0>
 8001072:	e0e5      	b.n	8001240 <HAL_RCC_OscConfig+0x2bc>
 8001074:	2b05      	cmp	r3, #5
 8001076:	d100      	bne.n	800107a <HAL_RCC_OscConfig+0xf6>
 8001078:	e1c8      	b.n	800140c <HAL_RCC_OscConfig+0x488>
 800107a:	2101      	movs	r1, #1
 800107c:	4e88      	ldr	r6, [pc, #544]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 800107e:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001080:	438a      	bics	r2, r1
 8001082:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8001084:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8001086:	3103      	adds	r1, #3
 8001088:	438a      	bics	r2, r1
 800108a:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108c:	2b00      	cmp	r3, #0
 800108e:	d000      	beq.n	8001092 <HAL_RCC_OscConfig+0x10e>
 8001090:	e0da      	b.n	8001248 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8001092:	f7ff fdff 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001096:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8001098:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800109a:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109c:	4d87      	ldr	r5, [pc, #540]	@ (80012bc <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800109e:	e005      	b.n	80010ac <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff fdf8 	bl	8000c94 <HAL_GetTick>
 80010a4:	1bc0      	subs	r0, r0, r7
 80010a6:	42a8      	cmp	r0, r5
 80010a8:	d900      	bls.n	80010ac <HAL_RCC_OscConfig+0x128>
 80010aa:	e0ee      	b.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ac:	4642      	mov	r2, r8
 80010ae:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80010b0:	421a      	tst	r2, r3
 80010b2:	d1f5      	bne.n	80010a0 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 80010b4:	464b      	mov	r3, r9
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d100      	bne.n	80010bc <HAL_RCC_OscConfig+0x138>
 80010ba:	e163      	b.n	8001384 <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80010bc:	69e3      	ldr	r3, [r4, #28]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d020      	beq.n	8001104 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010c2:	2238      	movs	r2, #56	@ 0x38
 80010c4:	4d76      	ldr	r5, [pc, #472]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 80010c6:	68a9      	ldr	r1, [r5, #8]
 80010c8:	400a      	ands	r2, r1
 80010ca:	2a10      	cmp	r2, #16
 80010cc:	d100      	bne.n	80010d0 <HAL_RCC_OscConfig+0x14c>
 80010ce:	e11d      	b.n	800130c <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0x152>
 80010d4:	e15c      	b.n	8001390 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	4a79      	ldr	r2, [pc, #484]	@ (80012c0 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010da:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80010dc:	4013      	ands	r3, r2
 80010de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010e0:	f7ff fdd8 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010e4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80010e6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010e8:	e005      	b.n	80010f6 <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff fdd3 	bl	8000c94 <HAL_GetTick>
 80010ee:	1b00      	subs	r0, r0, r4
 80010f0:	2802      	cmp	r0, #2
 80010f2:	d900      	bls.n	80010f6 <HAL_RCC_OscConfig+0x172>
 80010f4:	e0c9      	b.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010f6:	682b      	ldr	r3, [r5, #0]
 80010f8:	4233      	tst	r3, r6
 80010fa:	d1f6      	bne.n	80010ea <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80010fc:	68eb      	ldr	r3, [r5, #12]
 80010fe:	4a71      	ldr	r2, [pc, #452]	@ (80012c4 <HAL_RCC_OscConfig+0x340>)
 8001100:	4013      	ands	r3, r2
 8001102:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8001104:	2000      	movs	r0, #0
 8001106:	e76e      	b.n	8000fe6 <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001108:	2238      	movs	r2, #56	@ 0x38
 800110a:	4d65      	ldr	r5, [pc, #404]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 800110c:	68a9      	ldr	r1, [r5, #8]
 800110e:	400a      	ands	r2, r1
 8001110:	2a18      	cmp	r2, #24
 8001112:	d043      	beq.n	800119c <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001114:	69a3      	ldr	r3, [r4, #24]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_RCC_OscConfig+0x198>
 800111a:	e0b8      	b.n	800128e <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 800111c:	2201      	movs	r2, #1
 800111e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001120:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8001122:	4313      	orrs	r3, r2
 8001124:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001126:	f7ff fdb5 	bl	8000c94 <HAL_GetTick>
 800112a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800112c:	e005      	b.n	800113a <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fdb1 	bl	8000c94 <HAL_GetTick>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	2802      	cmp	r0, #2
 8001136:	d900      	bls.n	800113a <HAL_RCC_OscConfig+0x1b6>
 8001138:	e0a7      	b.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800113a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800113c:	421f      	tst	r7, r3
 800113e:	d0f6      	beq.n	800112e <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	e773      	b.n	800102c <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001144:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001146:	0789      	lsls	r1, r1, #30
 8001148:	d100      	bne.n	800114c <HAL_RCC_OscConfig+0x1c8>
 800114a:	e731      	b.n	8000fb0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	6863      	ldr	r3, [r4, #4]
 8001150:	0252      	lsls	r2, r2, #9
 8001152:	4293      	cmp	r3, r2
 8001154:	d02b      	beq.n	80011ae <HAL_RCC_OscConfig+0x22a>
 8001156:	21a0      	movs	r1, #160	@ 0xa0
 8001158:	02c9      	lsls	r1, r1, #11
 800115a:	428b      	cmp	r3, r1
 800115c:	d100      	bne.n	8001160 <HAL_RCC_OscConfig+0x1dc>
 800115e:	e0fc      	b.n	800135a <HAL_RCC_OscConfig+0x3d6>
 8001160:	4d4f      	ldr	r5, [pc, #316]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8001162:	4959      	ldr	r1, [pc, #356]	@ (80012c8 <HAL_RCC_OscConfig+0x344>)
 8001164:	682a      	ldr	r2, [r5, #0]
 8001166:	400a      	ands	r2, r1
 8001168:	602a      	str	r2, [r5, #0]
 800116a:	682a      	ldr	r2, [r5, #0]
 800116c:	4957      	ldr	r1, [pc, #348]	@ (80012cc <HAL_RCC_OscConfig+0x348>)
 800116e:	400a      	ands	r2, r1
 8001170:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001172:	2b00      	cmp	r3, #0
 8001174:	d11f      	bne.n	80011b6 <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8001176:	f7ff fd8d 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800117a:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 800117c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800117e:	02bf      	lsls	r7, r7, #10
 8001180:	e004      	b.n	800118c <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fd87 	bl	8000c94 <HAL_GetTick>
 8001186:	1b80      	subs	r0, r0, r6
 8001188:	2864      	cmp	r0, #100	@ 0x64
 800118a:	d87e      	bhi.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	423b      	tst	r3, r7
 8001190:	d1f7      	bne.n	8001182 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	079a      	lsls	r2, r3, #30
 8001196:	d400      	bmi.n	800119a <HAL_RCC_OscConfig+0x216>
 8001198:	e746      	b.n	8001028 <HAL_RCC_OscConfig+0xa4>
 800119a:	e712      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800119c:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 800119e:	0792      	lsls	r2, r2, #30
 80011a0:	d400      	bmi.n	80011a4 <HAL_RCC_OscConfig+0x220>
 80011a2:	e743      	b.n	800102c <HAL_RCC_OscConfig+0xa8>
 80011a4:	69a2      	ldr	r2, [r4, #24]
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d000      	beq.n	80011ac <HAL_RCC_OscConfig+0x228>
 80011aa:	e73f      	b.n	800102c <HAL_RCC_OscConfig+0xa8>
 80011ac:	e71a      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ae:	4a3c      	ldr	r2, [pc, #240]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 80011b0:	6811      	ldr	r1, [r2, #0]
 80011b2:	430b      	orrs	r3, r1
 80011b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011b6:	f7ff fd6d 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ba:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 80011bc:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011be:	4f38      	ldr	r7, [pc, #224]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 80011c0:	02b6      	lsls	r6, r6, #10
 80011c2:	e004      	b.n	80011ce <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fd66 	bl	8000c94 <HAL_GetTick>
 80011c8:	1b40      	subs	r0, r0, r5
 80011ca:	2864      	cmp	r0, #100	@ 0x64
 80011cc:	d85d      	bhi.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	4233      	tst	r3, r6
 80011d2:	d0f7      	beq.n	80011c4 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	e7dd      	b.n	8001194 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80011d8:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80011da:	079b      	lsls	r3, r3, #30
 80011dc:	d400      	bmi.n	80011e0 <HAL_RCC_OscConfig+0x25c>
 80011de:	e76d      	b.n	80010bc <HAL_RCC_OscConfig+0x138>
 80011e0:	68a3      	ldr	r3, [r4, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d000      	beq.n	80011e8 <HAL_RCC_OscConfig+0x264>
 80011e6:	e769      	b.n	80010bc <HAL_RCC_OscConfig+0x138>
 80011e8:	e6fc      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011ea:	3b0d      	subs	r3, #13
 80011ec:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d100      	bne.n	80011f4 <HAL_RCC_OscConfig+0x270>
 80011f2:	e0bc      	b.n	800136e <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011f6:	4d2a      	ldr	r5, [pc, #168]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d073      	beq.n	80012e4 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011fc:	682b      	ldr	r3, [r5, #0]
 80011fe:	4a2a      	ldr	r2, [pc, #168]	@ (80012a8 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001200:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001202:	4013      	ands	r3, r2
 8001204:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001206:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001208:	4313      	orrs	r3, r2
 800120a:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800120c:	2380      	movs	r3, #128	@ 0x80
 800120e:	682a      	ldr	r2, [r5, #0]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4313      	orrs	r3, r2
 8001214:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001216:	f7ff fd3d 	bl	8000c94 <HAL_GetTick>
 800121a:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800121c:	e004      	b.n	8001228 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fd39 	bl	8000c94 <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	2802      	cmp	r0, #2
 8001226:	d830      	bhi.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001228:	682b      	ldr	r3, [r5, #0]
 800122a:	423b      	tst	r3, r7
 800122c:	d0f7      	beq.n	800121e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800122e:	686a      	ldr	r2, [r5, #4]
 8001230:	6963      	ldr	r3, [r4, #20]
 8001232:	491c      	ldr	r1, [pc, #112]	@ (80012a4 <HAL_RCC_OscConfig+0x320>)
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	400a      	ands	r2, r1
 8001238:	4313      	orrs	r3, r2
 800123a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	e6f3      	b.n	8001028 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001240:	4917      	ldr	r1, [pc, #92]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
 8001242:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 8001244:	4313      	orrs	r3, r2
 8001246:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001248:	f7ff fd24 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 800124e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001250:	4698      	mov	r8, r3
 8001252:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001254:	4d19      	ldr	r5, [pc, #100]	@ (80012bc <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001256:	e004      	b.n	8001262 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001258:	f7ff fd1c 	bl	8000c94 <HAL_GetTick>
 800125c:	1b80      	subs	r0, r0, r6
 800125e:	42a8      	cmp	r0, r5
 8001260:	d813      	bhi.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001262:	4643      	mov	r3, r8
 8001264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001266:	421f      	tst	r7, r3
 8001268:	d0f6      	beq.n	8001258 <HAL_RCC_OscConfig+0x2d4>
 800126a:	e723      	b.n	80010b4 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800126c:	6833      	ldr	r3, [r6, #0]
 800126e:	433b      	orrs	r3, r7
 8001270:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001272:	f7ff fd0f 	bl	8000c94 <HAL_GetTick>
 8001276:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001278:	6833      	ldr	r3, [r6, #0]
 800127a:	423b      	tst	r3, r7
 800127c:	d000      	beq.n	8001280 <HAL_RCC_OscConfig+0x2fc>
 800127e:	e6f5      	b.n	800106c <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001280:	f7ff fd08 	bl	8000c94 <HAL_GetTick>
 8001284:	1b40      	subs	r0, r0, r5
 8001286:	2802      	cmp	r0, #2
 8001288:	d9f6      	bls.n	8001278 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 800128a:	2003      	movs	r0, #3
 800128c:	e6ab      	b.n	8000fe6 <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 800128e:	2201      	movs	r2, #1
 8001290:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001292:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8001294:	4393      	bics	r3, r2
 8001296:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001298:	f7ff fcfc 	bl	8000c94 <HAL_GetTick>
 800129c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800129e:	e01c      	b.n	80012da <HAL_RCC_OscConfig+0x356>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	ffff80ff 	.word	0xffff80ff
 80012a8:	ffffc7ff 	.word	0xffffc7ff
 80012ac:	00f42400 	.word	0x00f42400
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	40007000 	.word	0x40007000
 80012bc:	00001388 	.word	0x00001388
 80012c0:	feffffff 	.word	0xfeffffff
 80012c4:	effefffc 	.word	0xeffefffc
 80012c8:	fffeffff 	.word	0xfffeffff
 80012cc:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d0:	f7ff fce0 	bl	8000c94 <HAL_GetTick>
 80012d4:	1b80      	subs	r0, r0, r6
 80012d6:	2802      	cmp	r0, #2
 80012d8:	d8d7      	bhi.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012da:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80012dc:	421f      	tst	r7, r3
 80012de:	d1f7      	bne.n	80012d0 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	e6a3      	b.n	800102c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	4a50      	ldr	r2, [pc, #320]	@ (8001428 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012e8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80012ea:	4013      	ands	r3, r2
 80012ec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012ee:	f7ff fcd1 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f2:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80012f4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f6:	e004      	b.n	8001302 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f8:	f7ff fccc 	bl	8000c94 <HAL_GetTick>
 80012fc:	1b80      	subs	r0, r0, r6
 80012fe:	2802      	cmp	r0, #2
 8001300:	d8c3      	bhi.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	423b      	tst	r3, r7
 8001306:	d1f7      	bne.n	80012f8 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	e68d      	b.n	8001028 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800130c:	2b01      	cmp	r3, #1
 800130e:	d100      	bne.n	8001312 <HAL_RCC_OscConfig+0x38e>
 8001310:	e668      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8001314:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001316:	6a21      	ldr	r1, [r4, #32]
 8001318:	4002      	ands	r2, r0
 800131a:	428a      	cmp	r2, r1
 800131c:	d000      	beq.n	8001320 <HAL_RCC_OscConfig+0x39c>
 800131e:	e661      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001320:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001322:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001324:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001326:	428a      	cmp	r2, r1
 8001328:	d000      	beq.n	800132c <HAL_RCC_OscConfig+0x3a8>
 800132a:	e65b      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800132c:	21fe      	movs	r1, #254	@ 0xfe
 800132e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001330:	01c9      	lsls	r1, r1, #7
 8001332:	4001      	ands	r1, r0
 8001334:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001336:	4291      	cmp	r1, r2
 8001338:	d000      	beq.n	800133c <HAL_RCC_OscConfig+0x3b8>
 800133a:	e653      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800133c:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800133e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001340:	0392      	lsls	r2, r2, #14
 8001342:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001344:	428a      	cmp	r2, r1
 8001346:	d000      	beq.n	800134a <HAL_RCC_OscConfig+0x3c6>
 8001348:	e64c      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800134a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800134c:	0f40      	lsrs	r0, r0, #29
 800134e:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001350:	1ac0      	subs	r0, r0, r3
 8001352:	1e43      	subs	r3, r0, #1
 8001354:	4198      	sbcs	r0, r3
 8001356:	b2c0      	uxtb	r0, r0
 8001358:	e645      	b.n	8000fe6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800135a:	2180      	movs	r1, #128	@ 0x80
 800135c:	4b33      	ldr	r3, [pc, #204]	@ (800142c <HAL_RCC_OscConfig+0x4a8>)
 800135e:	02c9      	lsls	r1, r1, #11
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	4301      	orrs	r1, r0
 8001364:	6019      	str	r1, [r3, #0]
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800136c:	e723      	b.n	80011b6 <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136e:	6813      	ldr	r3, [r2, #0]
 8001370:	055b      	lsls	r3, r3, #21
 8001372:	d455      	bmi.n	8001420 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	6851      	ldr	r1, [r2, #4]
 8001376:	6963      	ldr	r3, [r4, #20]
 8001378:	482d      	ldr	r0, [pc, #180]	@ (8001430 <HAL_RCC_OscConfig+0x4ac>)
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	4001      	ands	r1, r0
 800137e:	430b      	orrs	r3, r1
 8001380:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001382:	e64a      	b.n	800101a <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001384:	4a29      	ldr	r2, [pc, #164]	@ (800142c <HAL_RCC_OscConfig+0x4a8>)
 8001386:	492b      	ldr	r1, [pc, #172]	@ (8001434 <HAL_RCC_OscConfig+0x4b0>)
 8001388:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800138a:	400b      	ands	r3, r1
 800138c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800138e:	e695      	b.n	80010bc <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8001390:	682b      	ldr	r3, [r5, #0]
 8001392:	4a29      	ldr	r2, [pc, #164]	@ (8001438 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001394:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001396:	4013      	ands	r3, r2
 8001398:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800139a:	f7ff fc7b 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800139e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80013a0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013a2:	e005      	b.n	80013b0 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fc76 	bl	8000c94 <HAL_GetTick>
 80013a8:	1b80      	subs	r0, r0, r6
 80013aa:	2802      	cmp	r0, #2
 80013ac:	d900      	bls.n	80013b0 <HAL_RCC_OscConfig+0x42c>
 80013ae:	e76c      	b.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	423b      	tst	r3, r7
 80013b4:	d1f6      	bne.n	80013a4 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013b6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80013b8:	6a23      	ldr	r3, [r4, #32]
 80013ba:	68ea      	ldr	r2, [r5, #12]
 80013bc:	430b      	orrs	r3, r1
 80013be:	491f      	ldr	r1, [pc, #124]	@ (800143c <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013c0:	4e1a      	ldr	r6, [pc, #104]	@ (800142c <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013c2:	400a      	ands	r2, r1
 80013c4:	4313      	orrs	r3, r2
 80013c6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80013c8:	4313      	orrs	r3, r2
 80013ca:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80013cc:	4313      	orrs	r3, r2
 80013ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80013d0:	0212      	lsls	r2, r2, #8
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80013d6:	2380      	movs	r3, #128	@ 0x80
 80013d8:	682a      	ldr	r2, [r5, #0]
 80013da:	045b      	lsls	r3, r3, #17
 80013dc:	4313      	orrs	r3, r2
 80013de:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80013e0:	2380      	movs	r3, #128	@ 0x80
 80013e2:	68ea      	ldr	r2, [r5, #12]
 80013e4:	055b      	lsls	r3, r3, #21
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc53 	bl	8000c94 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013ee:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 80013f0:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f2:	04ad      	lsls	r5, r5, #18
 80013f4:	e005      	b.n	8001402 <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f6:	f7ff fc4d 	bl	8000c94 <HAL_GetTick>
 80013fa:	1b00      	subs	r0, r0, r4
 80013fc:	2802      	cmp	r0, #2
 80013fe:	d900      	bls.n	8001402 <HAL_RCC_OscConfig+0x47e>
 8001400:	e743      	b.n	800128a <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001402:	6833      	ldr	r3, [r6, #0]
 8001404:	422b      	tst	r3, r5
 8001406:	d0f6      	beq.n	80013f6 <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001408:	2000      	movs	r0, #0
 800140a:	e5ec      	b.n	8000fe6 <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	2104      	movs	r1, #4
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_RCC_OscConfig+0x4a8>)
 8001410:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001412:	430a      	orrs	r2, r1
 8001414:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001416:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001418:	3903      	subs	r1, #3
 800141a:	430a      	orrs	r2, r1
 800141c:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141e:	e713      	b.n	8001248 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001420:	68e3      	ldr	r3, [r4, #12]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1a6      	bne.n	8001374 <HAL_RCC_OscConfig+0x3f0>
 8001426:	e5dd      	b.n	8000fe4 <HAL_RCC_OscConfig+0x60>
 8001428:	fffffeff 	.word	0xfffffeff
 800142c:	40021000 	.word	0x40021000
 8001430:	ffff80ff 	.word	0xffff80ff
 8001434:	efffffff 	.word	0xefffffff
 8001438:	feffffff 	.word	0xfeffffff
 800143c:	1fc1808c 	.word	0x1fc1808c

08001440 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001440:	2338      	movs	r3, #56	@ 0x38
 8001442:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001444:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001446:	6891      	ldr	r1, [r2, #8]
 8001448:	420b      	tst	r3, r1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800144c:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800144e:	481c      	ldr	r0, [pc, #112]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001450:	049b      	lsls	r3, r3, #18
 8001452:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001454:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001456:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001458:	6891      	ldr	r1, [r2, #8]
 800145a:	4019      	ands	r1, r3
 800145c:	2908      	cmp	r1, #8
 800145e:	d014      	beq.n	800148a <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001460:	6891      	ldr	r1, [r2, #8]
 8001462:	4019      	ands	r1, r3
 8001464:	2910      	cmp	r1, #16
 8001466:	d012      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001468:	6891      	ldr	r1, [r2, #8]
 800146a:	4019      	ands	r1, r3
 800146c:	2920      	cmp	r1, #32
 800146e:	d021      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001470:	6890      	ldr	r0, [r2, #8]
 8001472:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8001474:	3818      	subs	r0, #24
 8001476:	1e43      	subs	r3, r0, #1
 8001478:	4198      	sbcs	r0, r3
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x84>)
 800147c:	4240      	negs	r0, r0
 800147e:	4018      	ands	r0, r3
 8001480:	23fa      	movs	r3, #250	@ 0xfa
 8001482:	01db      	lsls	r3, r3, #7
 8001484:	469c      	mov	ip, r3
 8001486:	4460      	add	r0, ip
 8001488:	e7e5      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 800148a:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x80>)
 800148c:	e7e3      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800148e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001490:	68d1      	ldr	r1, [r2, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001492:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x80>)
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001494:	0649      	lsls	r1, r1, #25
 8001496:	0f49      	lsrs	r1, r1, #29
 8001498:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800149a:	68d4      	ldr	r4, [r2, #12]
 800149c:	f7fe fe30 	bl	8000100 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x7c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014a2:	0464      	lsls	r4, r4, #17
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014a4:	68d9      	ldr	r1, [r3, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014a6:	0e64      	lsrs	r4, r4, #25
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014a8:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014aa:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014ac:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80014ae:	f7fe fe27 	bl	8000100 <__udivsi3>
  return sysclockfreq;
 80014b2:	e7d0      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80014b4:	2080      	movs	r0, #128	@ 0x80
 80014b6:	0200      	lsls	r0, r0, #8
 80014b8:	e7cd      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x16>
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	40021000 	.word	0x40021000
 80014c0:	00f42400 	.word	0x00f42400
 80014c4:	ffff8300 	.word	0xffff8300

080014c8 <HAL_RCC_ClockConfig>:
{
 80014c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ca:	46ce      	mov	lr, r9
 80014cc:	4647      	mov	r7, r8
 80014ce:	0005      	movs	r5, r0
 80014d0:	000c      	movs	r4, r1
 80014d2:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d026      	beq.n	8001526 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	2207      	movs	r2, #7
 80014da:	4e57      	ldr	r6, [pc, #348]	@ (8001638 <HAL_RCC_ClockConfig+0x170>)
 80014dc:	6833      	ldr	r3, [r6, #0]
 80014de:	4013      	ands	r3, r2
 80014e0:	428b      	cmp	r3, r1
 80014e2:	d35e      	bcc.n	80015a2 <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	079a      	lsls	r2, r3, #30
 80014e8:	d50e      	bpl.n	8001508 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ea:	075a      	lsls	r2, r3, #29
 80014ec:	d505      	bpl.n	80014fa <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014ee:	22e0      	movs	r2, #224	@ 0xe0
 80014f0:	4952      	ldr	r1, [pc, #328]	@ (800163c <HAL_RCC_ClockConfig+0x174>)
 80014f2:	01d2      	lsls	r2, r2, #7
 80014f4:	6888      	ldr	r0, [r1, #8]
 80014f6:	4302      	orrs	r2, r0
 80014f8:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014fa:	4950      	ldr	r1, [pc, #320]	@ (800163c <HAL_RCC_ClockConfig+0x174>)
 80014fc:	4850      	ldr	r0, [pc, #320]	@ (8001640 <HAL_RCC_ClockConfig+0x178>)
 80014fe:	688a      	ldr	r2, [r1, #8]
 8001500:	4002      	ands	r2, r0
 8001502:	68a8      	ldr	r0, [r5, #8]
 8001504:	4302      	orrs	r2, r0
 8001506:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001508:	07db      	lsls	r3, r3, #31
 800150a:	d52b      	bpl.n	8001564 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150c:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150e:	4a4b      	ldr	r2, [pc, #300]	@ (800163c <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001510:	2b01      	cmp	r3, #1
 8001512:	d100      	bne.n	8001516 <HAL_RCC_ClockConfig+0x4e>
 8001514:	e07c      	b.n	8001610 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001516:	2b02      	cmp	r3, #2
 8001518:	d007      	beq.n	800152a <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800151a:	2b00      	cmp	r3, #0
 800151c:	d000      	beq.n	8001520 <HAL_RCC_ClockConfig+0x58>
 800151e:	e07d      	b.n	800161c <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	0552      	lsls	r2, r2, #21
 8001524:	d404      	bmi.n	8001530 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	e037      	b.n	800159a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	0192      	lsls	r2, r2, #6
 800152e:	d5fa      	bpl.n	8001526 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001530:	2107      	movs	r1, #7
 8001532:	4e42      	ldr	r6, [pc, #264]	@ (800163c <HAL_RCC_ClockConfig+0x174>)
 8001534:	68b2      	ldr	r2, [r6, #8]
 8001536:	438a      	bics	r2, r1
 8001538:	4313      	orrs	r3, r2
 800153a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800153c:	f7ff fbaa 	bl	8000c94 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001540:	2338      	movs	r3, #56	@ 0x38
 8001542:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001544:	4b3f      	ldr	r3, [pc, #252]	@ (8001644 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8001546:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e004      	b.n	8001556 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fba2 	bl	8000c94 <HAL_GetTick>
 8001550:	1bc0      	subs	r0, r0, r7
 8001552:	4548      	cmp	r0, r9
 8001554:	d83b      	bhi.n	80015ce <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001556:	4643      	mov	r3, r8
 8001558:	68b2      	ldr	r2, [r6, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	686b      	ldr	r3, [r5, #4]
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	429a      	cmp	r2, r3
 8001562:	d1f3      	bne.n	800154c <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001564:	2207      	movs	r2, #7
 8001566:	4e34      	ldr	r6, [pc, #208]	@ (8001638 <HAL_RCC_ClockConfig+0x170>)
 8001568:	6833      	ldr	r3, [r6, #0]
 800156a:	4013      	ands	r3, r2
 800156c:	42a3      	cmp	r3, r4
 800156e:	d838      	bhi.n	80015e2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001570:	682b      	ldr	r3, [r5, #0]
 8001572:	075b      	lsls	r3, r3, #29
 8001574:	d42d      	bmi.n	80015d2 <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001576:	f7ff ff63 	bl	8001440 <HAL_RCC_GetSysClockFreq>
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <HAL_RCC_ClockConfig+0x174>)
 800157c:	4a32      	ldr	r2, [pc, #200]	@ (8001648 <HAL_RCC_ClockConfig+0x180>)
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	4932      	ldr	r1, [pc, #200]	@ (800164c <HAL_RCC_ClockConfig+0x184>)
 8001582:	051b      	lsls	r3, r3, #20
 8001584:	0f1b      	lsrs	r3, r3, #28
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	589b      	ldr	r3, [r3, r2]
 800158a:	221f      	movs	r2, #31
 800158c:	4013      	ands	r3, r2
 800158e:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8001590:	4b2f      	ldr	r3, [pc, #188]	@ (8001650 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001592:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f7ff fb37 	bl	8000c08 <HAL_InitTick>
}
 800159a:	bcc0      	pop	{r6, r7}
 800159c:	46b9      	mov	r9, r7
 800159e:	46b0      	mov	r8, r6
 80015a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	6833      	ldr	r3, [r6, #0]
 80015a4:	4393      	bics	r3, r2
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80015aa:	f7ff fb73 	bl	8000c94 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ae:	2307      	movs	r3, #7
 80015b0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b2:	4b24      	ldr	r3, [pc, #144]	@ (8001644 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80015b4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015b8:	4642      	mov	r2, r8
 80015ba:	6833      	ldr	r3, [r6, #0]
 80015bc:	4013      	ands	r3, r2
 80015be:	42a3      	cmp	r3, r4
 80015c0:	d100      	bne.n	80015c4 <HAL_RCC_ClockConfig+0xfc>
 80015c2:	e78f      	b.n	80014e4 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c4:	f7ff fb66 	bl	8000c94 <HAL_GetTick>
 80015c8:	1bc0      	subs	r0, r0, r7
 80015ca:	4548      	cmp	r0, r9
 80015cc:	d9f4      	bls.n	80015b8 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 80015ce:	2003      	movs	r0, #3
 80015d0:	e7e3      	b.n	800159a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015d2:	4a1a      	ldr	r2, [pc, #104]	@ (800163c <HAL_RCC_ClockConfig+0x174>)
 80015d4:	491f      	ldr	r1, [pc, #124]	@ (8001654 <HAL_RCC_ClockConfig+0x18c>)
 80015d6:	6893      	ldr	r3, [r2, #8]
 80015d8:	400b      	ands	r3, r1
 80015da:	68e9      	ldr	r1, [r5, #12]
 80015dc:	430b      	orrs	r3, r1
 80015de:	6093      	str	r3, [r2, #8]
 80015e0:	e7c9      	b.n	8001576 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e2:	6833      	ldr	r3, [r6, #0]
 80015e4:	4393      	bics	r3, r2
 80015e6:	4323      	orrs	r3, r4
 80015e8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80015ea:	f7ff fb53 	bl	8000c94 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ee:	2307      	movs	r3, #7
 80015f0:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80015f4:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f6:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015f8:	4642      	mov	r2, r8
 80015fa:	6833      	ldr	r3, [r6, #0]
 80015fc:	4013      	ands	r3, r2
 80015fe:	42a3      	cmp	r3, r4
 8001600:	d0b6      	beq.n	8001570 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	f7ff fb47 	bl	8000c94 <HAL_GetTick>
 8001606:	1bc0      	subs	r0, r0, r7
 8001608:	4548      	cmp	r0, r9
 800160a:	d9f5      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 800160c:	2003      	movs	r0, #3
 800160e:	e7c4      	b.n	800159a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	0392      	lsls	r2, r2, #14
 8001614:	d500      	bpl.n	8001618 <HAL_RCC_ClockConfig+0x150>
 8001616:	e78b      	b.n	8001530 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001618:	2001      	movs	r0, #1
 800161a:	e7be      	b.n	800159a <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800161c:	2b03      	cmp	r3, #3
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001620:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001622:	0792      	lsls	r2, r2, #30
 8001624:	d500      	bpl.n	8001628 <HAL_RCC_ClockConfig+0x160>
 8001626:	e783      	b.n	8001530 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001628:	2001      	movs	r0, #1
 800162a:	e7b6      	b.n	800159a <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800162c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 800162e:	0792      	lsls	r2, r2, #30
 8001630:	d500      	bpl.n	8001634 <HAL_RCC_ClockConfig+0x16c>
 8001632:	e77d      	b.n	8001530 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
 8001636:	e7b0      	b.n	800159a <HAL_RCC_ClockConfig+0xd2>
 8001638:	40022000 	.word	0x40022000
 800163c:	40021000 	.word	0x40021000
 8001640:	fffff0ff 	.word	0xfffff0ff
 8001644:	00001388 	.word	0x00001388
 8001648:	0800254c 	.word	0x0800254c
 800164c:	20000000 	.word	0x20000000
 8001650:	20000008 	.word	0x20000008
 8001654:	ffff8fff 	.word	0xffff8fff

08001658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800165c:	d063      	beq.n	8001726 <HAL_TIM_Base_Init+0xce>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800165e:	233d      	movs	r3, #61	@ 0x3d
 8001660:	5cc3      	ldrb	r3, [r0, r3]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d050      	beq.n	800170a <HAL_TIM_Base_Init+0xb2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001668:	233d      	movs	r3, #61	@ 0x3d
 800166a:	2202      	movs	r2, #2
 800166c:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800166e:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001670:	4e33      	ldr	r6, [pc, #204]	@ (8001740 <HAL_TIM_Base_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 8001672:	681a      	ldr	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001674:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001676:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001678:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800167a:	42b3      	cmp	r3, r6
 800167c:	d012      	beq.n	80016a4 <HAL_TIM_Base_Init+0x4c>
 800167e:	4e31      	ldr	r6, [pc, #196]	@ (8001744 <HAL_TIM_Base_Init+0xec>)
 8001680:	42b3      	cmp	r3, r6
 8001682:	d047      	beq.n	8001714 <HAL_TIM_Base_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001684:	4e30      	ldr	r6, [pc, #192]	@ (8001748 <HAL_TIM_Base_Init+0xf0>)
 8001686:	42b3      	cmp	r3, r6
 8001688:	d048      	beq.n	800171c <HAL_TIM_Base_Init+0xc4>
 800168a:	4e30      	ldr	r6, [pc, #192]	@ (800174c <HAL_TIM_Base_Init+0xf4>)
 800168c:	42b3      	cmp	r3, r6
 800168e:	d00d      	beq.n	80016ac <HAL_TIM_Base_Init+0x54>
 8001690:	4e2f      	ldr	r6, [pc, #188]	@ (8001750 <HAL_TIM_Base_Init+0xf8>)
 8001692:	42b3      	cmp	r3, r6
 8001694:	d049      	beq.n	800172a <HAL_TIM_Base_Init+0xd2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001696:	2680      	movs	r6, #128	@ 0x80
 8001698:	43b2      	bics	r2, r6
 800169a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800169c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800169e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016a0:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016a2:	e00f      	b.n	80016c4 <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016a4:	2670      	movs	r6, #112	@ 0x70
 80016a6:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80016a8:	68a6      	ldr	r6, [r4, #8]
 80016aa:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ac:	4e29      	ldr	r6, [pc, #164]	@ (8001754 <HAL_TIM_Base_Init+0xfc>)
 80016ae:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016b0:	6926      	ldr	r6, [r4, #16]
 80016b2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016b4:	2680      	movs	r6, #128	@ 0x80
 80016b6:	43b2      	bics	r2, r6
 80016b8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80016ba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016bc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016be:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80016c0:	6962      	ldr	r2, [r4, #20]
 80016c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80016c4:	2201      	movs	r2, #1
 80016c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80016c8:	6919      	ldr	r1, [r3, #16]
 80016ca:	420a      	tst	r2, r1
 80016cc:	d002      	beq.n	80016d4 <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80016ce:	6919      	ldr	r1, [r3, #16]
 80016d0:	4391      	bics	r1, r2
 80016d2:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016d4:	2301      	movs	r3, #1
 80016d6:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80016d8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016da:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016dc:	3a0a      	subs	r2, #10
 80016de:	54a3      	strb	r3, [r4, r2]
 80016e0:	3201      	adds	r2, #1
 80016e2:	54a3      	strb	r3, [r4, r2]
 80016e4:	3201      	adds	r2, #1
 80016e6:	54a3      	strb	r3, [r4, r2]
 80016e8:	3201      	adds	r2, #1
 80016ea:	54a3      	strb	r3, [r4, r2]
 80016ec:	3201      	adds	r2, #1
 80016ee:	54a3      	strb	r3, [r4, r2]
 80016f0:	3201      	adds	r2, #1
 80016f2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f4:	3201      	adds	r2, #1
 80016f6:	54a3      	strb	r3, [r4, r2]
 80016f8:	3201      	adds	r2, #1
 80016fa:	54a3      	strb	r3, [r4, r2]
 80016fc:	3201      	adds	r2, #1
 80016fe:	54a3      	strb	r3, [r4, r2]
 8001700:	3201      	adds	r2, #1
 8001702:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001704:	3a0a      	subs	r2, #10
 8001706:	54a3      	strb	r3, [r4, r2]
}
 8001708:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800170a:	333c      	adds	r3, #60	@ 0x3c
 800170c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 800170e:	f7ff f98f 	bl	8000a30 <HAL_TIM_Base_MspInit>
 8001712:	e7a9      	b.n	8001668 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001714:	2670      	movs	r6, #112	@ 0x70
 8001716:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8001718:	68a6      	ldr	r6, [r4, #8]
 800171a:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800171c:	4e0d      	ldr	r6, [pc, #52]	@ (8001754 <HAL_TIM_Base_Init+0xfc>)
 800171e:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001720:	6926      	ldr	r6, [r4, #16]
 8001722:	4332      	orrs	r2, r6
 8001724:	e7b7      	b.n	8001696 <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 8001726:	2001      	movs	r0, #1
 8001728:	e7ee      	b.n	8001708 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 800172a:	4e0a      	ldr	r6, [pc, #40]	@ (8001754 <HAL_TIM_Base_Init+0xfc>)
 800172c:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800172e:	6926      	ldr	r6, [r4, #16]
 8001730:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001732:	2680      	movs	r6, #128	@ 0x80
 8001734:	43b2      	bics	r2, r6
 8001736:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8001738:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800173a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800173c:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800173e:	e7bf      	b.n	80016c0 <HAL_TIM_Base_Init+0x68>
 8001740:	40012c00 	.word	0x40012c00
 8001744:	40000400 	.word	0x40000400
 8001748:	40002000 	.word	0x40002000
 800174c:	40014400 	.word	0x40014400
 8001750:	40014800 	.word	0x40014800
 8001754:	fffffcff 	.word	0xfffffcff

08001758 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001758:	213d      	movs	r1, #61	@ 0x3d
{
 800175a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 800175c:	5c42      	ldrb	r2, [r0, r1]
{
 800175e:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8001760:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8001762:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001764:	2a01      	cmp	r2, #1
 8001766:	d10c      	bne.n	8001782 <HAL_TIM_Base_Start+0x2a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001768:	3201      	adds	r2, #1
 800176a:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <HAL_TIM_Base_Start+0x48>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d007      	beq.n	8001784 <HAL_TIM_Base_Start+0x2c>
 8001774:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <HAL_TIM_Base_Start+0x4c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d004      	beq.n	8001784 <HAL_TIM_Base_Start+0x2c>
    __HAL_TIM_ENABLE(htim);
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4322      	orrs	r2, r4
 800177e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001780:	2000      	movs	r0, #0
}
 8001782:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <HAL_TIM_Base_Start+0x50>)
 8001788:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800178a:	2a06      	cmp	r2, #6
 800178c:	d0f8      	beq.n	8001780 <HAL_TIM_Base_Start+0x28>
 800178e:	3907      	subs	r1, #7
 8001790:	428a      	cmp	r2, r1
 8001792:	d0f5      	beq.n	8001780 <HAL_TIM_Base_Start+0x28>
      __HAL_TIM_ENABLE(htim);
 8001794:	2101      	movs	r1, #1
 8001796:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001798:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e7f0      	b.n	8001782 <HAL_TIM_Base_Start+0x2a>
 80017a0:	40012c00 	.word	0x40012c00
 80017a4:	40000400 	.word	0x40000400
 80017a8:	00010007 	.word	0x00010007

080017ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80017ac:	213d      	movs	r1, #61	@ 0x3d
{
 80017ae:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80017b0:	5c42      	ldrb	r2, [r0, r1]
{
 80017b2:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80017b4:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80017b6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80017b8:	2a01      	cmp	r2, #1
 80017ba:	d10f      	bne.n	80017dc <HAL_TIM_Base_Start_IT+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 80017bc:	3201      	adds	r2, #1
 80017be:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	4322      	orrs	r2, r4
 80017c6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017c8:	4a0c      	ldr	r2, [pc, #48]	@ (80017fc <HAL_TIM_Base_Start_IT+0x50>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x32>
 80017ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001800 <HAL_TIM_Base_Start_IT+0x54>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d004      	beq.n	80017de <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4322      	orrs	r2, r4
 80017d8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
}
 80017dc:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4908      	ldr	r1, [pc, #32]	@ (8001804 <HAL_TIM_Base_Start_IT+0x58>)
 80017e2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017e4:	2a06      	cmp	r2, #6
 80017e6:	d0f8      	beq.n	80017da <HAL_TIM_Base_Start_IT+0x2e>
 80017e8:	3907      	subs	r1, #7
 80017ea:	428a      	cmp	r2, r1
 80017ec:	d0f5      	beq.n	80017da <HAL_TIM_Base_Start_IT+0x2e>
      __HAL_TIM_ENABLE(htim);
 80017ee:	2101      	movs	r1, #1
 80017f0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80017f2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e7f0      	b.n	80017dc <HAL_TIM_Base_Start_IT+0x30>
 80017fa:	46c0      	nop			@ (mov r8, r8)
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40000400 	.word	0x40000400
 8001804:	00010007 	.word	0x00010007

08001808 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8001808:	4770      	bx	lr
 800180a:	46c0      	nop			@ (mov r8, r8)

0800180c <HAL_TIM_PWM_Init>:
{
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001810:	d063      	beq.n	80018da <HAL_TIM_PWM_Init+0xce>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001812:	233d      	movs	r3, #61	@ 0x3d
 8001814:	5cc3      	ldrb	r3, [r0, r3]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d050      	beq.n	80018be <HAL_TIM_PWM_Init+0xb2>
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	233d      	movs	r3, #61	@ 0x3d
 800181e:	2202      	movs	r2, #2
 8001820:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001822:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001824:	4e33      	ldr	r6, [pc, #204]	@ (80018f4 <HAL_TIM_PWM_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 8001826:	681a      	ldr	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8001828:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800182a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800182c:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800182e:	42b3      	cmp	r3, r6
 8001830:	d012      	beq.n	8001858 <HAL_TIM_PWM_Init+0x4c>
 8001832:	4e31      	ldr	r6, [pc, #196]	@ (80018f8 <HAL_TIM_PWM_Init+0xec>)
 8001834:	42b3      	cmp	r3, r6
 8001836:	d047      	beq.n	80018c8 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001838:	4e30      	ldr	r6, [pc, #192]	@ (80018fc <HAL_TIM_PWM_Init+0xf0>)
 800183a:	42b3      	cmp	r3, r6
 800183c:	d048      	beq.n	80018d0 <HAL_TIM_PWM_Init+0xc4>
 800183e:	4e30      	ldr	r6, [pc, #192]	@ (8001900 <HAL_TIM_PWM_Init+0xf4>)
 8001840:	42b3      	cmp	r3, r6
 8001842:	d00d      	beq.n	8001860 <HAL_TIM_PWM_Init+0x54>
 8001844:	4e2f      	ldr	r6, [pc, #188]	@ (8001904 <HAL_TIM_PWM_Init+0xf8>)
 8001846:	42b3      	cmp	r3, r6
 8001848:	d049      	beq.n	80018de <HAL_TIM_PWM_Init+0xd2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800184a:	2680      	movs	r6, #128	@ 0x80
 800184c:	43b2      	bics	r2, r6
 800184e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001850:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001852:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001854:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001856:	e00f      	b.n	8001878 <HAL_TIM_PWM_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001858:	2670      	movs	r6, #112	@ 0x70
 800185a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800185c:	68a6      	ldr	r6, [r4, #8]
 800185e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001860:	4e29      	ldr	r6, [pc, #164]	@ (8001908 <HAL_TIM_PWM_Init+0xfc>)
 8001862:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001864:	6926      	ldr	r6, [r4, #16]
 8001866:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001868:	2680      	movs	r6, #128	@ 0x80
 800186a:	43b2      	bics	r2, r6
 800186c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800186e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001870:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001872:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001874:	6962      	ldr	r2, [r4, #20]
 8001876:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001878:	2201      	movs	r2, #1
 800187a:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800187c:	6919      	ldr	r1, [r3, #16]
 800187e:	420a      	tst	r2, r1
 8001880:	d002      	beq.n	8001888 <HAL_TIM_PWM_Init+0x7c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001882:	6919      	ldr	r1, [r3, #16]
 8001884:	4391      	bics	r1, r2
 8001886:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001888:	2301      	movs	r3, #1
 800188a:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800188c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800188e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001890:	3a0a      	subs	r2, #10
 8001892:	54a3      	strb	r3, [r4, r2]
 8001894:	3201      	adds	r2, #1
 8001896:	54a3      	strb	r3, [r4, r2]
 8001898:	3201      	adds	r2, #1
 800189a:	54a3      	strb	r3, [r4, r2]
 800189c:	3201      	adds	r2, #1
 800189e:	54a3      	strb	r3, [r4, r2]
 80018a0:	3201      	adds	r2, #1
 80018a2:	54a3      	strb	r3, [r4, r2]
 80018a4:	3201      	adds	r2, #1
 80018a6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a8:	3201      	adds	r2, #1
 80018aa:	54a3      	strb	r3, [r4, r2]
 80018ac:	3201      	adds	r2, #1
 80018ae:	54a3      	strb	r3, [r4, r2]
 80018b0:	3201      	adds	r2, #1
 80018b2:	54a3      	strb	r3, [r4, r2]
 80018b4:	3201      	adds	r2, #1
 80018b6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80018b8:	3a0a      	subs	r2, #10
 80018ba:	54a3      	strb	r3, [r4, r2]
}
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80018be:	333c      	adds	r3, #60	@ 0x3c
 80018c0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80018c2:	f7ff ffa1 	bl	8001808 <HAL_TIM_PWM_MspInit>
 80018c6:	e7a9      	b.n	800181c <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018c8:	2670      	movs	r6, #112	@ 0x70
 80018ca:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80018cc:	68a6      	ldr	r6, [r4, #8]
 80018ce:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80018d0:	4e0d      	ldr	r6, [pc, #52]	@ (8001908 <HAL_TIM_PWM_Init+0xfc>)
 80018d2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018d4:	6926      	ldr	r6, [r4, #16]
 80018d6:	4332      	orrs	r2, r6
 80018d8:	e7b7      	b.n	800184a <HAL_TIM_PWM_Init+0x3e>
    return HAL_ERROR;
 80018da:	2001      	movs	r0, #1
 80018dc:	e7ee      	b.n	80018bc <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 80018de:	4e0a      	ldr	r6, [pc, #40]	@ (8001908 <HAL_TIM_PWM_Init+0xfc>)
 80018e0:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018e2:	6926      	ldr	r6, [r4, #16]
 80018e4:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018e6:	2680      	movs	r6, #128	@ 0x80
 80018e8:	43b2      	bics	r2, r6
 80018ea:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 80018ec:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018ee:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018f0:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018f2:	e7bf      	b.n	8001874 <HAL_TIM_PWM_Init+0x68>
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40000400 	.word	0x40000400
 80018fc:	40002000 	.word	0x40002000
 8001900:	40014400 	.word	0x40014400
 8001904:	40014800 	.word	0x40014800
 8001908:	fffffcff 	.word	0xfffffcff

0800190c <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 800190c:	2910      	cmp	r1, #16
 800190e:	d803      	bhi.n	8001918 <HAL_TIM_PWM_Start+0xc>
 8001910:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <HAL_TIM_PWM_Start+0xb0>)
 8001912:	008b      	lsls	r3, r1, #2
 8001914:	58d3      	ldr	r3, [r2, r3]
 8001916:	469f      	mov	pc, r3
 8001918:	2343      	movs	r3, #67	@ 0x43
 800191a:	5cc2      	ldrb	r2, [r0, r3]
 800191c:	2a01      	cmp	r2, #1
 800191e:	d12a      	bne.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 8001920:	2202      	movs	r2, #2
 8001922:	54c2      	strb	r2, [r0, r3]
 8001924:	221f      	movs	r2, #31
 8001926:	4011      	ands	r1, r2
 8001928:	3a1e      	subs	r2, #30
 800192a:	408a      	lsls	r2, r1
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	6a19      	ldr	r1, [r3, #32]
 8001930:	4391      	bics	r1, r2
 8001932:	6219      	str	r1, [r3, #32]
 8001934:	6a19      	ldr	r1, [r3, #32]
 8001936:	430a      	orrs	r2, r1
 8001938:	621a      	str	r2, [r3, #32]
 800193a:	4a21      	ldr	r2, [pc, #132]	@ (80019c0 <HAL_TIM_PWM_Start+0xb4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d036      	beq.n	80019ae <HAL_TIM_PWM_Start+0xa2>
 8001940:	4a20      	ldr	r2, [pc, #128]	@ (80019c4 <HAL_TIM_PWM_Start+0xb8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d02d      	beq.n	80019a2 <HAL_TIM_PWM_Start+0x96>
 8001946:	4a20      	ldr	r2, [pc, #128]	@ (80019c8 <HAL_TIM_PWM_Start+0xbc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02a      	beq.n	80019a2 <HAL_TIM_PWM_Start+0x96>
 800194c:	4a1f      	ldr	r2, [pc, #124]	@ (80019cc <HAL_TIM_PWM_Start+0xc0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d107      	bne.n	8001962 <HAL_TIM_PWM_Start+0x56>
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	491e      	ldr	r1, [pc, #120]	@ (80019d0 <HAL_TIM_PWM_Start+0xc4>)
 8001956:	400a      	ands	r2, r1
 8001958:	2a06      	cmp	r2, #6
 800195a:	d006      	beq.n	800196a <HAL_TIM_PWM_Start+0x5e>
 800195c:	3907      	subs	r1, #7
 800195e:	428a      	cmp	r2, r1
 8001960:	d003      	beq.n	800196a <HAL_TIM_PWM_Start+0x5e>
 8001962:	2101      	movs	r1, #1
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	2000      	movs	r0, #0
 800196c:	4770      	bx	lr
 800196e:	233e      	movs	r3, #62	@ 0x3e
 8001970:	5cc2      	ldrb	r2, [r0, r3]
 8001972:	2a01      	cmp	r2, #1
 8001974:	d0d4      	beq.n	8001920 <HAL_TIM_PWM_Start+0x14>
 8001976:	2001      	movs	r0, #1
 8001978:	e7f8      	b.n	800196c <HAL_TIM_PWM_Start+0x60>
 800197a:	233f      	movs	r3, #63	@ 0x3f
 800197c:	5cc2      	ldrb	r2, [r0, r3]
 800197e:	2a01      	cmp	r2, #1
 8001980:	d0ce      	beq.n	8001920 <HAL_TIM_PWM_Start+0x14>
 8001982:	e7f8      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 8001984:	2340      	movs	r3, #64	@ 0x40
 8001986:	5cc2      	ldrb	r2, [r0, r3]
 8001988:	2a01      	cmp	r2, #1
 800198a:	d0c9      	beq.n	8001920 <HAL_TIM_PWM_Start+0x14>
 800198c:	e7f3      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 800198e:	2341      	movs	r3, #65	@ 0x41
 8001990:	5cc2      	ldrb	r2, [r0, r3]
 8001992:	2a01      	cmp	r2, #1
 8001994:	d0c4      	beq.n	8001920 <HAL_TIM_PWM_Start+0x14>
 8001996:	e7ee      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 8001998:	2342      	movs	r3, #66	@ 0x42
 800199a:	5cc2      	ldrb	r2, [r0, r3]
 800199c:	2a01      	cmp	r2, #1
 800199e:	d0bf      	beq.n	8001920 <HAL_TIM_PWM_Start+0x14>
 80019a0:	e7e9      	b.n	8001976 <HAL_TIM_PWM_Start+0x6a>
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019a6:	0212      	lsls	r2, r2, #8
 80019a8:	430a      	orrs	r2, r1
 80019aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80019ac:	e7d9      	b.n	8001962 <HAL_TIM_PWM_Start+0x56>
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019b2:	0212      	lsls	r2, r2, #8
 80019b4:	430a      	orrs	r2, r1
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
 80019b8:	e7cb      	b.n	8001952 <HAL_TIM_PWM_Start+0x46>
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	0800258c 	.word	0x0800258c
 80019c0:	40012c00 	.word	0x40012c00
 80019c4:	40014400 	.word	0x40014400
 80019c8:	40014800 	.word	0x40014800
 80019cc:	40000400 	.word	0x40000400
 80019d0:	00010007 	.word	0x00010007

080019d4 <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 80019d4:	b530      	push	{r4, r5, lr}
 80019d6:	251f      	movs	r5, #31
 80019d8:	2401      	movs	r4, #1
 80019da:	400d      	ands	r5, r1
 80019dc:	40ac      	lsls	r4, r5
 80019de:	6803      	ldr	r3, [r0, #0]
 80019e0:	6a1a      	ldr	r2, [r3, #32]
 80019e2:	43a2      	bics	r2, r4
 80019e4:	621a      	str	r2, [r3, #32]
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	621a      	str	r2, [r3, #32]
 80019ea:	4a23      	ldr	r2, [pc, #140]	@ (8001a78 <HAL_TIM_PWM_Stop+0xa4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d014      	beq.n	8001a1a <HAL_TIM_PWM_Stop+0x46>
 80019f0:	4a22      	ldr	r2, [pc, #136]	@ (8001a7c <HAL_TIM_PWM_Stop+0xa8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d011      	beq.n	8001a1a <HAL_TIM_PWM_Stop+0x46>
 80019f6:	4a22      	ldr	r2, [pc, #136]	@ (8001a80 <HAL_TIM_PWM_Stop+0xac>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00e      	beq.n	8001a1a <HAL_TIM_PWM_Stop+0x46>
 80019fc:	6a1c      	ldr	r4, [r3, #32]
 80019fe:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <HAL_TIM_PWM_Stop+0xb0>)
 8001a00:	4214      	tst	r4, r2
 8001a02:	d103      	bne.n	8001a0c <HAL_TIM_PWM_Stop+0x38>
 8001a04:	6a1c      	ldr	r4, [r3, #32]
 8001a06:	4a20      	ldr	r2, [pc, #128]	@ (8001a88 <HAL_TIM_PWM_Stop+0xb4>)
 8001a08:	4214      	tst	r4, r2
 8001a0a:	d01f      	beq.n	8001a4c <HAL_TIM_PWM_Stop+0x78>
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	d111      	bne.n	8001a34 <HAL_TIM_PWM_Stop+0x60>
 8001a10:	233e      	movs	r3, #62	@ 0x3e
 8001a12:	2201      	movs	r2, #1
 8001a14:	54c2      	strb	r2, [r0, r3]
 8001a16:	2000      	movs	r0, #0
 8001a18:	bd30      	pop	{r4, r5, pc}
 8001a1a:	6a1c      	ldr	r4, [r3, #32]
 8001a1c:	4a19      	ldr	r2, [pc, #100]	@ (8001a84 <HAL_TIM_PWM_Stop+0xb0>)
 8001a1e:	4214      	tst	r4, r2
 8001a20:	d1ec      	bne.n	80019fc <HAL_TIM_PWM_Stop+0x28>
 8001a22:	6a1c      	ldr	r4, [r3, #32]
 8001a24:	4a18      	ldr	r2, [pc, #96]	@ (8001a88 <HAL_TIM_PWM_Stop+0xb4>)
 8001a26:	4214      	tst	r4, r2
 8001a28:	d1e8      	bne.n	80019fc <HAL_TIM_PWM_Stop+0x28>
 8001a2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a2c:	4c17      	ldr	r4, [pc, #92]	@ (8001a8c <HAL_TIM_PWM_Stop+0xb8>)
 8001a2e:	4022      	ands	r2, r4
 8001a30:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a32:	e7e3      	b.n	80019fc <HAL_TIM_PWM_Stop+0x28>
 8001a34:	2904      	cmp	r1, #4
 8001a36:	d00e      	beq.n	8001a56 <HAL_TIM_PWM_Stop+0x82>
 8001a38:	2908      	cmp	r1, #8
 8001a3a:	d014      	beq.n	8001a66 <HAL_TIM_PWM_Stop+0x92>
 8001a3c:	290c      	cmp	r1, #12
 8001a3e:	d00e      	beq.n	8001a5e <HAL_TIM_PWM_Stop+0x8a>
 8001a40:	2910      	cmp	r1, #16
 8001a42:	d014      	beq.n	8001a6e <HAL_TIM_PWM_Stop+0x9a>
 8001a44:	2343      	movs	r3, #67	@ 0x43
 8001a46:	2201      	movs	r2, #1
 8001a48:	54c2      	strb	r2, [r0, r3]
 8001a4a:	e7e4      	b.n	8001a16 <HAL_TIM_PWM_Stop+0x42>
 8001a4c:	2401      	movs	r4, #1
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	43a2      	bics	r2, r4
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e7da      	b.n	8001a0c <HAL_TIM_PWM_Stop+0x38>
 8001a56:	233f      	movs	r3, #63	@ 0x3f
 8001a58:	2201      	movs	r2, #1
 8001a5a:	54c2      	strb	r2, [r0, r3]
 8001a5c:	e7db      	b.n	8001a16 <HAL_TIM_PWM_Stop+0x42>
 8001a5e:	2341      	movs	r3, #65	@ 0x41
 8001a60:	2201      	movs	r2, #1
 8001a62:	54c2      	strb	r2, [r0, r3]
 8001a64:	e7d7      	b.n	8001a16 <HAL_TIM_PWM_Stop+0x42>
 8001a66:	2340      	movs	r3, #64	@ 0x40
 8001a68:	2201      	movs	r2, #1
 8001a6a:	54c2      	strb	r2, [r0, r3]
 8001a6c:	e7d3      	b.n	8001a16 <HAL_TIM_PWM_Stop+0x42>
 8001a6e:	2342      	movs	r3, #66	@ 0x42
 8001a70:	2201      	movs	r2, #1
 8001a72:	54c2      	strb	r2, [r0, r3]
 8001a74:	e7cf      	b.n	8001a16 <HAL_TIM_PWM_Stop+0x42>
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40014400 	.word	0x40014400
 8001a80:	40014800 	.word	0x40014800
 8001a84:	00001111 	.word	0x00001111
 8001a88:	00000444 	.word	0x00000444
 8001a8c:	ffff7fff 	.word	0xffff7fff

08001a90 <HAL_TIM_PWM_ConfigChannel>:
{
 8001a90:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001a92:	203c      	movs	r0, #60	@ 0x3c
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001a96:	5c1c      	ldrb	r4, [r3, r0]
 8001a98:	2c01      	cmp	r4, #1
 8001a9a:	d100      	bne.n	8001a9e <HAL_TIM_PWM_ConfigChannel+0xe>
 8001a9c:	e16b      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8001a9e:	2401      	movs	r4, #1
 8001aa0:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8001aa2:	2a14      	cmp	r2, #20
 8001aa4:	d803      	bhi.n	8001aae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001aa6:	48b5      	ldr	r0, [pc, #724]	@ (8001d7c <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	5882      	ldr	r2, [r0, r2]
 8001aac:	4697      	mov	pc, r2
 8001aae:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001ab0:	223c      	movs	r2, #60	@ 0x3c
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	5499      	strb	r1, [r3, r2]
}
 8001ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001ab8:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001aba:	4db1      	ldr	r5, [pc, #708]	@ (8001d80 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 8001abc:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001abe:	6a10      	ldr	r0, [r2, #32]
 8001ac0:	4028      	ands	r0, r5
 8001ac2:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001ac4:	4daf      	ldr	r5, [pc, #700]	@ (8001d84 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 8001ac6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001ac8:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001aca:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001acc:	680d      	ldr	r5, [r1, #0]
 8001ace:	022d      	lsls	r5, r5, #8
 8001ad0:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001ad2:	48ad      	ldr	r0, [pc, #692]	@ (8001d88 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 8001ad4:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001ad6:	6888      	ldr	r0, [r1, #8]
 8001ad8:	0500      	lsls	r0, r0, #20
 8001ada:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001adc:	4cab      	ldr	r4, [pc, #684]	@ (8001d8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001ade:	42a2      	cmp	r2, r4
 8001ae0:	d100      	bne.n	8001ae4 <HAL_TIM_PWM_ConfigChannel+0x54>
 8001ae2:	e118      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x286>
 8001ae4:	4caa      	ldr	r4, [pc, #680]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001ae6:	42a2      	cmp	r2, r4
 8001ae8:	d100      	bne.n	8001aec <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001aea:	e114      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x286>
 8001aec:	4ca9      	ldr	r4, [pc, #676]	@ (8001d94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001aee:	42a2      	cmp	r2, r4
 8001af0:	d100      	bne.n	8001af4 <HAL_TIM_PWM_ConfigChannel+0x64>
 8001af2:	e110      	b.n	8001d16 <HAL_TIM_PWM_ConfigChannel+0x286>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001af4:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001af6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001af8:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001afa:	65d4      	str	r4, [r2, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001afc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001afe:	2080      	movs	r0, #128	@ 0x80
 8001b00:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001b02:	0100      	lsls	r0, r0, #4
 8001b04:	4320      	orrs	r0, r4
 8001b06:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b08:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001b0a:	4ca3      	ldr	r4, [pc, #652]	@ (8001d98 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b0c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b0e:	4020      	ands	r0, r4
 8001b10:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b12:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001b14:	0209      	lsls	r1, r1, #8
 8001b16:	4301      	orrs	r1, r0
 8001b18:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e7c8      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b1e:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b20:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b22:	4e9e      	ldr	r6, [pc, #632]	@ (8001d9c <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8001b24:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b26:	6a14      	ldr	r4, [r2, #32]
 8001b28:	43ac      	bics	r4, r5
 8001b2a:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001b2c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b2e:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b30:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001b32:	680e      	ldr	r6, [r1, #0]
 8001b34:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8001b36:	2602      	movs	r6, #2
 8001b38:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8001b3a:	688e      	ldr	r6, [r1, #8]
 8001b3c:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b3e:	4e93      	ldr	r6, [pc, #588]	@ (8001d8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001b40:	42b2      	cmp	r2, r6
 8001b42:	d100      	bne.n	8001b46 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001b44:	e0da      	b.n	8001cfc <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001b46:	4e92      	ldr	r6, [pc, #584]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001b48:	42b2      	cmp	r2, r6
 8001b4a:	d100      	bne.n	8001b4e <HAL_TIM_PWM_ConfigChannel+0xbe>
 8001b4c:	e0d6      	b.n	8001cfc <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001b4e:	4e91      	ldr	r6, [pc, #580]	@ (8001d94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001b50:	42b2      	cmp	r2, r6
 8001b52:	d100      	bne.n	8001b56 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001b54:	e0d2      	b.n	8001cfc <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8001b56:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b58:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001b5a:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b5c:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8001b5e:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b60:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001b62:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b64:	6990      	ldr	r0, [r2, #24]
 8001b66:	4320      	orrs	r0, r4
 8001b68:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b6a:	6990      	ldr	r0, [r2, #24]
 8001b6c:	3c04      	subs	r4, #4
 8001b6e:	43a0      	bics	r0, r4
 8001b70:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b72:	6990      	ldr	r0, [r2, #24]
 8001b74:	4301      	orrs	r1, r0
 8001b76:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e799      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b7c:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b7e:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8001b80:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001b82:	6a14      	ldr	r4, [r2, #32]
 8001b84:	43ac      	bics	r4, r5
 8001b86:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b88:	4d85      	ldr	r5, [pc, #532]	@ (8001da0 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001b8a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b8c:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001b8e:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b90:	680d      	ldr	r5, [r1, #0]
 8001b92:	022d      	lsls	r5, r5, #8
 8001b94:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001b96:	2420      	movs	r4, #32
 8001b98:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001b9a:	688c      	ldr	r4, [r1, #8]
 8001b9c:	0124      	lsls	r4, r4, #4
 8001b9e:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001ba0:	487a      	ldr	r0, [pc, #488]	@ (8001d8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001ba2:	4282      	cmp	r2, r0
 8001ba4:	d100      	bne.n	8001ba8 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001ba6:	e0c2      	b.n	8001d2e <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ba8:	4879      	ldr	r0, [pc, #484]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001baa:	4282      	cmp	r2, r0
 8001bac:	d100      	bne.n	8001bb0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001bae:	e0c5      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0x2ac>
 8001bb0:	4878      	ldr	r0, [pc, #480]	@ (8001d94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001bb2:	4282      	cmp	r2, r0
 8001bb4:	d100      	bne.n	8001bb8 <HAL_TIM_PWM_ConfigChannel+0x128>
 8001bb6:	e0c1      	b.n	8001d3c <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 8001bb8:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001bba:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001bbc:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001bbe:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bc0:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8001bc2:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001bc4:	6994      	ldr	r4, [r2, #24]
 8001bc6:	0100      	lsls	r0, r0, #4
 8001bc8:	4320      	orrs	r0, r4
 8001bca:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bcc:	6990      	ldr	r0, [r2, #24]
 8001bce:	4c72      	ldr	r4, [pc, #456]	@ (8001d98 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bd0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001bd2:	4020      	ands	r0, r4
 8001bd4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bd6:	6990      	ldr	r0, [r2, #24]
 8001bd8:	0209      	lsls	r1, r1, #8
 8001bda:	4301      	orrs	r1, r0
 8001bdc:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001bde:	2000      	movs	r0, #0
 8001be0:	e766      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001be2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001be4:	4d6f      	ldr	r5, [pc, #444]	@ (8001da4 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 8001be6:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001be8:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bea:	4e6c      	ldr	r6, [pc, #432]	@ (8001d9c <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001bec:	402c      	ands	r4, r5
 8001bee:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001bf0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001bf2:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001bf4:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001bf6:	680e      	ldr	r6, [r1, #0]
 8001bf8:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001bfa:	4c6b      	ldr	r4, [pc, #428]	@ (8001da8 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8001bfc:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001bfe:	688c      	ldr	r4, [r1, #8]
 8001c00:	0224      	lsls	r4, r4, #8
 8001c02:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c04:	4c61      	ldr	r4, [pc, #388]	@ (8001d8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d100      	bne.n	8001c0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c0a:	e0a5      	b.n	8001d58 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c0c:	4c60      	ldr	r4, [pc, #384]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001c0e:	42a2      	cmp	r2, r4
 8001c10:	d100      	bne.n	8001c14 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c12:	e0a8      	b.n	8001d66 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8001c14:	4c5f      	ldr	r4, [pc, #380]	@ (8001d94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001c16:	42a2      	cmp	r2, r4
 8001c18:	d100      	bne.n	8001c1c <HAL_TIM_PWM_ConfigChannel+0x18c>
 8001c1a:	e0a4      	b.n	8001d66 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 8001c1c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c1e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c20:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c22:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c24:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001c26:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c28:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c2a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c2c:	4320      	orrs	r0, r4
 8001c2e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c30:	69d0      	ldr	r0, [r2, #28]
 8001c32:	3c04      	subs	r4, #4
 8001c34:	43a0      	bics	r0, r4
 8001c36:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c38:	69d0      	ldr	r0, [r2, #28]
 8001c3a:	4301      	orrs	r1, r0
 8001c3c:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001c3e:	2000      	movs	r0, #0
 8001c40:	e736      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c42:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c44:	4d59      	ldr	r5, [pc, #356]	@ (8001dac <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8001c46:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c48:	6a10      	ldr	r0, [r2, #32]
 8001c4a:	4028      	ands	r0, r5
 8001c4c:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c4e:	4d54      	ldr	r5, [pc, #336]	@ (8001da0 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001c50:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c52:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c54:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c56:	680d      	ldr	r5, [r1, #0]
 8001c58:	022d      	lsls	r5, r5, #8
 8001c5a:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8001c5c:	4854      	ldr	r0, [pc, #336]	@ (8001db0 <HAL_TIM_PWM_ConfigChannel+0x320>)
 8001c5e:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001c60:	6888      	ldr	r0, [r1, #8]
 8001c62:	0300      	lsls	r0, r0, #12
 8001c64:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c66:	4c49      	ldr	r4, [pc, #292]	@ (8001d8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001c68:	42a2      	cmp	r2, r4
 8001c6a:	d06f      	beq.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001c6c:	4c48      	ldr	r4, [pc, #288]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001c6e:	42a2      	cmp	r2, r4
 8001c70:	d06c      	beq.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001c72:	4c48      	ldr	r4, [pc, #288]	@ (8001d94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001c74:	42a2      	cmp	r2, r4
 8001c76:	d069      	beq.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 8001c78:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c7a:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c7c:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001c7e:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8001c80:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c82:	2080      	movs	r0, #128	@ 0x80
 8001c84:	69d4      	ldr	r4, [r2, #28]
 8001c86:	0100      	lsls	r0, r0, #4
 8001c88:	4320      	orrs	r0, r4
 8001c8a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c8c:	69d0      	ldr	r0, [r2, #28]
 8001c8e:	4c42      	ldr	r4, [pc, #264]	@ (8001d98 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c90:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c92:	4020      	ands	r0, r4
 8001c94:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c96:	69d0      	ldr	r0, [r2, #28]
 8001c98:	0209      	lsls	r1, r1, #8
 8001c9a:	4301      	orrs	r1, r0
 8001c9c:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e706      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001ca2:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ca4:	4d43      	ldr	r5, [pc, #268]	@ (8001db4 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8001ca6:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001ca8:	6a10      	ldr	r0, [r2, #32]
 8001caa:	4028      	ands	r0, r5
 8001cac:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001cae:	4d42      	ldr	r5, [pc, #264]	@ (8001db8 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 8001cb0:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001cb2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001cb4:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001cb6:	680d      	ldr	r5, [r1, #0]
 8001cb8:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8001cba:	4840      	ldr	r0, [pc, #256]	@ (8001dbc <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8001cbc:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001cbe:	6888      	ldr	r0, [r1, #8]
 8001cc0:	0400      	lsls	r0, r0, #16
 8001cc2:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cc4:	4c31      	ldr	r4, [pc, #196]	@ (8001d8c <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001cc6:	42a2      	cmp	r2, r4
 8001cc8:	d02b      	beq.n	8001d22 <HAL_TIM_PWM_ConfigChannel+0x292>
 8001cca:	4c31      	ldr	r4, [pc, #196]	@ (8001d90 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001ccc:	42a2      	cmp	r2, r4
 8001cce:	d028      	beq.n	8001d22 <HAL_TIM_PWM_ConfigChannel+0x292>
 8001cd0:	4c30      	ldr	r4, [pc, #192]	@ (8001d94 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001cd2:	42a2      	cmp	r2, r4
 8001cd4:	d025      	beq.n	8001d22 <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8001cd6:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001cd8:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001cda:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8001cdc:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001cde:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001ce0:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ce2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ce4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001ce6:	4320      	orrs	r0, r4
 8001ce8:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001cea:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001cec:	3c04      	subs	r4, #4
 8001cee:	43a0      	bics	r0, r4
 8001cf0:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001cf2:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001cf4:	4301      	orrs	r1, r0
 8001cf6:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	e6d9      	b.n	8001ab0 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cfc:	2608      	movs	r6, #8
 8001cfe:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8001d00:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d02:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001d04:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d06:	2604      	movs	r6, #4
 8001d08:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d0a:	4e2d      	ldr	r6, [pc, #180]	@ (8001dc0 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8001d0c:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d0e:	694d      	ldr	r5, [r1, #20]
 8001d10:	433d      	orrs	r5, r7
 8001d12:	4335      	orrs	r5, r6
 8001d14:	e71f      	b.n	8001b56 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001d16:	4c2b      	ldr	r4, [pc, #172]	@ (8001dc4 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8001d18:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001d1a:	694e      	ldr	r6, [r1, #20]
 8001d1c:	02b6      	lsls	r6, r6, #10
 8001d1e:	4326      	orrs	r6, r4
 8001d20:	e6e8      	b.n	8001af4 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001d22:	4c24      	ldr	r4, [pc, #144]	@ (8001db4 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8001d24:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001d26:	694e      	ldr	r6, [r1, #20]
 8001d28:	0236      	lsls	r6, r6, #8
 8001d2a:	4326      	orrs	r6, r4
 8001d2c:	e7d3      	b.n	8001cd6 <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d2e:	2080      	movs	r0, #128	@ 0x80
 8001d30:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d32:	68c8      	ldr	r0, [r1, #12]
 8001d34:	0100      	lsls	r0, r0, #4
 8001d36:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d38:	2040      	movs	r0, #64	@ 0x40
 8001d3a:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d3c:	4822      	ldr	r0, [pc, #136]	@ (8001dc8 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d3e:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d40:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d42:	698e      	ldr	r6, [r1, #24]
 8001d44:	433e      	orrs	r6, r7
 8001d46:	00b6      	lsls	r6, r6, #2
 8001d48:	4306      	orrs	r6, r0
 8001d4a:	e735      	b.n	8001bb8 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d4c:	4c1f      	ldr	r4, [pc, #124]	@ (8001dcc <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8001d4e:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d50:	694e      	ldr	r6, [r1, #20]
 8001d52:	01b6      	lsls	r6, r6, #6
 8001d54:	4326      	orrs	r6, r4
 8001d56:	e78f      	b.n	8001c78 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d58:	4c1d      	ldr	r4, [pc, #116]	@ (8001dd0 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8001d5a:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d5c:	68cc      	ldr	r4, [r1, #12]
 8001d5e:	0224      	lsls	r4, r4, #8
 8001d60:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d62:	480d      	ldr	r0, [pc, #52]	@ (8001d98 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8001d64:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d66:	4c1b      	ldr	r4, [pc, #108]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d68:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d6a:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d6c:	698d      	ldr	r5, [r1, #24]
 8001d6e:	433d      	orrs	r5, r7
 8001d70:	012d      	lsls	r5, r5, #4
 8001d72:	4325      	orrs	r5, r4
 8001d74:	e752      	b.n	8001c1c <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8001d76:	2002      	movs	r0, #2
 8001d78:	e69d      	b.n	8001ab6 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	080025d0 	.word	0x080025d0
 8001d80:	ffefffff 	.word	0xffefffff
 8001d84:	feff8fff 	.word	0xfeff8fff
 8001d88:	ffdfffff 	.word	0xffdfffff
 8001d8c:	40012c00 	.word	0x40012c00
 8001d90:	40014400 	.word	0x40014400
 8001d94:	40014800 	.word	0x40014800
 8001d98:	fffffbff 	.word	0xfffffbff
 8001d9c:	fffeff8c 	.word	0xfffeff8c
 8001da0:	feff8cff 	.word	0xfeff8cff
 8001da4:	fffffeff 	.word	0xfffffeff
 8001da8:	fffffdff 	.word	0xfffffdff
 8001dac:	ffffefff 	.word	0xffffefff
 8001db0:	ffffdfff 	.word	0xffffdfff
 8001db4:	fffeffff 	.word	0xfffeffff
 8001db8:	fffeff8f 	.word	0xfffeff8f
 8001dbc:	fffdffff 	.word	0xfffdffff
 8001dc0:	fffffcff 	.word	0xfffffcff
 8001dc4:	fffbffff 	.word	0xfffbffff
 8001dc8:	fffff3ff 	.word	0xfffff3ff
 8001dcc:	ffffbfff 	.word	0xffffbfff
 8001dd0:	fffff7ff 	.word	0xfffff7ff
 8001dd4:	ffffcfff 	.word	0xffffcfff

08001dd8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001dd8:	233c      	movs	r3, #60	@ 0x3c
{
 8001dda:	b570      	push	{r4, r5, r6, lr}
 8001ddc:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001dde:	5cc0      	ldrb	r0, [r0, r3]
 8001de0:	2801      	cmp	r0, #1
 8001de2:	d100      	bne.n	8001de6 <HAL_TIM_ConfigClockSource+0xe>
 8001de4:	e073      	b.n	8001ece <HAL_TIM_ConfigClockSource+0xf6>
 8001de6:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001dea:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001dec:	3301      	adds	r3, #1
 8001dee:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001df0:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df2:	4d51      	ldr	r5, [pc, #324]	@ (8001f38 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8001df4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df6:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001df8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001dfa:	680b      	ldr	r3, [r1, #0]
 8001dfc:	2b60      	cmp	r3, #96	@ 0x60
 8001dfe:	d100      	bne.n	8001e02 <HAL_TIM_ConfigClockSource+0x2a>
 8001e00:	e067      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8001e02:	d81d      	bhi.n	8001e40 <HAL_TIM_ConfigClockSource+0x68>
 8001e04:	2b40      	cmp	r3, #64	@ 0x40
 8001e06:	d100      	bne.n	8001e0a <HAL_TIM_ConfigClockSource+0x32>
 8001e08:	e07d      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x12e>
 8001e0a:	d93f      	bls.n	8001e8c <HAL_TIM_ConfigClockSource+0xb4>
 8001e0c:	2b50      	cmp	r3, #80	@ 0x50
 8001e0e:	d135      	bne.n	8001e7c <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8001e10:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001e12:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e14:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e16:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e18:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e1a:	43a6      	bics	r6, r4
 8001e1c:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e1e:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001e20:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e22:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e24:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e26:	240a      	movs	r4, #10
 8001e28:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001e2a:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e2c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e2e:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e30:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e32:	4942      	ldr	r1, [pc, #264]	@ (8001f3c <HAL_TIM_ConfigClockSource+0x164>)
 8001e34:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e36:	2157      	movs	r1, #87	@ 0x57
 8001e38:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e3a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	e01e      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001e40:	2480      	movs	r4, #128	@ 0x80
 8001e42:	0164      	lsls	r4, r4, #5
 8001e44:	42a3      	cmp	r3, r4
 8001e46:	d0f9      	beq.n	8001e3c <HAL_TIM_ConfigClockSource+0x64>
 8001e48:	2480      	movs	r4, #128	@ 0x80
 8001e4a:	01a4      	lsls	r4, r4, #6
 8001e4c:	42a3      	cmp	r3, r4
 8001e4e:	d12b      	bne.n	8001ea8 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e50:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e52:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e54:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e56:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e58:	688b      	ldr	r3, [r1, #8]
 8001e5a:	68c9      	ldr	r1, [r1, #12]
 8001e5c:	432b      	orrs	r3, r5
 8001e5e:	0209      	lsls	r1, r1, #8
 8001e60:	430b      	orrs	r3, r1
 8001e62:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e64:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e66:	2380      	movs	r3, #128	@ 0x80
 8001e68:	6881      	ldr	r1, [r0, #8]
 8001e6a:	01db      	lsls	r3, r3, #7
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e70:	2000      	movs	r0, #0
 8001e72:	e004      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001e74:	2110      	movs	r1, #16
 8001e76:	001c      	movs	r4, r3
 8001e78:	438c      	bics	r4, r1
 8001e7a:	d00c      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001e7e:	233d      	movs	r3, #61	@ 0x3d
 8001e80:	2101      	movs	r1, #1
 8001e82:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8001e84:	2100      	movs	r1, #0
 8001e86:	3b01      	subs	r3, #1
 8001e88:	54d1      	strb	r1, [r2, r3]
}
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	d002      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0xbe>
 8001e90:	d9f0      	bls.n	8001e74 <HAL_TIM_ConfigClockSource+0x9c>
 8001e92:	2b30      	cmp	r3, #48	@ 0x30
 8001e94:	d1f2      	bne.n	8001e7c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001e96:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e98:	4c28      	ldr	r4, [pc, #160]	@ (8001f3c <HAL_TIM_ConfigClockSource+0x164>)
 8001e9a:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	2107      	movs	r1, #7
 8001ea0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001ea2:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e7ea      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001ea8:	2b70      	cmp	r3, #112	@ 0x70
 8001eaa:	d1e7      	bne.n	8001e7c <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001eac:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eae:	4b24      	ldr	r3, [pc, #144]	@ (8001f40 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb4:	688b      	ldr	r3, [r1, #8]
 8001eb6:	68c9      	ldr	r1, [r1, #12]
 8001eb8:	432b      	orrs	r3, r5
 8001eba:	0209      	lsls	r1, r1, #8
 8001ebc:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ebe:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ec0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001ec2:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ec4:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ec6:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001ec8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e7d7      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8001ece:	2002      	movs	r0, #2
 8001ed0:	e7db      	b.n	8001e8a <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ed2:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8001ed4:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ed6:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001ed8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eda:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8001edc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ede:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ee0:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ee2:	4e18      	ldr	r6, [pc, #96]	@ (8001f44 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ee4:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ee6:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ee8:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eea:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001eec:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001eee:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ef0:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001ef2:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ef4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001ef6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ef8:	4910      	ldr	r1, [pc, #64]	@ (8001f3c <HAL_TIM_ConfigClockSource+0x164>)
 8001efa:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001efc:	2167      	movs	r1, #103	@ 0x67
 8001efe:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f00:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f02:	2000      	movs	r0, #0
 8001f04:	e7bb      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8001f06:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001f08:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f0a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f0c:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f0e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f10:	43a6      	bics	r6, r4
 8001f12:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f14:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001f16:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f18:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f1a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f1c:	240a      	movs	r4, #10
 8001f1e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001f20:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001f22:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f24:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f26:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f28:	4904      	ldr	r1, [pc, #16]	@ (8001f3c <HAL_TIM_ConfigClockSource+0x164>)
 8001f2a:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f2c:	2147      	movs	r1, #71	@ 0x47
 8001f2e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f30:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2000      	movs	r0, #0
 8001f34:	e7a3      	b.n	8001e7e <HAL_TIM_ConfigClockSource+0xa6>
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	ffce0088 	.word	0xffce0088
 8001f3c:	ffcfff8f 	.word	0xffcfff8f
 8001f40:	ffff00ff 	.word	0xffff00ff
 8001f44:	ffff0fff 	.word	0xffff0fff

08001f48 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001f48:	233c      	movs	r3, #60	@ 0x3c
{
 8001f4a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f4c:	5cc2      	ldrb	r2, [r0, r3]
 8001f4e:	2a01      	cmp	r2, #1
 8001f50:	d04d      	beq.n	8001fee <HAL_TIM_SlaveConfigSynchro+0xa6>
 8001f52:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8001f56:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	3301      	adds	r3, #1
 8001f5a:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001f5c:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002058 <HAL_TIM_SlaveConfigSynchro+0x110>)
  tmpsmcr = htim->Instance->SMCR;
 8001f60:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001f62:	4e3e      	ldr	r6, [pc, #248]	@ (800205c <HAL_TIM_SlaveConfigSynchro+0x114>)
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f64:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001f66:	684b      	ldr	r3, [r1, #4]
 8001f68:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001f6a:	4032      	ands	r2, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001f6c:	680e      	ldr	r6, [r1, #0]
 8001f6e:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8001f70:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8001f72:	2b50      	cmp	r3, #80	@ 0x50
 8001f74:	d05f      	beq.n	8002036 <HAL_TIM_SlaveConfigSynchro+0xee>
 8001f76:	d90f      	bls.n	8001f98 <HAL_TIM_SlaveConfigSynchro+0x50>
 8001f78:	2b60      	cmp	r3, #96	@ 0x60
 8001f7a:	d03a      	beq.n	8001ff2 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8001f7c:	2b70      	cmp	r3, #112	@ 0x70
 8001f7e:	d10e      	bne.n	8001f9e <HAL_TIM_SlaveConfigSynchro+0x56>
  tmpsmcr = TIMx->SMCR;
 8001f80:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <HAL_TIM_SlaveConfigSynchro+0x118>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f84:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f86:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f88:	68cb      	ldr	r3, [r1, #12]
 8001f8a:	6909      	ldr	r1, [r1, #16]
 8001f8c:	432b      	orrs	r3, r5
 8001f8e:	0209      	lsls	r1, r1, #8
 8001f90:	430b      	orrs	r3, r1
 8001f92:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001f94:	60a3      	str	r3, [r4, #8]
 8001f96:	e00f      	b.n	8001fb8 <HAL_TIM_SlaveConfigSynchro+0x70>
  switch (sSlaveConfig->InputTrigger)
 8001f98:	2b40      	cmp	r3, #64	@ 0x40
 8001f9a:	d03d      	beq.n	8002018 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8001f9c:	d907      	bls.n	8001fae <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8001f9e:	233d      	movs	r3, #61	@ 0x3d
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001faa:	2001      	movs	r0, #1
 8001fac:	e013      	b.n	8001fd6 <HAL_TIM_SlaveConfigSynchro+0x8e>
  switch (sSlaveConfig->InputTrigger)
 8001fae:	2b20      	cmp	r3, #32
 8001fb0:	d002      	beq.n	8001fb8 <HAL_TIM_SlaveConfigSynchro+0x70>
 8001fb2:	d911      	bls.n	8001fd8 <HAL_TIM_SlaveConfigSynchro+0x90>
 8001fb4:	2b30      	cmp	r3, #48	@ 0x30
 8001fb6:	d1f2      	bne.n	8001f9e <HAL_TIM_SlaveConfigSynchro+0x56>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001fb8:	2240      	movs	r2, #64	@ 0x40
 8001fba:	68e3      	ldr	r3, [r4, #12]
 8001fbc:	4393      	bics	r3, r2
 8001fbe:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001fc0:	68e3      	ldr	r3, [r4, #12]
 8001fc2:	4a28      	ldr	r2, [pc, #160]	@ (8002064 <HAL_TIM_SlaveConfigSynchro+0x11c>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	233d      	movs	r3, #61	@ 0x3d
 8001fcc:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001fd4:	2000      	movs	r0, #0
}
 8001fd6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8001fd8:	2210      	movs	r2, #16
 8001fda:	4393      	bics	r3, r2
 8001fdc:	d0ec      	beq.n	8001fb8 <HAL_TIM_SlaveConfigSynchro+0x70>
    htim->State = HAL_TIM_STATE_READY;
 8001fde:	233d      	movs	r3, #61	@ 0x3d
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
 8001fec:	e7f3      	b.n	8001fd6 <HAL_TIM_SlaveConfigSynchro+0x8e>
  __HAL_LOCK(htim);
 8001fee:	2002      	movs	r0, #2
 8001ff0:	e7f1      	b.n	8001fd6 <HAL_TIM_SlaveConfigSynchro+0x8e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ff2:	2610      	movs	r6, #16
                               sSlaveConfig->TriggerPolarity,
 8001ff4:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8001ff6:	690a      	ldr	r2, [r1, #16]
  tmpccer = TIMx->CCER;
 8001ff8:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ffa:	6a25      	ldr	r5, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ffc:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ffe:	43b5      	bics	r5, r6
 8002000:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002002:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002004:	4e18      	ldr	r6, [pc, #96]	@ (8002068 <HAL_TIM_SlaveConfigSynchro+0x120>)
  tmpccer |= (TIM_ICPolarity << 4U);
 8002006:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002008:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800200a:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800200c:	25a0      	movs	r5, #160	@ 0xa0
 800200e:	43a9      	bics	r1, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002010:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8002012:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8002014:	6223      	str	r3, [r4, #32]
 8002016:	e7cf      	b.n	8001fb8 <HAL_TIM_SlaveConfigSynchro+0x70>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002018:	2e05      	cmp	r6, #5
 800201a:	d0c0      	beq.n	8001f9e <HAL_TIM_SlaveConfigSynchro+0x56>
      tmpccer = htim->Instance->CCER;
 800201c:	6a26      	ldr	r6, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800201e:	6a23      	ldr	r3, [r4, #32]
 8002020:	43ab      	bics	r3, r5
 8002022:	6223      	str	r3, [r4, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002024:	23f0      	movs	r3, #240	@ 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8002026:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002028:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800202a:	690b      	ldr	r3, [r1, #16]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8002030:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8002032:	6226      	str	r6, [r4, #32]
      break;
 8002034:	e7c0      	b.n	8001fb8 <HAL_TIM_SlaveConfigSynchro+0x70>
                               sSlaveConfig->TriggerPolarity,
 8002036:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8002038:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 800203a:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203c:	6a26      	ldr	r6, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800203e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002040:	43ae      	bics	r6, r5
 8002042:	6226      	str	r6, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002044:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8002046:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002048:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800204a:	432b      	orrs	r3, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800204c:	250a      	movs	r5, #10
 800204e:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8002050:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002052:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002054:	6222      	str	r2, [r4, #32]
 8002056:	e7af      	b.n	8001fb8 <HAL_TIM_SlaveConfigSynchro+0x70>
 8002058:	ffcfff8f 	.word	0xffcfff8f
 800205c:	fffefff8 	.word	0xfffefff8
 8002060:	ffff00ff 	.word	0xffff00ff
 8002064:	ffffbfff 	.word	0xffffbfff
 8002068:	ffff0fff 	.word	0xffff0fff

0800206c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800206c:	4770      	bx	lr
 800206e:	46c0      	nop			@ (mov r8, r8)

08002070 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8002070:	4770      	bx	lr
 8002072:	46c0      	nop			@ (mov r8, r8)

08002074 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8002074:	4770      	bx	lr
 8002076:	46c0      	nop			@ (mov r8, r8)

08002078 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8002078:	4770      	bx	lr
 800207a:	46c0      	nop			@ (mov r8, r8)

0800207c <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800207c:	2202      	movs	r2, #2
{
 800207e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8002080:	6803      	ldr	r3, [r0, #0]
{
 8002082:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8002084:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002086:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002088:	4222      	tst	r2, r4
 800208a:	d001      	beq.n	8002090 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800208c:	4232      	tst	r2, r6
 800208e:	d162      	bne.n	8002156 <HAL_TIM_IRQHandler+0xda>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002090:	2304      	movs	r3, #4
 8002092:	4223      	tst	r3, r4
 8002094:	d001      	beq.n	800209a <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002096:	4233      	tst	r3, r6
 8002098:	d149      	bne.n	800212e <HAL_TIM_IRQHandler+0xb2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800209a:	2308      	movs	r3, #8
 800209c:	4223      	tst	r3, r4
 800209e:	d001      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020a0:	4233      	tst	r3, r6
 80020a2:	d132      	bne.n	800210a <HAL_TIM_IRQHandler+0x8e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020a4:	2310      	movs	r3, #16
 80020a6:	4223      	tst	r3, r4
 80020a8:	d001      	beq.n	80020ae <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020aa:	4233      	tst	r3, r6
 80020ac:	d119      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x66>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020ae:	2301      	movs	r3, #1
 80020b0:	4223      	tst	r3, r4
 80020b2:	d001      	beq.n	80020b8 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020b4:	4233      	tst	r3, r6
 80020b6:	d16a      	bne.n	800218e <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020b8:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020ba:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020bc:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020be:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80020c0:	4027      	ands	r7, r4
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80020c2:	421c      	tst	r4, r3
 80020c4:	d056      	beq.n	8002174 <HAL_TIM_IRQHandler+0xf8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020c6:	0633      	lsls	r3, r6, #24
 80020c8:	d469      	bmi.n	800219e <HAL_TIM_IRQHandler+0x122>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020ca:	2340      	movs	r3, #64	@ 0x40
 80020cc:	4223      	tst	r3, r4
 80020ce:	d002      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020d0:	4233      	tst	r3, r6
 80020d2:	d000      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x5a>
 80020d4:	e073      	b.n	80021be <HAL_TIM_IRQHandler+0x142>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020d6:	2320      	movs	r3, #32
 80020d8:	4223      	tst	r3, r4
 80020da:	d001      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x64>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020dc:	4233      	tst	r3, r6
 80020de:	d14e      	bne.n	800217e <HAL_TIM_IRQHandler+0x102>
}
 80020e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020e2:	2211      	movs	r2, #17
 80020e4:	682b      	ldr	r3, [r5, #0]
 80020e6:	4252      	negs	r2, r2
 80020e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ea:	3219      	adds	r2, #25
 80020ec:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	23c0      	movs	r3, #192	@ 0xc0
 80020f2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80020f4:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020f6:	421a      	tst	r2, r3
 80020f8:	d172      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x164>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	f7ff ffb7 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fe:	0028      	movs	r0, r5
 8002100:	f7ff ffb8 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002104:	2300      	movs	r3, #0
 8002106:	772b      	strb	r3, [r5, #28]
 8002108:	e7d1      	b.n	80020ae <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800210a:	2209      	movs	r2, #9
 800210c:	682b      	ldr	r3, [r5, #0]
 800210e:	4252      	negs	r2, r2
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002112:	320d      	adds	r2, #13
 8002114:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002116:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002118:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800211a:	079b      	lsls	r3, r3, #30
 800211c:	d15d      	bne.n	80021da <HAL_TIM_IRQHandler+0x15e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211e:	f7ff ffa5 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002122:	0028      	movs	r0, r5
 8002124:	f7ff ffa6 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002128:	2300      	movs	r3, #0
 800212a:	772b      	strb	r3, [r5, #28]
 800212c:	e7ba      	b.n	80020a4 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800212e:	2205      	movs	r2, #5
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	4252      	negs	r2, r2
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002136:	3207      	adds	r2, #7
 8002138:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800213a:	699a      	ldr	r2, [r3, #24]
 800213c:	23c0      	movs	r3, #192	@ 0xc0
 800213e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002140:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002142:	421a      	tst	r2, r3
 8002144:	d146      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	f7ff ff91 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214a:	0028      	movs	r0, r5
 800214c:	f7ff ff92 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002150:	2300      	movs	r3, #0
 8002152:	772b      	strb	r3, [r5, #28]
 8002154:	e7a1      	b.n	800209a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002156:	3a05      	subs	r2, #5
 8002158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215a:	3204      	adds	r2, #4
 800215c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	079b      	lsls	r3, r3, #30
 8002162:	d134      	bne.n	80021ce <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002164:	f7ff ff82 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	0028      	movs	r0, r5
 800216a:	f7ff ff83 	bl	8002074 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	2300      	movs	r3, #0
 8002170:	772b      	strb	r3, [r5, #28]
 8002172:	e78d      	b.n	8002090 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002174:	2f00      	cmp	r7, #0
 8002176:	d0a8      	beq.n	80020ca <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002178:	0633      	lsls	r3, r6, #24
 800217a:	d5a6      	bpl.n	80020ca <HAL_TIM_IRQHandler+0x4e>
 800217c:	e018      	b.n	80021b0 <HAL_TIM_IRQHandler+0x134>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800217e:	2221      	movs	r2, #33	@ 0x21
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8002184:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002186:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002188:	f000 f8c6 	bl	8002318 <HAL_TIMEx_CommutCallback>
}
 800218c:	e7a8      	b.n	80020e0 <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800218e:	2202      	movs	r2, #2
 8002190:	682b      	ldr	r3, [r5, #0]
 8002192:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8002194:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002196:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002198:	f7fe f896 	bl	80002c8 <HAL_TIM_PeriodElapsedCallback>
 800219c:	e78c      	b.n	80020b8 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800219e:	682b      	ldr	r3, [r5, #0]
 80021a0:	4a11      	ldr	r2, [pc, #68]	@ (80021e8 <HAL_TIM_IRQHandler+0x16c>)
      HAL_TIMEx_BreakCallback(htim);
 80021a2:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021a6:	f000 f8b9 	bl	800231c <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021aa:	2f00      	cmp	r7, #0
 80021ac:	d100      	bne.n	80021b0 <HAL_TIM_IRQHandler+0x134>
 80021ae:	e78c      	b.n	80020ca <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021b0:	682b      	ldr	r3, [r5, #0]
 80021b2:	4a0e      	ldr	r2, [pc, #56]	@ (80021ec <HAL_TIM_IRQHandler+0x170>)
      HAL_TIMEx_Break2Callback(htim);
 80021b4:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021b6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80021b8:	f000 f8b2 	bl	8002320 <HAL_TIMEx_Break2Callback>
 80021bc:	e785      	b.n	80020ca <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021be:	2241      	movs	r2, #65	@ 0x41
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 80021c4:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80021c8:	f7ff ff56 	bl	8002078 <HAL_TIM_TriggerCallback>
 80021cc:	e783      	b.n	80020d6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	f7ff ff4f 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80021d2:	e7cc      	b.n	800216e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80021d4:	f7ff ff4c 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e7ba      	b.n	8002150 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	f7ff ff49 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80021de:	e7a3      	b.n	8002128 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_IC_CaptureCallback(htim);
 80021e0:	f7ff ff46 	bl	8002070 <HAL_TIM_IC_CaptureCallback>
 80021e4:	e78e      	b.n	8002104 <HAL_TIM_IRQHandler+0x88>
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	ffffdf7f 	.word	0xffffdf7f
 80021ec:	fffffeff 	.word	0xfffffeff

080021f0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021f0:	233c      	movs	r3, #60	@ 0x3c
{
 80021f2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80021f4:	5cc3      	ldrb	r3, [r0, r3]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d026      	beq.n	8002248 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fa:	233d      	movs	r3, #61	@ 0x3d
 80021fc:	2202      	movs	r2, #2
 80021fe:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002200:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002202:	4d12      	ldr	r5, [pc, #72]	@ (800224c <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 8002204:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002206:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002208:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800220a:	42aa      	cmp	r2, r5
 800220c:	d00e      	beq.n	800222c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 800220e:	2570      	movs	r5, #112	@ 0x70
 8002210:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002212:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002214:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002218:	429a      	cmp	r2, r3
 800221a:	d00f      	beq.n	800223c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800221c:	233d      	movs	r3, #61	@ 0x3d
 800221e:	2201      	movs	r2, #1
 8002220:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8002222:	2200      	movs	r2, #0
 8002224:	3b01      	subs	r3, #1
 8002226:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002228:	2000      	movs	r0, #0
}
 800222a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 800222c:	4d09      	ldr	r5, [pc, #36]	@ (8002254 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 800222e:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002230:	684d      	ldr	r5, [r1, #4]
 8002232:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8002234:	2570      	movs	r5, #112	@ 0x70
 8002236:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002238:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 800223a:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002240:	688b      	ldr	r3, [r1, #8]
 8002242:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 8002244:	6094      	str	r4, [r2, #8]
 8002246:	e7e9      	b.n	800221c <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8002248:	2002      	movs	r0, #2
 800224a:	e7ee      	b.n	800222a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800224c:	40012c00 	.word	0x40012c00
 8002250:	40000400 	.word	0x40000400
 8002254:	ff0fffff 	.word	0xff0fffff

08002258 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002258:	233c      	movs	r3, #60	@ 0x3c
{
 800225a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800225c:	5cc3      	ldrb	r3, [r0, r3]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d03d      	beq.n	80022de <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002262:	4a20      	ldr	r2, [pc, #128]	@ (80022e4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8002264:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002266:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002268:	4013      	ands	r3, r2
 800226a:	688a      	ldr	r2, [r1, #8]
 800226c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800226e:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8002270:	4013      	ands	r3, r2
 8002272:	684a      	ldr	r2, [r1, #4]
 8002274:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002276:	4a1d      	ldr	r2, [pc, #116]	@ (80022ec <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8002278:	4013      	ands	r3, r2
 800227a:	680a      	ldr	r2, [r1, #0]
 800227c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800227e:	4a1c      	ldr	r2, [pc, #112]	@ (80022f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8002280:	4013      	ands	r3, r2
 8002282:	690a      	ldr	r2, [r1, #16]
 8002284:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002286:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8002288:	4013      	ands	r3, r2
 800228a:	694a      	ldr	r2, [r1, #20]
 800228c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800228e:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8002290:	4013      	ands	r3, r2
 8002292:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8002294:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002296:	4a19      	ldr	r2, [pc, #100]	@ (80022fc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002298:	4013      	ands	r3, r2
 800229a:	698a      	ldr	r2, [r1, #24]
 800229c:	0412      	lsls	r2, r2, #16
 800229e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80022a0:	4a17      	ldr	r2, [pc, #92]	@ (8002300 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	69ca      	ldr	r2, [r1, #28]
 80022a6:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80022aa:	4294      	cmp	r4, r2
 80022ac:	d005      	beq.n	80022ba <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80022ae:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80022b0:	2200      	movs	r2, #0
 80022b2:	233c      	movs	r3, #60	@ 0x3c
 80022b4:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80022b6:	2000      	movs	r0, #0
}
 80022b8:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80022ba:	4a13      	ldr	r2, [pc, #76]	@ (8002308 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80022bc:	4013      	ands	r3, r2
 80022be:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80022c0:	0512      	lsls	r2, r2, #20
 80022c2:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80022c6:	401a      	ands	r2, r3
 80022c8:	6a0b      	ldr	r3, [r1, #32]
 80022ca:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80022cc:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80022ce:	401a      	ands	r2, r3
 80022d0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80022d2:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 80022d6:	401a      	ands	r2, r3
 80022d8:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80022da:	4313      	orrs	r3, r2
 80022dc:	e7e7      	b.n	80022ae <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 80022de:	2002      	movs	r0, #2
 80022e0:	e7ea      	b.n	80022b8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	fffffcff 	.word	0xfffffcff
 80022e8:	fffffbff 	.word	0xfffffbff
 80022ec:	fffff7ff 	.word	0xfffff7ff
 80022f0:	ffffefff 	.word	0xffffefff
 80022f4:	ffffdfff 	.word	0xffffdfff
 80022f8:	ffffbfff 	.word	0xffffbfff
 80022fc:	fff0ffff 	.word	0xfff0ffff
 8002300:	efffffff 	.word	0xefffffff
 8002304:	40012c00 	.word	0x40012c00
 8002308:	ff0fffff 	.word	0xff0fffff
 800230c:	feffffff 	.word	0xfeffffff
 8002310:	fdffffff 	.word	0xfdffffff
 8002314:	dfffffff 	.word	0xdfffffff

08002318 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002318:	4770      	bx	lr
 800231a:	46c0      	nop			@ (mov r8, r8)

0800231c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800231c:	4770      	bx	lr
 800231e:	46c0      	nop			@ (mov r8, r8)

08002320 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002320:	4770      	bx	lr
 8002322:	46c0      	nop			@ (mov r8, r8)

08002324 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002326:	464e      	mov	r6, r9
 8002328:	46de      	mov	lr, fp
 800232a:	4657      	mov	r7, sl
 800232c:	4645      	mov	r5, r8
 800232e:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002330:	680e      	ldr	r6, [r1, #0]
  pinpos = 0;
 8002332:	2400      	movs	r4, #0
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002334:	2e00      	cmp	r6, #0
 8002336:	d113      	bne.n	8002360 <LL_GPIO_Init+0x3c>
 8002338:	e05f      	b.n	80023fa <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800233a:	68c5      	ldr	r5, [r0, #12]
 800233c:	46a8      	mov	r8, r5
 800233e:	4647      	mov	r7, r8
 8002340:	690d      	ldr	r5, [r1, #16]
 8002342:	401f      	ands	r7, r3
 8002344:	4355      	muls	r5, r2
 8002346:	433d      	orrs	r5, r7
 8002348:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800234a:	465b      	mov	r3, fp
 800234c:	6805      	ldr	r5, [r0, #0]
 800234e:	402b      	ands	r3, r5
 8002350:	4665      	mov	r5, ip
 8002352:	436a      	muls	r2, r5
 8002354:	4313      	orrs	r3, r2
 8002356:	6003      	str	r3, [r0, #0]
 8002358:	0033      	movs	r3, r6
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800235a:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800235c:	40e3      	lsrs	r3, r4
 800235e:	d04c      	beq.n	80023fa <LL_GPIO_Init+0xd6>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002360:	2301      	movs	r3, #1
 8002362:	0035      	movs	r5, r6
 8002364:	40a3      	lsls	r3, r4
 8002366:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 8002368:	421e      	tst	r6, r3
 800236a:	d0f5      	beq.n	8002358 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800236c:	002a      	movs	r2, r5
 800236e:	436a      	muls	r2, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002370:	684b      	ldr	r3, [r1, #4]
 8002372:	2701      	movs	r7, #1
 8002374:	469c      	mov	ip, r3
 8002376:	0053      	lsls	r3, r2, #1
 8002378:	189b      	adds	r3, r3, r2
 800237a:	43db      	mvns	r3, r3
 800237c:	427f      	negs	r7, r7
 800237e:	4467      	add	r7, ip
 8002380:	469b      	mov	fp, r3
 8002382:	2f01      	cmp	r7, #1
 8002384:	d8d9      	bhi.n	800233a <LL_GPIO_Init+0x16>
 8002386:	6887      	ldr	r7, [r0, #8]
 8002388:	46b9      	mov	r9, r7
 800238a:	688f      	ldr	r7, [r1, #8]
 800238c:	4357      	muls	r7, r2
 800238e:	46b8      	mov	r8, r7
 8002390:	464f      	mov	r7, r9
 8002392:	401f      	ands	r7, r3
 8002394:	46b9      	mov	r9, r7
 8002396:	4647      	mov	r7, r8
 8002398:	464b      	mov	r3, r9
 800239a:	431f      	orrs	r7, r3
 800239c:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800239e:	6843      	ldr	r3, [r0, #4]
 80023a0:	001f      	movs	r7, r3
 80023a2:	68cb      	ldr	r3, [r1, #12]
 80023a4:	43af      	bics	r7, r5
 80023a6:	46b8      	mov	r8, r7
 80023a8:	001f      	movs	r7, r3
 80023aa:	436f      	muls	r7, r5
 80023ac:	46b9      	mov	r9, r7
 80023ae:	4647      	mov	r7, r8
 80023b0:	464b      	mov	r3, r9
 80023b2:	431f      	orrs	r7, r3
 80023b4:	6047      	str	r7, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023b6:	68c3      	ldr	r3, [r0, #12]
 80023b8:	4699      	mov	r9, r3
 80023ba:	690b      	ldr	r3, [r1, #16]
 80023bc:	001f      	movs	r7, r3
 80023be:	4357      	muls	r7, r2
 80023c0:	465b      	mov	r3, fp
 80023c2:	46b8      	mov	r8, r7
 80023c4:	464f      	mov	r7, r9
 80023c6:	401f      	ands	r7, r3
 80023c8:	46b9      	mov	r9, r7
 80023ca:	4647      	mov	r7, r8
 80023cc:	464b      	mov	r3, r9
 80023ce:	431f      	orrs	r7, r3
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80023d0:	4663      	mov	r3, ip
 80023d2:	60c7      	str	r7, [r0, #12]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d1b8      	bne.n	800234a <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023d8:	694b      	ldr	r3, [r1, #20]
 80023da:	4698      	mov	r8, r3
        if (currentpin < LL_GPIO_PIN_8)
 80023dc:	2dff      	cmp	r5, #255	@ 0xff
 80023de:	d813      	bhi.n	8002408 <LL_GPIO_Init+0xe4>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80023e0:	0013      	movs	r3, r2
 80023e2:	4353      	muls	r3, r2
 80023e4:	4699      	mov	r9, r3
 80023e6:	464f      	mov	r7, r9
 80023e8:	6a05      	ldr	r5, [r0, #32]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	1bdb      	subs	r3, r3, r7
 80023ee:	439d      	bics	r5, r3
 80023f0:	4643      	mov	r3, r8
 80023f2:	437b      	muls	r3, r7
 80023f4:	431d      	orrs	r5, r3
 80023f6:	6205      	str	r5, [r0, #32]
}
 80023f8:	e7a7      	b.n	800234a <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 80023fa:	2000      	movs	r0, #0
 80023fc:	bcf0      	pop	{r4, r5, r6, r7}
 80023fe:	46bb      	mov	fp, r7
 8002400:	46b2      	mov	sl, r6
 8002402:	46a9      	mov	r9, r5
 8002404:	46a0      	mov	r8, r4
 8002406:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002408:	0a2d      	lsrs	r5, r5, #8
 800240a:	436d      	muls	r5, r5
 800240c:	436d      	muls	r5, r5
 800240e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002410:	4699      	mov	r9, r3
 8002412:	012b      	lsls	r3, r5, #4
 8002414:	1b5b      	subs	r3, r3, r5
 8002416:	469a      	mov	sl, r3
 8002418:	464b      	mov	r3, r9
 800241a:	4657      	mov	r7, sl
 800241c:	43bb      	bics	r3, r7
 800241e:	4699      	mov	r9, r3
 8002420:	4643      	mov	r3, r8
 8002422:	436b      	muls	r3, r5
 8002424:	001d      	movs	r5, r3
 8002426:	464b      	mov	r3, r9
 8002428:	431d      	orrs	r5, r3
 800242a:	6245      	str	r5, [r0, #36]	@ 0x24
}
 800242c:	e78d      	b.n	800234a <LL_GPIO_Init+0x26>
 800242e:	46c0      	nop			@ (mov r8, r8)

08002430 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002430:	4a19      	ldr	r2, [pc, #100]	@ (8002498 <LL_TIM_Init+0x68>)
{
 8002432:	b530      	push	{r4, r5, lr}
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002434:	6803      	ldr	r3, [r0, #0]

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002436:	688d      	ldr	r5, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002438:	880c      	ldrh	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243a:	4290      	cmp	r0, r2
 800243c:	d026      	beq.n	800248c <LL_TIM_Init+0x5c>
 800243e:	4a17      	ldr	r2, [pc, #92]	@ (800249c <LL_TIM_Init+0x6c>)
 8002440:	4290      	cmp	r0, r2
 8002442:	d012      	beq.n	800246a <LL_TIM_Init+0x3a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002444:	4a16      	ldr	r2, [pc, #88]	@ (80024a0 <LL_TIM_Init+0x70>)
 8002446:	4290      	cmp	r0, r2
 8002448:	d013      	beq.n	8002472 <LL_TIM_Init+0x42>
 800244a:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <LL_TIM_Init+0x74>)
 800244c:	4290      	cmp	r0, r2
 800244e:	d002      	beq.n	8002456 <LL_TIM_Init+0x26>
 8002450:	4a15      	ldr	r2, [pc, #84]	@ (80024a8 <LL_TIM_Init+0x78>)
 8002452:	4290      	cmp	r0, r2
 8002454:	d111      	bne.n	800247a <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002456:	4a15      	ldr	r2, [pc, #84]	@ (80024ac <LL_TIM_Init+0x7c>)
 8002458:	4013      	ands	r3, r2
 800245a:	68ca      	ldr	r2, [r1, #12]
 800245c:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800245e:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002460:	62c5      	str	r5, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002462:	6284      	str	r4, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002464:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002466:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002468:	e00a      	b.n	8002480 <LL_TIM_Init+0x50>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800246a:	2270      	movs	r2, #112	@ 0x70
 800246c:	4393      	bics	r3, r2
 800246e:	684a      	ldr	r2, [r1, #4]
 8002470:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002472:	4a0e      	ldr	r2, [pc, #56]	@ (80024ac <LL_TIM_Init+0x7c>)
 8002474:	4013      	ands	r3, r2
 8002476:	68ca      	ldr	r2, [r1, #12]
 8002478:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800247a:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800247c:	62c5      	str	r5, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800247e:	6284      	str	r4, [r0, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002480:	2201      	movs	r2, #1
 8002482:	6943      	ldr	r3, [r0, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8002488:	2000      	movs	r0, #0
 800248a:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800248c:	2270      	movs	r2, #112	@ 0x70
 800248e:	4393      	bics	r3, r2
 8002490:	684a      	ldr	r2, [r1, #4]
 8002492:	4313      	orrs	r3, r2
 8002494:	e7df      	b.n	8002456 <LL_TIM_Init+0x26>
 8002496:	46c0      	nop			@ (mov r8, r8)
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40000400 	.word	0x40000400
 80024a0:	40002000 	.word	0x40002000
 80024a4:	40014400 	.word	0x40014400
 80024a8:	40014800 	.word	0x40014800
 80024ac:	fffffcff 	.word	0xfffffcff

080024b0 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024b0:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <LL_mDelay+0x28>)
{
 80024b2:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	9301      	str	r3, [sp, #4]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80024b8:	9b01      	ldr	r3, [sp, #4]
  tmpDelay  = Delay;
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
  {
    tmpDelay ++;
 80024ba:	1c43      	adds	r3, r0, #1
 80024bc:	1e59      	subs	r1, r3, #1
 80024be:	418b      	sbcs	r3, r1
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80024c0:	2180      	movs	r1, #128	@ 0x80
    tmpDelay ++;
 80024c2:	18c0      	adds	r0, r0, r3
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80024c4:	0249      	lsls	r1, r1, #9
 80024c6:	6813      	ldr	r3, [r2, #0]
 80024c8:	420b      	tst	r3, r1
 80024ca:	d0fc      	beq.n	80024c6 <LL_mDelay+0x16>
    {
      tmpDelay --;
 80024cc:	3801      	subs	r0, #1
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d1f9      	bne.n	80024c6 <LL_mDelay+0x16>
    }
  }
}
 80024d2:	b002      	add	sp, #8
 80024d4:	4770      	bx	lr
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	e000e010 	.word	0xe000e010

080024dc <memset>:
 80024dc:	0003      	movs	r3, r0
 80024de:	1882      	adds	r2, r0, r2
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d100      	bne.n	80024e6 <memset+0xa>
 80024e4:	4770      	bx	lr
 80024e6:	7019      	strb	r1, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	e7f9      	b.n	80024e0 <memset+0x4>

080024ec <__libc_init_array>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	2600      	movs	r6, #0
 80024f0:	4c0c      	ldr	r4, [pc, #48]	@ (8002524 <__libc_init_array+0x38>)
 80024f2:	4d0d      	ldr	r5, [pc, #52]	@ (8002528 <__libc_init_array+0x3c>)
 80024f4:	1b64      	subs	r4, r4, r5
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	42a6      	cmp	r6, r4
 80024fa:	d109      	bne.n	8002510 <__libc_init_array+0x24>
 80024fc:	2600      	movs	r6, #0
 80024fe:	f000 f819 	bl	8002534 <_init>
 8002502:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <__libc_init_array+0x40>)
 8002504:	4d0a      	ldr	r5, [pc, #40]	@ (8002530 <__libc_init_array+0x44>)
 8002506:	1b64      	subs	r4, r4, r5
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	42a6      	cmp	r6, r4
 800250c:	d105      	bne.n	800251a <__libc_init_array+0x2e>
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	00b3      	lsls	r3, r6, #2
 8002512:	58eb      	ldr	r3, [r5, r3]
 8002514:	4798      	blx	r3
 8002516:	3601      	adds	r6, #1
 8002518:	e7ee      	b.n	80024f8 <__libc_init_array+0xc>
 800251a:	00b3      	lsls	r3, r6, #2
 800251c:	58eb      	ldr	r3, [r5, r3]
 800251e:	4798      	blx	r3
 8002520:	3601      	adds	r6, #1
 8002522:	e7f2      	b.n	800250a <__libc_init_array+0x1e>
 8002524:	08002624 	.word	0x08002624
 8002528:	08002624 	.word	0x08002624
 800252c:	08002628 	.word	0x08002628
 8002530:	08002624 	.word	0x08002624

08002534 <_init>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr

08002540 <_fini>:
 8002540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002542:	46c0      	nop			@ (mov r8, r8)
 8002544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002546:	bc08      	pop	{r3}
 8002548:	469e      	mov	lr, r3
 800254a:	4770      	bx	lr
