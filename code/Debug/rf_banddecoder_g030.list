
rf_banddecoder_g030.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024dc  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800266c  0800266c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  0800266c  0800266c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800266c  0800266c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800266c  0800266c  0000366c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002670  08002670  00003670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002674  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002680  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002680  00004134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d1a  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000283e  00000000  00000000  00015d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009213  00000000  00000000  0001858c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  000217a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f3  00000000  00000000  00022218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016138  00000000  00000000  0002340b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013fe0  00000000  00000000  00039543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a7c9  00000000  00000000  0004d523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d7cec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ab8  00000000  00000000  000d7d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  000d97e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800257c 	.word	0x0800257c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800257c 	.word	0x0800257c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <HAL_TIM_PeriodElapsedCallback>:
	LL_mDelay(200);
	LL_GPIO_ResetOutputPin(PTT_OUT_GPIO_Port, PTT_OUT_Pin);
	ResetAllOuts();
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021a:	46d6      	mov	lr, sl
 800021c:	464f      	mov	r7, r9
 800021e:	4646      	mov	r6, r8
	//static int z=0;
	if ((htim == &htim16)&&(LL_GPIO_IsInputPinSet(PTT_IN_GPIO_Port, PTT_IN_Pin) == 0)) {
 8000220:	4d3f      	ldr	r5, [pc, #252]	@ (8000320 <HAL_TIM_PeriodElapsedCallback+0x108>)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000222:	b5c0      	push	{r6, r7, lr}
	if ((htim == &htim16)&&(LL_GPIO_IsInputPinSet(PTT_IN_GPIO_Port, PTT_IN_Pin) == 0)) {
 8000224:	4285      	cmp	r5, r0
 8000226:	d004      	beq.n	8000232 <HAL_TIM_PeriodElapsedCallback+0x1a>

		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
	}
}
 8000228:	bce0      	pop	{r5, r6, r7}
 800022a:	46ba      	mov	sl, r7
 800022c:	46b1      	mov	r9, r6
 800022e:	46a8      	mov	r8, r5
 8000230:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000232:	2280      	movs	r2, #128	@ 0x80
 8000234:	0011      	movs	r1, r2
 8000236:	4b3b      	ldr	r3, [pc, #236]	@ (8000324 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000238:	691b      	ldr	r3, [r3, #16]
 800023a:	4019      	ands	r1, r3
 800023c:	4688      	mov	r8, r1
 800023e:	421a      	tst	r2, r3
 8000240:	d1f2      	bne.n	8000228 <HAL_TIM_PeriodElapsedCallback+0x10>
		HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8000242:	2100      	movs	r1, #0
 8000244:	0028      	movs	r0, r5
 8000246:	f001 fbe9 	bl	8001a1c <HAL_TIM_PWM_Stop>
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim1);
 800024a:	4b37      	ldr	r3, [pc, #220]	@ (8000328 <HAL_TIM_PeriodElapsedCallback+0x110>)
		current_freq = (freq_raw>>2)/100;
 800024c:	2164      	movs	r1, #100	@ 0x64
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim1);
 800024e:	681e      	ldr	r6, [r3, #0]
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8000250:	4b36      	ldr	r3, [pc, #216]	@ (800032c <HAL_TIM_PeriodElapsedCallback+0x114>)
		uint16_t count_main = __HAL_TIM_GET_COUNTER(&htim1);
 8000252:	6a72      	ldr	r2, [r6, #36]	@ 0x24
		uint16_t count_secondary = __HAL_TIM_GET_COUNTER(&htim3);
 8000254:	681f      	ldr	r7, [r3, #0]
 8000256:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
		uint16_t arr = __HAL_TIM_GET_AUTORELOAD(&htim1);
 8000258:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
		uint32_t freq_raw = count_main + (count_secondary * (arr + 1));
 800025a:	0424      	lsls	r4, r4, #16
 800025c:	041b      	lsls	r3, r3, #16
 800025e:	0c1b      	lsrs	r3, r3, #16
 8000260:	3301      	adds	r3, #1
 8000262:	0c24      	lsrs	r4, r4, #16
 8000264:	435c      	muls	r4, r3
 8000266:	0413      	lsls	r3, r2, #16
 8000268:	0c1b      	lsrs	r3, r3, #16
 800026a:	18e4      	adds	r4, r4, r3
		current_freq = (freq_raw>>2)/100;
 800026c:	08a4      	lsrs	r4, r4, #2
 800026e:	0020      	movs	r0, r4
 8000270:	f7ff ff46 	bl	8000100 <__udivsi3>
 8000274:	4b2e      	ldr	r3, [pc, #184]	@ (8000330 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000276:	6018      	str	r0, [r3, #0]
		if (current_freq >= 1) count++; else count = 0;
 8000278:	4b2e      	ldr	r3, [pc, #184]	@ (8000334 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800027a:	2c63      	cmp	r4, #99	@ 0x63
 800027c:	d913      	bls.n	80002a6 <HAL_TIM_PeriodElapsedCallback+0x8e>
 800027e:	6819      	ldr	r1, [r3, #0]
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 8000280:	4a2d      	ldr	r2, [pc, #180]	@ (8000338 <HAL_TIM_PeriodElapsedCallback+0x120>)
		if (current_freq >= 1) count++; else count = 0;
 8000282:	3101      	adds	r1, #1
 8000284:	6019      	str	r1, [r3, #0]
 8000286:	4699      	mov	r9, r3
			if (current_freq > freq_old1) {
 8000288:	4b2c      	ldr	r3, [pc, #176]	@ (800033c <HAL_TIM_PeriodElapsedCallback+0x124>)
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 800028a:	4694      	mov	ip, r2
			if (current_freq > freq_old1) {
 800028c:	469a      	mov	sl, r3
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 800028e:	6812      	ldr	r2, [r2, #0]
			if (current_freq > freq_old1) {
 8000290:	681b      	ldr	r3, [r3, #0]
		if (count == 1){
 8000292:	2901      	cmp	r1, #1
 8000294:	d037      	beq.n	8000306 <HAL_TIM_PeriodElapsedCallback+0xee>
		if (count == 2){
 8000296:	2902      	cmp	r1, #2
 8000298:	d12a      	bne.n	80002f0 <HAL_TIM_PeriodElapsedCallback+0xd8>
					if (current_freq > freq_old2) {
 800029a:	4290      	cmp	r0, r2
 800029c:	d90b      	bls.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
						freq_old2 = current_freq;
 800029e:	4662      	mov	r2, ip
 80002a0:	6010      	str	r0, [r2, #0]
 80002a2:	0002      	movs	r2, r0
 80002a4:	e007      	b.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
		if (current_freq >= 1) count++; else count = 0;
 80002a6:	4642      	mov	r2, r8
 80002a8:	601a      	str	r2, [r3, #0]
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 80002aa:	4b24      	ldr	r3, [pc, #144]	@ (800033c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80002ac:	4a22      	ldr	r2, [pc, #136]	@ (8000338 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80002ae:	469a      	mov	sl, r3
 80002b0:	4694      	mov	ip, r2
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	6812      	ldr	r2, [r2, #0]
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d010      	beq.n	80002dc <HAL_TIM_PeriodElapsedCallback+0xc4>
		if (current_freq<freq_old1) freq_old1=freq_old2=freq_old3=0;
 80002ba:	4298      	cmp	r0, r3
 80002bc:	d206      	bcs.n	80002cc <HAL_TIM_PeriodElapsedCallback+0xb4>
 80002be:	2300      	movs	r3, #0
 80002c0:	4a1f      	ldr	r2, [pc, #124]	@ (8000340 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80002c2:	6013      	str	r3, [r2, #0]
 80002c4:	4662      	mov	r2, ip
 80002c6:	6013      	str	r3, [r2, #0]
 80002c8:	4652      	mov	r2, sl
 80002ca:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 80002cc:	2300      	movs	r3, #0
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002ce:	2100      	movs	r1, #0
		__HAL_TIM_SET_COUNTER(&htim1, 0x0000);
 80002d0:	6273      	str	r3, [r6, #36]	@ 0x24
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002d2:	0028      	movs	r0, r5
		__HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 80002d4:	627b      	str	r3, [r7, #36]	@ 0x24
		 HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80002d6:	f001 fb3d 	bl	8001954 <HAL_TIM_PWM_Start>
}
 80002da:	e7a5      	b.n	8000228 <HAL_TIM_PeriodElapsedCallback+0x10>
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 80002dc:	4b18      	ldr	r3, [pc, #96]	@ (8000340 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d001      	beq.n	80002e8 <HAL_TIM_PeriodElapsedCallback+0xd0>
 80002e4:	0013      	movs	r3, r2
 80002e6:	e7e8      	b.n	80002ba <HAL_TIM_PeriodElapsedCallback+0xa2>
			freq = freq_old1;
 80002e8:	4b16      	ldr	r3, [pc, #88]	@ (8000344 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80002ea:	601a      	str	r2, [r3, #0]
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 80002ec:	0013      	movs	r3, r2
 80002ee:	e7e4      	b.n	80002ba <HAL_TIM_PeriodElapsedCallback+0xa2>
		if (count == 3){
 80002f0:	2903      	cmp	r1, #3
 80002f2:	d1e0      	bne.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
			count = 0;
 80002f4:	4649      	mov	r1, r9
 80002f6:	4644      	mov	r4, r8
 80002f8:	600c      	str	r4, [r1, #0]
					if (current_freq > freq_old3) {
 80002fa:	4911      	ldr	r1, [pc, #68]	@ (8000340 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80002fc:	680c      	ldr	r4, [r1, #0]
 80002fe:	42a0      	cmp	r0, r4
 8000300:	d9d9      	bls.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
						freq_old3 = current_freq;
 8000302:	6008      	str	r0, [r1, #0]
 8000304:	e7d7      	b.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
			if (current_freq > freq_old1) {
 8000306:	4298      	cmp	r0, r3
 8000308:	d9d5      	bls.n	80002b6 <HAL_TIM_PeriodElapsedCallback+0x9e>
				freq_old1 = current_freq;
 800030a:	4653      	mov	r3, sl
 800030c:	6018      	str	r0, [r3, #0]
		if ((freq_old1==freq_old2)&&(freq_old2==freq_old3)) {
 800030e:	4290      	cmp	r0, r2
 8000310:	d1dc      	bne.n	80002cc <HAL_TIM_PeriodElapsedCallback+0xb4>
 8000312:	4b0b      	ldr	r3, [pc, #44]	@ (8000340 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4283      	cmp	r3, r0
 8000318:	d1d8      	bne.n	80002cc <HAL_TIM_PeriodElapsedCallback+0xb4>
			freq = freq_old1;
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800031c:	6013      	str	r3, [r2, #0]
		if (current_freq<freq_old1) freq_old1=freq_old2=freq_old3=0;
 800031e:	e7d5      	b.n	80002cc <HAL_TIM_PeriodElapsedCallback+0xb4>
 8000320:	20000028 	.word	0x20000028
 8000324:	50000400 	.word	0x50000400
 8000328:	200000c0 	.word	0x200000c0
 800032c:	20000074 	.word	0x20000074
 8000330:	2000011c 	.word	0x2000011c
 8000334:	20000118 	.word	0x20000118
 8000338:	20000124 	.word	0x20000124
 800033c:	20000128 	.word	0x20000128
 8000340:	20000120 	.word	0x20000120
 8000344:	2000012c 	.word	0x2000012c

08000348 <SetBand>:

void SetBand(){
	if ((freq >= 9)&&(freq <= 29)) {flag_band=1; freq = 0;}
 8000348:	4a2e      	ldr	r2, [pc, #184]	@ (8000404 <SetBand+0xbc>)
 800034a:	6813      	ldr	r3, [r2, #0]
 800034c:	0019      	movs	r1, r3
 800034e:	3909      	subs	r1, #9
 8000350:	2914      	cmp	r1, #20
 8000352:	d80d      	bhi.n	8000370 <SetBand+0x28>
 8000354:	2101      	movs	r1, #1
 8000356:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <SetBand+0xc0>)
 8000358:	6019      	str	r1, [r3, #0]
 800035a:	2100      	movs	r1, #0
 800035c:	6011      	str	r1, [r2, #0]
	if ((freq >= 90)&&(freq <= 110)) {flag_band=4; freq = 0;}
	if ((freq >= 130)&&(freq <=150)) {flag_band=5; freq = 0;}
	if ((freq >= 170)&&(freq <= 190)) {flag_band=6; freq = 0;}
	if ((freq >= 200)&&(freq <= 220)) {flag_band=7; freq = 0;}
	if ((freq >= 230)&&(freq <= 310)) {flag_band=8; freq = 0;}
	if (previous_flag_band == flag_band) flag_ptt = 1; else flag_ptt  = 0;
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	4b2a      	ldr	r3, [pc, #168]	@ (800040c <SetBand+0xc4>)
 8000362:	492b      	ldr	r1, [pc, #172]	@ (8000410 <SetBand+0xc8>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	425a      	negs	r2, r3
 800036a:	4153      	adcs	r3, r2
 800036c:	600b      	str	r3, [r1, #0]
}
 800036e:	4770      	bx	lr
	if ((freq >= 30)&&(freq <= 45)) {flag_band=2; freq = 0;}
 8000370:	0019      	movs	r1, r3
 8000372:	391e      	subs	r1, #30
 8000374:	290f      	cmp	r1, #15
 8000376:	d805      	bhi.n	8000384 <SetBand+0x3c>
 8000378:	2102      	movs	r1, #2
 800037a:	4b23      	ldr	r3, [pc, #140]	@ (8000408 <SetBand+0xc0>)
 800037c:	6019      	str	r1, [r3, #0]
 800037e:	2100      	movs	r1, #0
 8000380:	6011      	str	r1, [r2, #0]
	if ((freq >= 130)&&(freq <=150)) {flag_band=5; freq = 0;}
 8000382:	e7ec      	b.n	800035e <SetBand+0x16>
	if ((freq >= 65)&&(freq <= 75)) {flag_band=3; freq = 0;}
 8000384:	0019      	movs	r1, r3
 8000386:	3941      	subs	r1, #65	@ 0x41
 8000388:	290a      	cmp	r1, #10
 800038a:	d805      	bhi.n	8000398 <SetBand+0x50>
 800038c:	2103      	movs	r1, #3
 800038e:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <SetBand+0xc0>)
 8000390:	6019      	str	r1, [r3, #0]
 8000392:	2100      	movs	r1, #0
 8000394:	6011      	str	r1, [r2, #0]
	if ((freq >= 170)&&(freq <= 190)) {flag_band=6; freq = 0;}
 8000396:	e7e2      	b.n	800035e <SetBand+0x16>
	if ((freq >= 90)&&(freq <= 110)) {flag_band=4; freq = 0;}
 8000398:	0019      	movs	r1, r3
 800039a:	395a      	subs	r1, #90	@ 0x5a
 800039c:	2914      	cmp	r1, #20
 800039e:	d805      	bhi.n	80003ac <SetBand+0x64>
 80003a0:	2104      	movs	r1, #4
 80003a2:	4b19      	ldr	r3, [pc, #100]	@ (8000408 <SetBand+0xc0>)
 80003a4:	6019      	str	r1, [r3, #0]
 80003a6:	2100      	movs	r1, #0
 80003a8:	6011      	str	r1, [r2, #0]
	if ((freq >= 200)&&(freq <= 220)) {flag_band=7; freq = 0;}
 80003aa:	e7d8      	b.n	800035e <SetBand+0x16>
	if ((freq >= 130)&&(freq <=150)) {flag_band=5; freq = 0;}
 80003ac:	0019      	movs	r1, r3
 80003ae:	3982      	subs	r1, #130	@ 0x82
 80003b0:	2914      	cmp	r1, #20
 80003b2:	d805      	bhi.n	80003c0 <SetBand+0x78>
 80003b4:	2105      	movs	r1, #5
 80003b6:	4b14      	ldr	r3, [pc, #80]	@ (8000408 <SetBand+0xc0>)
 80003b8:	6019      	str	r1, [r3, #0]
 80003ba:	2100      	movs	r1, #0
 80003bc:	6011      	str	r1, [r2, #0]
	if ((freq >= 230)&&(freq <= 310)) {flag_band=8; freq = 0;}
 80003be:	e7ce      	b.n	800035e <SetBand+0x16>
	if ((freq >= 170)&&(freq <= 190)) {flag_band=6; freq = 0;}
 80003c0:	0019      	movs	r1, r3
 80003c2:	39aa      	subs	r1, #170	@ 0xaa
 80003c4:	2914      	cmp	r1, #20
 80003c6:	d805      	bhi.n	80003d4 <SetBand+0x8c>
 80003c8:	2106      	movs	r1, #6
 80003ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000408 <SetBand+0xc0>)
 80003cc:	6019      	str	r1, [r3, #0]
 80003ce:	2100      	movs	r1, #0
 80003d0:	6011      	str	r1, [r2, #0]
	if ((freq >= 230)&&(freq <= 310)) {flag_band=8; freq = 0;}
 80003d2:	e7c4      	b.n	800035e <SetBand+0x16>
	if ((freq >= 200)&&(freq <= 220)) {flag_band=7; freq = 0;}
 80003d4:	0019      	movs	r1, r3
 80003d6:	39c8      	subs	r1, #200	@ 0xc8
 80003d8:	2914      	cmp	r1, #20
 80003da:	d806      	bhi.n	80003ea <SetBand+0xa2>
 80003dc:	2107      	movs	r1, #7
 80003de:	4b0a      	ldr	r3, [pc, #40]	@ (8000408 <SetBand+0xc0>)
 80003e0:	6019      	str	r1, [r3, #0]
 80003e2:	2300      	movs	r3, #0
 80003e4:	6013      	str	r3, [r2, #0]
 80003e6:	2207      	movs	r2, #7
 80003e8:	e7ba      	b.n	8000360 <SetBand+0x18>
	if ((freq >= 230)&&(freq <= 310)) {flag_band=8; freq = 0;}
 80003ea:	3be6      	subs	r3, #230	@ 0xe6
 80003ec:	2b50      	cmp	r3, #80	@ 0x50
 80003ee:	d806      	bhi.n	80003fe <SetBand+0xb6>
 80003f0:	2108      	movs	r1, #8
 80003f2:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <SetBand+0xc0>)
 80003f4:	6019      	str	r1, [r3, #0]
 80003f6:	2300      	movs	r3, #0
 80003f8:	6013      	str	r3, [r2, #0]
 80003fa:	2208      	movs	r2, #8
 80003fc:	e7b0      	b.n	8000360 <SetBand+0x18>
 80003fe:	4b02      	ldr	r3, [pc, #8]	@ (8000408 <SetBand+0xc0>)
 8000400:	e7ad      	b.n	800035e <SetBand+0x16>
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	2000012c 	.word	0x2000012c
 8000408:	20000114 	.word	0x20000114
 800040c:	20000110 	.word	0x20000110
 8000410:	2000010c 	.word	0x2000010c

08000414 <SetOuts>:


void SetOuts() {
	if (flag_band == 1) {
 8000414:	4b65      	ldr	r3, [pc, #404]	@ (80005ac <SetOuts+0x198>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d05a      	beq.n	80004d2 <SetOuts+0xbe>
		previous_flag_band = flag_band;
		ResetAllOuts();
		LL_GPIO_SetOutputPin(BAND1_GPIO_Port, BAND1_Pin);
		flag_ptt = 1;
	}
	if (flag_band == 2) {
 800041c:	2b02      	cmp	r3, #2
 800041e:	d117      	bne.n	8000450 <SetOuts+0x3c>
		previous_flag_band = flag_band;
 8000420:	4a63      	ldr	r2, [pc, #396]	@ (80005b0 <SetOuts+0x19c>)
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000422:	2004      	movs	r0, #4
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	22a0      	movs	r2, #160	@ 0xa0
 8000428:	2101      	movs	r1, #1
 800042a:	05d2      	lsls	r2, r2, #23
 800042c:	6291      	str	r1, [r2, #40]	@ 0x28
 800042e:	6293      	str	r3, [r2, #40]	@ 0x28
 8000430:	6290      	str	r0, [r2, #40]	@ 0x28
 8000432:	3004      	adds	r0, #4
 8000434:	6290      	str	r0, [r2, #40]	@ 0x28
 8000436:	3008      	adds	r0, #8
 8000438:	6290      	str	r0, [r2, #40]	@ 0x28
 800043a:	3010      	adds	r0, #16
 800043c:	6290      	str	r0, [r2, #40]	@ 0x28
 800043e:	3060      	adds	r0, #96	@ 0x60
 8000440:	6290      	str	r0, [r2, #40]	@ 0x28
 8000442:	2080      	movs	r0, #128	@ 0x80
 8000444:	0100      	lsls	r0, r0, #4
 8000446:	6290      	str	r0, [r2, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000448:	6193      	str	r3, [r2, #24]
	}
	if (flag_band == 4) {
		previous_flag_band = flag_band;
		ResetAllOuts();
		LL_GPIO_SetOutputPin(BAND4_GPIO_Port, BAND4_Pin);
		flag_ptt = 1;
 800044a:	4b5a      	ldr	r3, [pc, #360]	@ (80005b4 <SetOuts+0x1a0>)
 800044c:	6019      	str	r1, [r3, #0]
	if (flag_band == 0) {
		flag_ptt = 0;
		ResetAllOuts();
	}

}
 800044e:	4770      	bx	lr
	if (flag_band == 3) {
 8000450:	2b03      	cmp	r3, #3
 8000452:	d016      	beq.n	8000482 <SetOuts+0x6e>
	if (flag_band == 4) {
 8000454:	2b04      	cmp	r3, #4
 8000456:	d054      	beq.n	8000502 <SetOuts+0xee>
	if (flag_band == 5) {
 8000458:	2b05      	cmp	r3, #5
 800045a:	d02b      	beq.n	80004b4 <SetOuts+0xa0>
	if (flag_band == 6) {
 800045c:	2b06      	cmp	r3, #6
 800045e:	d15d      	bne.n	800051c <SetOuts+0x108>
		previous_flag_band = flag_band;
 8000460:	4a53      	ldr	r2, [pc, #332]	@ (80005b0 <SetOuts+0x19c>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8000462:	2102      	movs	r1, #2
 8000464:	6013      	str	r3, [r2, #0]
 8000466:	23a0      	movs	r3, #160	@ 0xa0
 8000468:	2201      	movs	r2, #1
 800046a:	05db      	lsls	r3, r3, #23
 800046c:	629a      	str	r2, [r3, #40]	@ 0x28
 800046e:	6299      	str	r1, [r3, #40]	@ 0x28
 8000470:	3102      	adds	r1, #2
 8000472:	6299      	str	r1, [r3, #40]	@ 0x28
 8000474:	3104      	adds	r1, #4
 8000476:	6299      	str	r1, [r3, #40]	@ 0x28
 8000478:	3108      	adds	r1, #8
 800047a:	6299      	str	r1, [r3, #40]	@ 0x28
 800047c:	3110      	adds	r1, #16
 800047e:	6299      	str	r1, [r3, #40]	@ 0x28
 8000480:	e00f      	b.n	80004a2 <SetOuts+0x8e>
		previous_flag_band = flag_band;
 8000482:	4a4b      	ldr	r2, [pc, #300]	@ (80005b0 <SetOuts+0x19c>)
 8000484:	2102      	movs	r1, #2
 8000486:	6013      	str	r3, [r2, #0]
 8000488:	23a0      	movs	r3, #160	@ 0xa0
 800048a:	2201      	movs	r2, #1
 800048c:	2008      	movs	r0, #8
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	629a      	str	r2, [r3, #40]	@ 0x28
 8000492:	6299      	str	r1, [r3, #40]	@ 0x28
 8000494:	3102      	adds	r1, #2
 8000496:	6299      	str	r1, [r3, #40]	@ 0x28
 8000498:	6298      	str	r0, [r3, #40]	@ 0x28
 800049a:	3008      	adds	r0, #8
 800049c:	6298      	str	r0, [r3, #40]	@ 0x28
 800049e:	2020      	movs	r0, #32
 80004a0:	6298      	str	r0, [r3, #40]	@ 0x28
 80004a2:	2080      	movs	r0, #128	@ 0x80
 80004a4:	6298      	str	r0, [r3, #40]	@ 0x28
 80004a6:	2080      	movs	r0, #128	@ 0x80
 80004a8:	0100      	lsls	r0, r0, #4
 80004aa:	6298      	str	r0, [r3, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004ac:	6199      	str	r1, [r3, #24]
		flag_ptt = 1;
 80004ae:	4b41      	ldr	r3, [pc, #260]	@ (80005b4 <SetOuts+0x1a0>)
 80004b0:	601a      	str	r2, [r3, #0]
	if (flag_band == 0) {
 80004b2:	e7cc      	b.n	800044e <SetOuts+0x3a>
		previous_flag_band = flag_band;
 80004b4:	4a3e      	ldr	r2, [pc, #248]	@ (80005b0 <SetOuts+0x19c>)
  WRITE_REG(GPIOx->BRR, PinMask);
 80004b6:	2102      	movs	r1, #2
 80004b8:	6013      	str	r3, [r2, #0]
 80004ba:	23a0      	movs	r3, #160	@ 0xa0
 80004bc:	2201      	movs	r2, #1
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80004c2:	6299      	str	r1, [r3, #40]	@ 0x28
 80004c4:	3102      	adds	r1, #2
 80004c6:	6299      	str	r1, [r3, #40]	@ 0x28
 80004c8:	3104      	adds	r1, #4
 80004ca:	6299      	str	r1, [r3, #40]	@ 0x28
 80004cc:	3108      	adds	r1, #8
 80004ce:	6299      	str	r1, [r3, #40]	@ 0x28
 80004d0:	e7e5      	b.n	800049e <SetOuts+0x8a>
		previous_flag_band = flag_band;
 80004d2:	4a37      	ldr	r2, [pc, #220]	@ (80005b0 <SetOuts+0x19c>)
 80004d4:	2102      	movs	r1, #2
 80004d6:	6013      	str	r3, [r2, #0]
 80004d8:	22a0      	movs	r2, #160	@ 0xa0
 80004da:	05d2      	lsls	r2, r2, #23
 80004dc:	6293      	str	r3, [r2, #40]	@ 0x28
 80004de:	6291      	str	r1, [r2, #40]	@ 0x28
 80004e0:	3102      	adds	r1, #2
 80004e2:	6291      	str	r1, [r2, #40]	@ 0x28
 80004e4:	3104      	adds	r1, #4
 80004e6:	6291      	str	r1, [r2, #40]	@ 0x28
 80004e8:	3108      	adds	r1, #8
 80004ea:	6291      	str	r1, [r2, #40]	@ 0x28
 80004ec:	3110      	adds	r1, #16
 80004ee:	6291      	str	r1, [r2, #40]	@ 0x28
 80004f0:	3160      	adds	r1, #96	@ 0x60
 80004f2:	6291      	str	r1, [r2, #40]	@ 0x28
 80004f4:	2180      	movs	r1, #128	@ 0x80
 80004f6:	0109      	lsls	r1, r1, #4
 80004f8:	6291      	str	r1, [r2, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004fa:	6193      	str	r3, [r2, #24]
		flag_ptt = 1;
 80004fc:	4a2d      	ldr	r2, [pc, #180]	@ (80005b4 <SetOuts+0x1a0>)
 80004fe:	6013      	str	r3, [r2, #0]
	if (flag_band == 8) {
 8000500:	e7a5      	b.n	800044e <SetOuts+0x3a>
		previous_flag_band = flag_band;
 8000502:	4a2b      	ldr	r2, [pc, #172]	@ (80005b0 <SetOuts+0x19c>)
  WRITE_REG(GPIOx->BRR, PinMask);
 8000504:	2002      	movs	r0, #2
 8000506:	6013      	str	r3, [r2, #0]
 8000508:	22a0      	movs	r2, #160	@ 0xa0
 800050a:	2101      	movs	r1, #1
 800050c:	05d2      	lsls	r2, r2, #23
 800050e:	6291      	str	r1, [r2, #40]	@ 0x28
 8000510:	6290      	str	r0, [r2, #40]	@ 0x28
 8000512:	6293      	str	r3, [r2, #40]	@ 0x28
 8000514:	3304      	adds	r3, #4
 8000516:	6293      	str	r3, [r2, #40]	@ 0x28
 8000518:	300e      	adds	r0, #14
 800051a:	e78d      	b.n	8000438 <SetOuts+0x24>
	if (flag_band == 7) {
 800051c:	2b07      	cmp	r3, #7
 800051e:	d112      	bne.n	8000546 <SetOuts+0x132>
		previous_flag_band = flag_band;
 8000520:	4a23      	ldr	r2, [pc, #140]	@ (80005b0 <SetOuts+0x19c>)
 8000522:	2102      	movs	r1, #2
 8000524:	6013      	str	r3, [r2, #0]
 8000526:	23a0      	movs	r3, #160	@ 0xa0
 8000528:	2201      	movs	r2, #1
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	629a      	str	r2, [r3, #40]	@ 0x28
 800052e:	6299      	str	r1, [r3, #40]	@ 0x28
 8000530:	3102      	adds	r1, #2
 8000532:	6299      	str	r1, [r3, #40]	@ 0x28
 8000534:	3104      	adds	r1, #4
 8000536:	6299      	str	r1, [r3, #40]	@ 0x28
 8000538:	3108      	adds	r1, #8
 800053a:	6299      	str	r1, [r3, #40]	@ 0x28
 800053c:	3110      	adds	r1, #16
 800053e:	6299      	str	r1, [r3, #40]	@ 0x28
 8000540:	3160      	adds	r1, #96	@ 0x60
 8000542:	6299      	str	r1, [r3, #40]	@ 0x28
 8000544:	e7af      	b.n	80004a6 <SetOuts+0x92>
	if (flag_band == 8) {
 8000546:	2b08      	cmp	r3, #8
 8000548:	d117      	bne.n	800057a <SetOuts+0x166>
		previous_flag_band = flag_band;
 800054a:	4a19      	ldr	r2, [pc, #100]	@ (80005b0 <SetOuts+0x19c>)
 800054c:	2101      	movs	r1, #1
 800054e:	6013      	str	r3, [r2, #0]
 8000550:	22a0      	movs	r2, #160	@ 0xa0
 8000552:	2002      	movs	r0, #2
 8000554:	05d2      	lsls	r2, r2, #23
 8000556:	6291      	str	r1, [r2, #40]	@ 0x28
 8000558:	6290      	str	r0, [r2, #40]	@ 0x28
 800055a:	3002      	adds	r0, #2
 800055c:	6290      	str	r0, [r2, #40]	@ 0x28
 800055e:	6293      	str	r3, [r2, #40]	@ 0x28
 8000560:	3308      	adds	r3, #8
 8000562:	6293      	str	r3, [r2, #40]	@ 0x28
 8000564:	3310      	adds	r3, #16
 8000566:	6293      	str	r3, [r2, #40]	@ 0x28
 8000568:	3360      	adds	r3, #96	@ 0x60
 800056a:	6293      	str	r3, [r2, #40]	@ 0x28
 800056c:	2380      	movs	r3, #128	@ 0x80
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	6293      	str	r3, [r2, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000572:	6193      	str	r3, [r2, #24]
		flag_ptt = 1;
 8000574:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <SetOuts+0x1a0>)
 8000576:	6019      	str	r1, [r3, #0]
	if (flag_band == 0) {
 8000578:	e769      	b.n	800044e <SetOuts+0x3a>
 800057a:	2b00      	cmp	r3, #0
 800057c:	d000      	beq.n	8000580 <SetOuts+0x16c>
 800057e:	e766      	b.n	800044e <SetOuts+0x3a>
		flag_ptt = 0;
 8000580:	4a0c      	ldr	r2, [pc, #48]	@ (80005b4 <SetOuts+0x1a0>)
 8000582:	6013      	str	r3, [r2, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000584:	23a0      	movs	r3, #160	@ 0xa0
 8000586:	2201      	movs	r2, #1
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	629a      	str	r2, [r3, #40]	@ 0x28
 800058c:	3201      	adds	r2, #1
 800058e:	629a      	str	r2, [r3, #40]	@ 0x28
 8000590:	3202      	adds	r2, #2
 8000592:	629a      	str	r2, [r3, #40]	@ 0x28
 8000594:	3204      	adds	r2, #4
 8000596:	629a      	str	r2, [r3, #40]	@ 0x28
 8000598:	3208      	adds	r2, #8
 800059a:	629a      	str	r2, [r3, #40]	@ 0x28
 800059c:	3210      	adds	r2, #16
 800059e:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a0:	3260      	adds	r2, #96	@ 0x60
 80005a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	0112      	lsls	r2, r2, #4
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80005aa:	e750      	b.n	800044e <SetOuts+0x3a>
 80005ac:	20000114 	.word	0x20000114
 80005b0:	20000110 	.word	0x20000110
 80005b4:	2000010c 	.word	0x2000010c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b500      	push	{lr}
 80005ba:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005bc:	2234      	movs	r2, #52	@ 0x34
 80005be:	2100      	movs	r1, #0
 80005c0:	a805      	add	r0, sp, #20
 80005c2:	f001 ffaf 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2210      	movs	r2, #16
 80005c8:	2100      	movs	r1, #0
 80005ca:	4668      	mov	r0, sp
 80005cc:	f001 ffaa 	bl	8002524 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2080      	movs	r0, #128	@ 0x80
 80005d2:	0080      	lsls	r0, r0, #2
 80005d4:	f000 fcca 	bl	8000f6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 80005e0:	3306      	adds	r3, #6
 80005e2:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ec:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ee:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f2:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005f4:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f6:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005fa:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80005fe:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000600:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f000 fce3 	bl	8000fcc <HAL_RCC_OscConfig>
 8000606:	2800      	cmp	r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x56>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	e7fe      	b.n	800060c <SystemClock_Config+0x54>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	2207      	movs	r2, #7
 8000610:	2302      	movs	r3, #2
 8000612:	9200      	str	r2, [sp, #0]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	2102      	movs	r1, #2
 800061c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	9202      	str	r2, [sp, #8]
 8000620:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000622:	f000 ff75 	bl	8001510 <HAL_RCC_ClockConfig>
 8000626:	2800      	cmp	r0, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0x76>
 800062a:	b672      	cpsid	i
  while (1)
 800062c:	e7fe      	b.n	800062c <SystemClock_Config+0x74>
}
 800062e:	b013      	add	sp, #76	@ 0x4c
 8000630:	bd00      	pop	{pc}
 8000632:	46c0      	nop			@ (mov r8, r8)

08000634 <main>:
{
 8000634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000636:	46de      	mov	lr, fp
 8000638:	4657      	mov	r7, sl
 800063a:	464e      	mov	r6, r9
 800063c:	4645      	mov	r5, r8
 800063e:	b5e0      	push	{r5, r6, r7, lr}
 8000640:	b09f      	sub	sp, #124	@ 0x7c
  HAL_Init();
 8000642:	f000 fb2b 	bl	8000c9c <HAL_Init>
  SystemClock_Config();
 8000646:	f7ff ffb7 	bl	80005b8 <SystemClock_Config>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	2214      	movs	r2, #20
 800064c:	2100      	movs	r1, #0
 800064e:	a811      	add	r0, sp, #68	@ 0x44
 8000650:	f001 ff68 	bl	8002524 <memset>
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000654:	2102      	movs	r1, #2
 8000656:	2704      	movs	r7, #4
 8000658:	2501      	movs	r5, #1
 800065a:	2480      	movs	r4, #128	@ 0x80
 800065c:	4bb6      	ldr	r3, [pc, #728]	@ (8000938 <main+0x304>)
 800065e:	2080      	movs	r0, #128	@ 0x80
 8000660:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000662:	0224      	lsls	r4, r4, #8
 8000664:	430a      	orrs	r2, r1
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066a:	26a0      	movs	r6, #160	@ 0xa0
 800066c:	400a      	ands	r2, r1
 800066e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000670:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->IOPENR, Periphs);
 8000672:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000674:	4681      	mov	r9, r0
 8000676:	433a      	orrs	r2, r7
 8000678:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800067a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067c:	05f6      	lsls	r6, r6, #23
 800067e:	403a      	ands	r2, r7
 8000680:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000682:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->IOPENR, Periphs);
 8000684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000686:	4688      	mov	r8, r1
 8000688:	432a      	orrs	r2, r5
 800068a:	635a      	str	r2, [r3, #52]	@ 0x34
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 800068c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068e:	2210      	movs	r2, #16
 8000690:	402b      	ands	r3, r5
 8000692:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8000694:	9b03      	ldr	r3, [sp, #12]
 8000696:	4ba9      	ldr	r3, [pc, #676]	@ (800093c <main+0x308>)
 8000698:	629c      	str	r4, [r3, #40]	@ 0x28
 800069a:	469b      	mov	fp, r3
 800069c:	000b      	movs	r3, r1
 800069e:	62b5      	str	r5, [r6, #40]	@ 0x28
 80006a0:	3306      	adds	r3, #6
 80006a2:	62b1      	str	r1, [r6, #40]	@ 0x28
 80006a4:	311e      	adds	r1, #30
 80006a6:	62b7      	str	r7, [r6, #40]	@ 0x28
 80006a8:	62b3      	str	r3, [r6, #40]	@ 0x28
 80006aa:	62b2      	str	r2, [r6, #40]	@ 0x28
 80006ac:	62b1      	str	r1, [r6, #40]	@ 0x28
 80006ae:	62b0      	str	r0, [r6, #40]	@ 0x28
 80006b0:	48a3      	ldr	r0, [pc, #652]	@ (8000940 <main+0x30c>)
  GPIO_InitStruct.Pin = PTT_IN_Pin;
 80006b2:	464b      	mov	r3, r9
 80006b4:	6285      	str	r5, [r0, #40]	@ 0x28
 80006b6:	4682      	mov	sl, r0
 80006b8:	2080      	movs	r0, #128	@ 0x80
 80006ba:	0100      	lsls	r0, r0, #4
 80006bc:	62b0      	str	r0, [r6, #40]	@ 0x28
  LL_GPIO_Init(PTT_IN_GPIO_Port, &GPIO_InitStruct);
 80006be:	a910      	add	r1, sp, #64	@ 0x40
 80006c0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = PTT_IN_Pin;
 80006c2:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80006c4:	9514      	str	r5, [sp, #80]	@ 0x50
  LL_GPIO_Init(PTT_IN_GPIO_Port, &GPIO_InitStruct);
 80006c6:	f001 fe51 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = PTT_OUT_Pin;
 80006ca:	9410      	str	r4, [sp, #64]	@ 0x40
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006cc:	2400      	movs	r4, #0
  LL_GPIO_Init(PTT_OUT_GPIO_Port, &GPIO_InitStruct);
 80006ce:	a910      	add	r1, sp, #64	@ 0x40
 80006d0:	4658      	mov	r0, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006d2:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d4:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d6:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006d8:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(PTT_OUT_GPIO_Port, &GPIO_InitStruct);
 80006da:	f001 fe47 	bl	800236c <LL_GPIO_Init>
  LL_GPIO_Init(BAND1_GPIO_Port, &GPIO_InitStruct);
 80006de:	0030      	movs	r0, r6
 80006e0:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = BAND1_Pin;
 80006e2:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006e4:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006e6:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006e8:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006ea:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND1_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f001 fe3e 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND2_Pin;
 80006f0:	4643      	mov	r3, r8
  LL_GPIO_Init(BAND2_GPIO_Port, &GPIO_InitStruct);
 80006f2:	0030      	movs	r0, r6
 80006f4:	a910      	add	r1, sp, #64	@ 0x40
  GPIO_InitStruct.Pin = BAND2_Pin;
 80006f6:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f8:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006fa:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fc:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fe:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND2_GPIO_Port, &GPIO_InitStruct);
 8000700:	f001 fe34 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND3_Pin;
 8000704:	9710      	str	r7, [sp, #64]	@ 0x40
  LL_GPIO_Init(BAND3_GPIO_Port, &GPIO_InitStruct);
 8000706:	af10      	add	r7, sp, #64	@ 0x40
 8000708:	0039      	movs	r1, r7
 800070a:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800070c:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800070e:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000710:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000712:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND3_GPIO_Port, &GPIO_InitStruct);
 8000714:	f001 fe2a 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND4_Pin;
 8000718:	2308      	movs	r3, #8
  LL_GPIO_Init(BAND4_GPIO_Port, &GPIO_InitStruct);
 800071a:	0039      	movs	r1, r7
 800071c:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND4_Pin;
 800071e:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000720:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000722:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000724:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000726:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND4_GPIO_Port, &GPIO_InitStruct);
 8000728:	f001 fe20 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND5_Pin;
 800072c:	2210      	movs	r2, #16
  LL_GPIO_Init(BAND5_GPIO_Port, &GPIO_InitStruct);
 800072e:	0039      	movs	r1, r7
 8000730:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND5_Pin;
 8000732:	9210      	str	r2, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000734:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000736:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000738:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800073a:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND5_GPIO_Port, &GPIO_InitStruct);
 800073c:	f001 fe16 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND6_Pin;
 8000740:	2120      	movs	r1, #32
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 8000742:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND6_Pin;
 8000744:	9110      	str	r1, [sp, #64]	@ 0x40
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 8000746:	0039      	movs	r1, r7
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000748:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800074a:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800074c:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800074e:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND6_GPIO_Port, &GPIO_InitStruct);
 8000750:	f001 fe0c 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND7_Pin;
 8000754:	464b      	mov	r3, r9
  LL_GPIO_Init(BAND7_GPIO_Port, &GPIO_InitStruct);
 8000756:	0039      	movs	r1, r7
 8000758:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BAND7_Pin;
 800075a:	9310      	str	r3, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800075c:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800075e:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000760:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000762:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND7_GPIO_Port, &GPIO_InitStruct);
 8000764:	f001 fe02 	bl	800236c <LL_GPIO_Init>
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000768:	0039      	movs	r1, r7
 800076a:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = LED_Pin;
 800076c:	9510      	str	r5, [sp, #64]	@ 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800076e:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000770:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000772:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000774:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000776:	f001 fdf9 	bl	800236c <LL_GPIO_Init>
  GPIO_InitStruct.Pin = BAND8_Pin;
 800077a:	2080      	movs	r0, #128	@ 0x80
 800077c:	0100      	lsls	r0, r0, #4
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 800077e:	0039      	movs	r1, r7
  GPIO_InitStruct.Pin = BAND8_Pin;
 8000780:	9010      	str	r0, [sp, #64]	@ 0x40
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 8000782:	0030      	movs	r0, r6
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000784:	9511      	str	r5, [sp, #68]	@ 0x44
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000786:	9412      	str	r4, [sp, #72]	@ 0x48
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000788:	9413      	str	r4, [sp, #76]	@ 0x4c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800078a:	9414      	str	r4, [sp, #80]	@ 0x50
  LL_GPIO_Init(BAND8_GPIO_Port, &GPIO_InitStruct);
 800078c:	f001 fdee 	bl	800236c <LL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000790:	2210      	movs	r2, #16
 8000792:	2100      	movs	r1, #0
 8000794:	a808      	add	r0, sp, #32
 8000796:	f001 fec5 	bl	8002524 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800079a:	2214      	movs	r2, #20
 800079c:	2100      	movs	r1, #0
 800079e:	0038      	movs	r0, r7
 80007a0:	f001 fec0 	bl	8002524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a4:	220c      	movs	r2, #12
 80007a6:	2100      	movs	r1, #0
 80007a8:	a804      	add	r0, sp, #16
 80007aa:	f001 febb 	bl	8002524 <memset>
  htim1.Instance = TIM1;
 80007ae:	4d65      	ldr	r5, [pc, #404]	@ (8000944 <main+0x310>)
 80007b0:	4b65      	ldr	r3, [pc, #404]	@ (8000948 <main+0x314>)
  htim1.Init.Period = 65535;
 80007b2:	4e66      	ldr	r6, [pc, #408]	@ (800094c <main+0x318>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007b4:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 80007b6:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 0;
 80007b8:	606c      	str	r4, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 65535;
 80007bc:	60ee      	str	r6, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c0:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c4:	f000 ff6c 	bl	80016a0 <HAL_TIM_Base_Init>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	d001      	beq.n	80007d0 <main+0x19c>
 80007cc:	b672      	cpsid	i
  while (1)
 80007ce:	e7fe      	b.n	80007ce <main+0x19a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80007d0:	2380      	movs	r3, #128	@ 0x80
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80007d2:	9009      	str	r0, [sp, #36]	@ 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80007d4:	019b      	lsls	r3, r3, #6
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80007d6:	900a      	str	r0, [sp, #40]	@ 0x28
  sClockSourceConfig.ClockFilter = 0;
 80007d8:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007da:	a908      	add	r1, sp, #32
 80007dc:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80007de:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e0:	f001 fb1e 	bl	8001e20 <HAL_TIM_ConfigClockSource>
 80007e4:	2800      	cmp	r0, #0
 80007e6:	d001      	beq.n	80007ec <main+0x1b8>
 80007e8:	b672      	cpsid	i
  while (1)
 80007ea:	e7fe      	b.n	80007ea <main+0x1b6>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80007ec:	2205      	movs	r2, #5
 80007ee:	2360      	movs	r3, #96	@ 0x60
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80007f0:	9012      	str	r0, [sp, #72]	@ 0x48
  sSlaveConfig.TriggerFilter = 0;
 80007f2:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007f4:	a910      	add	r1, sp, #64	@ 0x40
 80007f6:	0028      	movs	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80007f8:	9210      	str	r2, [sp, #64]	@ 0x40
 80007fa:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80007fc:	f001 fbc8 	bl	8001f90 <HAL_TIM_SlaveConfigSynchro>
 8000800:	2800      	cmp	r0, #0
 8000802:	d001      	beq.n	8000808 <main+0x1d4>
 8000804:	b672      	cpsid	i
  while (1)
 8000806:	e7fe      	b.n	8000806 <main+0x1d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000808:	2220      	movs	r2, #32
 800080a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080e:	a904      	add	r1, sp, #16
 8000810:	0028      	movs	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000812:	9204      	str	r2, [sp, #16]
 8000814:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000816:	f001 fd0f 	bl	8002238 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	1e04      	subs	r4, r0, #0
 800081c:	d001      	beq.n	8000822 <main+0x1ee>
 800081e:	b672      	cpsid	i
  while (1)
 8000820:	e7fe      	b.n	8000820 <main+0x1ec>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	0001      	movs	r1, r0
 8000824:	2210      	movs	r2, #16
 8000826:	a808      	add	r0, sp, #32
 8000828:	f001 fe7c 	bl	8002524 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800082c:	2214      	movs	r2, #20
 800082e:	0021      	movs	r1, r4
 8000830:	a810      	add	r0, sp, #64	@ 0x40
 8000832:	f001 fe77 	bl	8002524 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	220c      	movs	r2, #12
 8000838:	0021      	movs	r1, r4
 800083a:	a804      	add	r0, sp, #16
 800083c:	f001 fe72 	bl	8002524 <memset>
  htim3.Instance = TIM3;
 8000840:	4f43      	ldr	r7, [pc, #268]	@ (8000950 <main+0x31c>)
 8000842:	4b44      	ldr	r3, [pc, #272]	@ (8000954 <main+0x320>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000844:	0038      	movs	r0, r7
  htim3.Instance = TIM3;
 8000846:	603b      	str	r3, [r7, #0]
  htim3.Init.Prescaler = 0;
 8000848:	607c      	str	r4, [r7, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	60bc      	str	r4, [r7, #8]
  htim3.Init.Period = 65535;
 800084c:	60fe      	str	r6, [r7, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	613c      	str	r4, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000852:	f000 ff25 	bl	80016a0 <HAL_TIM_Base_Init>
 8000856:	2800      	cmp	r0, #0
 8000858:	d001      	beq.n	800085e <main+0x22a>
 800085a:	b672      	cpsid	i
  while (1)
 800085c:	e7fe      	b.n	800085c <main+0x228>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085e:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000860:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000862:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000864:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000866:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000868:	f001 fada 	bl	8001e20 <HAL_TIM_ConfigClockSource>
 800086c:	2800      	cmp	r0, #0
 800086e:	d001      	beq.n	8000874 <main+0x240>
 8000870:	b672      	cpsid	i
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x23e>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8000874:	2205      	movs	r2, #5
 8000876:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000878:	0038      	movs	r0, r7
 800087a:	a910      	add	r1, sp, #64	@ 0x40
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800087c:	9210      	str	r2, [sp, #64]	@ 0x40
 800087e:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000880:	f001 fb86 	bl	8001f90 <HAL_TIM_SlaveConfigSynchro>
 8000884:	2800      	cmp	r0, #0
 8000886:	d001      	beq.n	800088c <main+0x258>
 8000888:	b672      	cpsid	i
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x256>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088e:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000890:	a904      	add	r1, sp, #16
 8000892:	0038      	movs	r0, r7
 8000894:	f001 fcd0 	bl	8002238 <HAL_TIMEx_MasterConfigSynchronization>
 8000898:	1e06      	subs	r6, r0, #0
 800089a:	d001      	beq.n	80008a0 <main+0x26c>
 800089c:	b672      	cpsid	i
  while (1)
 800089e:	e7fe      	b.n	800089e <main+0x26a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a0:	0001      	movs	r1, r0
 80008a2:	221c      	movs	r2, #28
 80008a4:	a808      	add	r0, sp, #32
 80008a6:	f001 fe3d 	bl	8002524 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008aa:	2234      	movs	r2, #52	@ 0x34
 80008ac:	0031      	movs	r1, r6
 80008ae:	a810      	add	r0, sp, #64	@ 0x40
 80008b0:	f001 fe38 	bl	8002524 <memset>
  htim16.Instance = TIM16;
 80008b4:	4c28      	ldr	r4, [pc, #160]	@ (8000958 <main+0x324>)
 80008b6:	4b29      	ldr	r3, [pc, #164]	@ (800095c <main+0x328>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008b8:	0020      	movs	r0, r4
  htim16.Instance = TIM16;
 80008ba:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 63999;
 80008bc:	4b28      	ldr	r3, [pc, #160]	@ (8000960 <main+0x32c>)
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	60a6      	str	r6, [r4, #8]
  htim16.Init.Prescaler = 63999;
 80008c0:	6063      	str	r3, [r4, #4]
  htim16.Init.Period = 3;
 80008c2:	2303      	movs	r3, #3
 80008c4:	60e3      	str	r3, [r4, #12]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c6:	464b      	mov	r3, r9
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c8:	6126      	str	r6, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 80008ca:	6166      	str	r6, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008cc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80008ce:	f000 fee7 	bl	80016a0 <HAL_TIM_Base_Init>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d001      	beq.n	80008da <main+0x2a6>
 80008d6:	b672      	cpsid	i
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <main+0x2a4>
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80008da:	0020      	movs	r0, r4
 80008dc:	f000 ffba 	bl	8001854 <HAL_TIM_PWM_Init>
 80008e0:	2800      	cmp	r0, #0
 80008e2:	d001      	beq.n	80008e8 <main+0x2b4>
 80008e4:	b672      	cpsid	i
  while (1)
 80008e6:	e7fe      	b.n	80008e6 <main+0x2b2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e8:	2360      	movs	r3, #96	@ 0x60
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ea:	2000      	movs	r0, #0
 80008ec:	2100      	movs	r1, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2200      	movs	r2, #0
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f0:	900c      	str	r0, [sp, #48]	@ 0x30
 80008f2:	910d      	str	r1, [sp, #52]	@ 0x34
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008f6:	0020      	movs	r0, r4
  sConfigOC.Pulse = 4;
 80008f8:	3b5c      	subs	r3, #92	@ 0x5c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	a908      	add	r1, sp, #32
  sConfigOC.Pulse = 4;
 80008fc:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fe:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000900:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000902:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	f001 f8e8 	bl	8001ad8 <HAL_TIM_PWM_ConfigChannel>
 8000908:	2800      	cmp	r0, #0
 800090a:	d001      	beq.n	8000910 <main+0x2dc>
 800090c:	b672      	cpsid	i
  while (1)
 800090e:	e7fe      	b.n	800090e <main+0x2da>
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000910:	2380      	movs	r3, #128	@ 0x80
 8000912:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000914:	9010      	str	r0, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000918:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 800091a:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 800091e:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000920:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000922:	a910      	add	r1, sp, #64	@ 0x40
 8000924:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000926:	9214      	str	r2, [sp, #80]	@ 0x50
 8000928:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800092a:	f001 fcb9 	bl	80022a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800092e:	1e06      	subs	r6, r0, #0
 8000930:	d018      	beq.n	8000964 <main+0x330>
 8000932:	b672      	cpsid	i
  while (1)
 8000934:	e7fe      	b.n	8000934 <main+0x300>
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	40021000 	.word	0x40021000
 800093c:	50000800 	.word	0x50000800
 8000940:	50000400 	.word	0x50000400
 8000944:	200000c0 	.word	0x200000c0
 8000948:	40012c00 	.word	0x40012c00
 800094c:	0000ffff 	.word	0x0000ffff
 8000950:	20000074 	.word	0x20000074
 8000954:	40000400 	.word	0x40000400
 8000958:	20000028 	.word	0x20000028
 800095c:	40014400 	.word	0x40014400
 8000960:	0000f9ff 	.word	0x0000f9ff
  HAL_TIM_MspPostInit(&htim16);
 8000964:	0020      	movs	r0, r4
 8000966:	f000 f8f3 	bl	8000b50 <HAL_TIM_MspPostInit>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800096a:	0031      	movs	r1, r6
 800096c:	2214      	movs	r2, #20
 800096e:	a810      	add	r0, sp, #64	@ 0x40
 8000970:	f001 fdd8 	bl	8002524 <memset>
  SET_BIT(RCC->APBENR2, Periphs);
 8000974:	2180      	movs	r1, #128	@ 0x80
 8000976:	4b2c      	ldr	r3, [pc, #176]	@ (8000a28 <main+0x3f4>)
 8000978:	02c9      	lsls	r1, r1, #11
 800097a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097c:	482b      	ldr	r0, [pc, #172]	@ (8000a2c <main+0x3f8>)
 800097e:	430a      	orrs	r2, r1
 8000980:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8000982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000984:	400b      	ands	r3, r1
 8000986:	21c5      	movs	r1, #197	@ 0xc5
 8000988:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 800098a:	9b08      	ldr	r3, [sp, #32]
 800098c:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <main+0x3fc>)
 800098e:	0089      	lsls	r1, r1, #2
 8000990:	585a      	ldr	r2, [r3, r1]
 8000992:	4002      	ands	r2, r0
 8000994:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000996:	2280      	movs	r2, #128	@ 0x80
 8000998:	03d2      	lsls	r2, r2, #15
 800099a:	601a      	str	r2, [r3, #0]
  TIM_InitStruct.Prescaler = 63999;
 800099c:	2140      	movs	r1, #64	@ 0x40
 800099e:	466a      	mov	r2, sp
 80009a0:	4b24      	ldr	r3, [pc, #144]	@ (8000a34 <main+0x400>)
 80009a2:	1852      	adds	r2, r2, r1
 80009a4:	8013      	strh	r3, [r2, #0]
  TIM_InitStruct.Autoreload = 499;
 80009a6:	23f4      	movs	r3, #244	@ 0xf4
 80009a8:	33ff      	adds	r3, #255	@ 0xff
 80009aa:	9312      	str	r3, [sp, #72]	@ 0x48
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 80009ac:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <main+0x404>)
 80009ae:	0011      	movs	r1, r2
 80009b0:	4698      	mov	r8, r3
 80009b2:	0018      	movs	r0, r3
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80009b4:	9611      	str	r6, [sp, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80009b6:	9613      	str	r6, [sp, #76]	@ 0x4c
  TIM_InitStruct.RepetitionCounter = 0;
 80009b8:	9614      	str	r6, [sp, #80]	@ 0x50
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 80009ba:	f001 fd5d 	bl	8002478 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80009be:	4643      	mov	r3, r8
 80009c0:	2280      	movs	r2, #128	@ 0x80
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4691      	mov	r9, r2
 80009c6:	4313      	orrs	r3, r2
 80009c8:	4642      	mov	r2, r8
 80009ca:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80009cc:	2301      	movs	r3, #1
 80009ce:	4641      	mov	r1, r8
 80009d0:	6812      	ldr	r2, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 80009d2:	0020      	movs	r0, r4
 80009d4:	431a      	orrs	r2, r3
 80009d6:	600a      	str	r2, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80009d8:	68ca      	ldr	r2, [r1, #12]
 80009da:	4313      	orrs	r3, r2
 80009dc:	60cb      	str	r3, [r1, #12]
 80009de:	f000 ff09 	bl	80017f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80009e2:	0020      	movs	r0, r4
 80009e4:	2480      	movs	r4, #128	@ 0x80
 80009e6:	0031      	movs	r1, r6
 80009e8:	f000 ffb4 	bl	8001954 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 80009ec:	0028      	movs	r0, r5
 80009ee:	f000 fed7 	bl	80017a0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80009f2:	0038      	movs	r0, r7
 80009f4:	f000 fed4 	bl	80017a0 <HAL_TIM_Base_Start>
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80009f8:	4d10      	ldr	r5, [pc, #64]	@ (8000a3c <main+0x408>)
 80009fa:	4e11      	ldr	r6, [pc, #68]	@ (8000a40 <main+0x40c>)
  WRITE_REG(GPIOx->BRR, PinMask);
 80009fc:	0224      	lsls	r4, r4, #8
	  SetBand();
 80009fe:	f7ff fca3 	bl	8000348 <SetBand>
	  SetOuts();
 8000a02:	f7ff fd07 	bl	8000414 <SetOuts>
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000a06:	464a      	mov	r2, r9
 8000a08:	692b      	ldr	r3, [r5, #16]
 8000a0a:	4213      	tst	r3, r2
 8000a0c:	d102      	bne.n	8000a14 <main+0x3e0>
	if ((LL_GPIO_IsInputPinSet(PTT_IN_GPIO_Port, PTT_IN_Pin) == 0)&&(flag_ptt)) {
 8000a0e:	6833      	ldr	r3, [r6, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <main+0x3e6>
  WRITE_REG(GPIOx->BRR, PinMask);
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <main+0x410>)
 8000a16:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8000a18:	e7f1      	b.n	80009fe <main+0x3ca>
		LL_mDelay(10);
 8000a1a:	200a      	movs	r0, #10
 8000a1c:	f001 fd6c 	bl	80024f8 <LL_mDelay>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000a20:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <main+0x410>)
 8000a22:	619c      	str	r4, [r3, #24]
}
 8000a24:	e7eb      	b.n	80009fe <main+0x3ca>
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	ff00ffff 	.word	0xff00ffff
 8000a30:	e000e100 	.word	0xe000e100
 8000a34:	fffff9ff 	.word	0xfffff9ff
 8000a38:	40014800 	.word	0x40014800
 8000a3c:	50000400 	.word	0x50000400
 8000a40:	2000010c 	.word	0x2000010c
 8000a44:	50000800 	.word	0x50000800

08000a48 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_MspInit+0x2c>)
{
 8000a4c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000a50:	4311      	orrs	r1, r2
 8000a52:	6419      	str	r1, [r3, #64]	@ 0x40
 8000a54:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8000a56:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	9200      	str	r2, [sp, #0]
 8000a5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a60:	0549      	lsls	r1, r1, #21
 8000a62:	430a      	orrs	r2, r1
 8000a64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a68:	400b      	ands	r3, r1
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	b002      	add	sp, #8
 8000a70:	4770      	bx	lr
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a78:	b530      	push	{r4, r5, lr}
 8000a7a:	0004      	movs	r4, r0
 8000a7c:	b08d      	sub	sp, #52	@ 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	2214      	movs	r2, #20
 8000a80:	2100      	movs	r1, #0
 8000a82:	a806      	add	r0, sp, #24
 8000a84:	f001 fd4e 	bl	8002524 <memset>
  if(htim_base->Instance==TIM1)
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b3c <HAL_TIM_Base_MspInit+0xc4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d024      	beq.n	8000ada <HAL_TIM_Base_MspInit+0x62>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000a90:	4a2b      	ldr	r2, [pc, #172]	@ (8000b40 <HAL_TIM_Base_MspInit+0xc8>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d004      	beq.n	8000aa0 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8000a96:	4a2b      	ldr	r2, [pc, #172]	@ (8000b44 <HAL_TIM_Base_MspInit+0xcc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d00b      	beq.n	8000ab4 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a9c:	b00d      	add	sp, #52	@ 0x34
 8000a9e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	4a29      	ldr	r2, [pc, #164]	@ (8000b48 <HAL_TIM_Base_MspInit+0xd0>)
 8000aa4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000aa6:	4319      	orrs	r1, r3
 8000aa8:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8000aaa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000aac:	4013      	ands	r3, r2
 8000aae:	9304      	str	r3, [sp, #16]
 8000ab0:	9b04      	ldr	r3, [sp, #16]
 8000ab2:	e7f3      	b.n	8000a9c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ab4:	2180      	movs	r1, #128	@ 0x80
 8000ab6:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <HAL_TIM_Base_MspInit+0xd0>)
 8000ab8:	0289      	lsls	r1, r1, #10
 8000aba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000abc:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ac6:	400b      	ands	r3, r1
 8000ac8:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000aca:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000acc:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000ace:	f000 f90b 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000ad2:	2015      	movs	r0, #21
 8000ad4:	f000 f932 	bl	8000d3c <HAL_NVIC_EnableIRQ>
}
 8000ad8:	e7e0      	b.n	8000a9c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ada:	2180      	movs	r1, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2402      	movs	r4, #2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_TIM_Base_MspInit+0xd0>)
 8000ae2:	0109      	lsls	r1, r1, #4
 8000ae4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	641a      	str	r2, [r3, #64]	@ 0x40
 8000aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aee:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000af0:	400a      	ands	r2, r1
 8000af2:	9201      	str	r2, [sp, #4]
 8000af4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	432a      	orrs	r2, r5
 8000afc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000afe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b00:	402a      	ands	r2, r5
 8000b02:	9202      	str	r2, [sp, #8]
 8000b04:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b08:	4322      	orrs	r2, r4
 8000b0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b0e:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4023      	ands	r3, r4
 8000b12:	9303      	str	r3, [sp, #12]
 8000b14:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b16:	2302      	movs	r3, #2
 8000b18:	0152      	lsls	r2, r2, #5
 8000b1a:	9206      	str	r2, [sp, #24]
 8000b1c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b1e:	940a      	str	r4, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f000 f932 	bl	8000d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b24:	2308      	movs	r3, #8
 8000b26:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <HAL_TIM_Base_MspInit+0xd4>)
 8000b2c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b34:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	f000 f927 	bl	8000d88 <HAL_GPIO_Init>
 8000b3a:	e7af      	b.n	8000a9c <HAL_TIM_Base_MspInit+0x24>
 8000b3c:	40012c00 	.word	0x40012c00
 8000b40:	40000400 	.word	0x40000400
 8000b44:	40014400 	.word	0x40014400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	50000400 	.word	0x50000400

08000b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b50:	b510      	push	{r4, lr}
 8000b52:	0004      	movs	r4, r0
 8000b54:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	2214      	movs	r2, #20
 8000b58:	2100      	movs	r1, #0
 8000b5a:	a802      	add	r0, sp, #8
 8000b5c:	f001 fce2 	bl	8002524 <memset>
  if(htim->Instance==TIM16)
 8000b60:	4b0d      	ldr	r3, [pc, #52]	@ (8000b98 <HAL_TIM_MspPostInit+0x48>)
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d001      	beq.n	8000b6c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000b68:	b008      	add	sp, #32
 8000b6a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000b9c <HAL_TIM_MspPostInit+0x4c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	6b51      	ldr	r1, [r2, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	4319      	orrs	r1, r3
 8000b78:	6351      	str	r1, [r2, #52]	@ 0x34
 8000b7a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4013      	ands	r3, r2
 8000b80:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b82:	2240      	movs	r2, #64	@ 0x40
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b86:	2302      	movs	r3, #2
 8000b88:	9202      	str	r2, [sp, #8]
 8000b8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8000b8c:	2305      	movs	r3, #5
 8000b8e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f000 f8fa 	bl	8000d88 <HAL_GPIO_Init>
}
 8000b94:	e7e8      	b.n	8000b68 <HAL_TIM_MspPostInit+0x18>
 8000b96:	46c0      	nop			@ (mov r8, r8)
 8000b98:	40014400 	.word	0x40014400
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler>
 8000ba2:	46c0      	nop			@ (mov r8, r8)

08000ba4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <HardFault_Handler>
 8000ba6:	46c0      	nop			@ (mov r8, r8)

08000ba8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ba8:	4770      	bx	lr
 8000baa:	46c0      	nop			@ (mov r8, r8)

08000bac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8000bac:	4770      	bx	lr
 8000bae:	46c0      	nop			@ (mov r8, r8)

08000bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f887 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bd10      	pop	{r4, pc}

08000bb8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000bb8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000bba:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <TIM16_IRQHandler+0xc>)
 8000bbc:	f001 fa82 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000bc0:	bd10      	pop	{r4, pc}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	20000028 	.word	0x20000028

08000bc8 <TIM17_IRQHandler>:
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000bc8:	2301      	movs	r3, #1
 8000bca:	4a09      	ldr	r2, [pc, #36]	@ (8000bf0 <TIM17_IRQHandler+0x28>)

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000bcc:	b510      	push	{r4, lr}
 8000bce:	6911      	ldr	r1, [r2, #16]
 8000bd0:	420b      	tst	r3, r1
 8000bd2:	d00b      	beq.n	8000bec <TIM17_IRQHandler+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000bd4:	2102      	movs	r1, #2
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000bd6:	2480      	movs	r4, #128	@ 0x80
 8000bd8:	4249      	negs	r1, r1
 8000bda:	6111      	str	r1, [r2, #16]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000bdc:	4905      	ldr	r1, [pc, #20]	@ (8000bf4 <TIM17_IRQHandler+0x2c>)
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000bde:	0264      	lsls	r4, r4, #9
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000be0:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000be2:	0402      	lsls	r2, r0, #16
 8000be4:	4022      	ands	r2, r4
 8000be6:	4383      	bics	r3, r0
 8000be8:	4313      	orrs	r3, r2
 8000bea:	618b      	str	r3, [r1, #24]
	}
  /* USER CODE END TIM17_IRQn 0 */
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000bec:	bd10      	pop	{r4, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	40014800 	.word	0x40014800
 8000bf4:	50000400 	.word	0x50000400

08000bf8 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf8:	4770      	bx	lr
 8000bfa:	46c0      	nop			@ (mov r8, r8)

08000bfc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bfc:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c00:	f7ff fffa 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopForever+0xe>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopForever+0x16>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c2a:	f001 fc83 	bl	8002534 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c2e:	f7ff fd01 	bl	8000634 <main>

08000c32 <LoopForever>:

LoopForever:
  b LoopForever
 8000c32:	e7fe      	b.n	8000c32 <LoopForever>
  ldr   r0, =_estack
 8000c34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c40:	08002674 	.word	0x08002674
  ldr r2, =_sbss
 8000c44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c48:	20000134 	.word	0x20000134

08000c4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_IRQHandler>
	...

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_InitTick+0x40>)
{
 8000c54:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8000c56:	7819      	ldrb	r1, [r3, #0]
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	d101      	bne.n	8000c60 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c60:	20fa      	movs	r0, #250	@ 0xfa
 8000c62:	0080      	lsls	r0, r0, #2
 8000c64:	f7ff fa4c 	bl	8000100 <__udivsi3>
 8000c68:	4d0a      	ldr	r5, [pc, #40]	@ (8000c94 <HAL_InitTick+0x44>)
 8000c6a:	0001      	movs	r1, r0
 8000c6c:	6828      	ldr	r0, [r5, #0]
 8000c6e:	f7ff fa47 	bl	8000100 <__udivsi3>
 8000c72:	f000 f86f 	bl	8000d54 <HAL_SYSTICK_Config>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	2c03      	cmp	r4, #3
 8000c7c:	d8ee      	bhi.n	8000c5c <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7e:	3801      	subs	r0, #1
 8000c80:	2200      	movs	r2, #0
 8000c82:	0021      	movs	r1, r4
 8000c84:	f000 f830 	bl	8000ce8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c88:	4b03      	ldr	r3, [pc, #12]	@ (8000c98 <HAL_InitTick+0x48>)
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	601c      	str	r4, [r3, #0]
  return status;
 8000c8e:	e7e6      	b.n	8000c5e <HAL_InitTick+0xe>
 8000c90:	20000004 	.word	0x20000004
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000008 	.word	0x20000008

08000c9c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	2380      	movs	r3, #128	@ 0x80
 8000c9e:	4a08      	ldr	r2, [pc, #32]	@ (8000cc0 <HAL_Init+0x24>)
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	6811      	ldr	r1, [r2, #0]
{
 8000ca4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca6:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ca8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000caa:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cac:	f7ff ffd0 	bl	8000c50 <HAL_InitTick>
 8000cb0:	1e04      	subs	r4, r0, #0
 8000cb2:	d002      	beq.n	8000cba <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000cb4:	2401      	movs	r4, #1
}
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000cba:	f7ff fec5 	bl	8000a48 <HAL_MspInit>
 8000cbe:	e7fa      	b.n	8000cb6 <HAL_Init+0x1a>
 8000cc0:	40022000 	.word	0x40022000

08000cc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000cc4:	4a03      	ldr	r2, [pc, #12]	@ (8000cd4 <HAL_IncTick+0x10>)
 8000cc6:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <HAL_IncTick+0x14>)
 8000cc8:	6811      	ldr	r1, [r2, #0]
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	185b      	adds	r3, r3, r1
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	4770      	bx	lr
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000130 	.word	0x20000130
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000cdc:	4b01      	ldr	r3, [pc, #4]	@ (8000ce4 <HAL_GetTick+0x8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
}
 8000ce0:	4770      	bx	lr
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	20000130 	.word	0x20000130

08000ce8 <HAL_NVIC_SetPriority>:
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce8:	22ff      	movs	r2, #255	@ 0xff
 8000cea:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b510      	push	{r4, lr}
 8000cee:	0014      	movs	r4, r2
 8000cf0:	4003      	ands	r3, r0
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf6:	0189      	lsls	r1, r1, #6
 8000cf8:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfa:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cfc:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	db0b      	blt.n	8000d1a <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <HAL_NVIC_SetPriority+0x4c>)
 8000d04:	21c0      	movs	r1, #192	@ 0xc0
 8000d06:	469c      	mov	ip, r3
 8000d08:	0880      	lsrs	r0, r0, #2
 8000d0a:	0080      	lsls	r0, r0, #2
 8000d0c:	4460      	add	r0, ip
 8000d0e:	0089      	lsls	r1, r1, #2
 8000d10:	5843      	ldr	r3, [r0, r1]
 8000d12:	4023      	ands	r3, r4
 8000d14:	4313      	orrs	r3, r2
 8000d16:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000d18:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1a:	230f      	movs	r3, #15
 8000d1c:	4906      	ldr	r1, [pc, #24]	@ (8000d38 <HAL_NVIC_SetPriority+0x50>)
 8000d1e:	4003      	ands	r3, r0
 8000d20:	468c      	mov	ip, r1
 8000d22:	3b08      	subs	r3, #8
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4463      	add	r3, ip
 8000d2a:	69d9      	ldr	r1, [r3, #28]
 8000d2c:	400c      	ands	r4, r1
 8000d2e:	4314      	orrs	r4, r2
 8000d30:	61dc      	str	r4, [r3, #28]
 8000d32:	e7f1      	b.n	8000d18 <HAL_NVIC_SetPriority+0x30>
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000d3c:	2800      	cmp	r0, #0
 8000d3e:	db05      	blt.n	8000d4c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d40:	221f      	movs	r2, #31
 8000d42:	2301      	movs	r3, #1
 8000d44:	4002      	ands	r2, r0
 8000d46:	4093      	lsls	r3, r2
 8000d48:	4a01      	ldr	r2, [pc, #4]	@ (8000d50 <HAL_NVIC_EnableIRQ+0x14>)
 8000d4a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000d4c:	4770      	bx	lr
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	2280      	movs	r2, #128	@ 0x80
 8000d56:	1e43      	subs	r3, r0, #1
 8000d58:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d20e      	bcs.n	8000d7e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d60:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a07      	ldr	r2, [pc, #28]	@ (8000d80 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4807      	ldr	r0, [pc, #28]	@ (8000d84 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d66:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	6a03      	ldr	r3, [r0, #32]
 8000d6a:	0609      	lsls	r1, r1, #24
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	430b      	orrs	r3, r1
 8000d72:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d76:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d78:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	3307      	adds	r3, #7
 8000d7c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000d7e:	4770      	bx	lr
 8000d80:	e000e010 	.word	0xe000e010
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	46de      	mov	lr, fp
 8000d8c:	4657      	mov	r7, sl
 8000d8e:	464e      	mov	r6, r9
 8000d90:	4645      	mov	r5, r8
 8000d92:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d94:	680c      	ldr	r4, [r1, #0]
{
 8000d96:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8000d98:	2300      	movs	r3, #0
{
 8000d9a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9c:	2c00      	cmp	r4, #0
 8000d9e:	d068      	beq.n	8000e72 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da0:	2201      	movs	r2, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	4694      	mov	ip, r2
 8000da6:	4022      	ands	r2, r4
 8000da8:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8000daa:	4662      	mov	r2, ip
 8000dac:	4214      	tst	r4, r2
 8000dae:	d05c      	beq.n	8000e6a <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000db0:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db2:	465a      	mov	r2, fp
 8000db4:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000db6:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	6855      	ldr	r5, [r2, #4]
 8000dba:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dbc:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dbe:	402a      	ands	r2, r5
 8000dc0:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dc2:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc4:	2e01      	cmp	r6, #1
 8000dc6:	d95b      	bls.n	8000e80 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc8:	2a03      	cmp	r2, #3
 8000dca:	d000      	beq.n	8000dce <HAL_GPIO_Init+0x46>
 8000dcc:	e0ad      	b.n	8000f2a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dce:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8000dd0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dd2:	9900      	ldr	r1, [sp, #0]
 8000dd4:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dd6:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8000dd8:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dda:	22c0      	movs	r2, #192	@ 0xc0
 8000ddc:	0292      	lsls	r2, r2, #10
 8000dde:	4215      	tst	r5, r2
 8000de0:	d043      	beq.n	8000e6a <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000de2:	2703      	movs	r7, #3
 8000de4:	260f      	movs	r6, #15
 8000de6:	495d      	ldr	r1, [pc, #372]	@ (8000f5c <HAL_GPIO_Init+0x1d4>)
 8000de8:	401f      	ands	r7, r3
 8000dea:	468c      	mov	ip, r1
 8000dec:	00ff      	lsls	r7, r7, #3
 8000dee:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8000df0:	089a      	lsrs	r2, r3, #2
 8000df2:	0092      	lsls	r2, r2, #2
 8000df4:	4462      	add	r2, ip
 8000df6:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000df8:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000dfa:	26a0      	movs	r6, #160	@ 0xa0
 8000dfc:	05f6      	lsls	r6, r6, #23
 8000dfe:	42b0      	cmp	r0, r6
 8000e00:	d00e      	beq.n	8000e20 <HAL_GPIO_Init+0x98>
 8000e02:	4e57      	ldr	r6, [pc, #348]	@ (8000f60 <HAL_GPIO_Init+0x1d8>)
 8000e04:	42b0      	cmp	r0, r6
 8000e06:	d100      	bne.n	8000e0a <HAL_GPIO_Init+0x82>
 8000e08:	e0a0      	b.n	8000f4c <HAL_GPIO_Init+0x1c4>
 8000e0a:	4e56      	ldr	r6, [pc, #344]	@ (8000f64 <HAL_GPIO_Init+0x1dc>)
 8000e0c:	42b0      	cmp	r0, r6
 8000e0e:	d100      	bne.n	8000e12 <HAL_GPIO_Init+0x8a>
 8000e10:	e0a0      	b.n	8000f54 <HAL_GPIO_Init+0x1cc>
 8000e12:	4e55      	ldr	r6, [pc, #340]	@ (8000f68 <HAL_GPIO_Init+0x1e0>)
 8000e14:	42b0      	cmp	r0, r6
 8000e16:	d100      	bne.n	8000e1a <HAL_GPIO_Init+0x92>
 8000e18:	e094      	b.n	8000f44 <HAL_GPIO_Init+0x1bc>
 8000e1a:	2605      	movs	r6, #5
 8000e1c:	40be      	lsls	r6, r7
 8000e1e:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e20:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8000e22:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8000e24:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8000e26:	4a4d      	ldr	r2, [pc, #308]	@ (8000f5c <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e28:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8000e2a:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8000e2c:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e2e:	4235      	tst	r5, r6
 8000e30:	d000      	beq.n	8000e34 <HAL_GPIO_Init+0xac>
 8000e32:	e077      	b.n	8000f24 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8000e34:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8000e36:	4e49      	ldr	r6, [pc, #292]	@ (8000f5c <HAL_GPIO_Init+0x1d4>)
 8000e38:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8000e3a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e3c:	2680      	movs	r6, #128	@ 0x80
 8000e3e:	03b6      	lsls	r6, r6, #14
 8000e40:	4235      	tst	r5, r6
 8000e42:	d16c      	bne.n	8000f1e <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8000e44:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8000e46:	4e45      	ldr	r6, [pc, #276]	@ (8000f5c <HAL_GPIO_Init+0x1d4>)
 8000e48:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e4a:	2284      	movs	r2, #132	@ 0x84
 8000e4c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4e:	03af      	lsls	r7, r5, #14
 8000e50:	d462      	bmi.n	8000f18 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8000e52:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8000e54:	2784      	movs	r7, #132	@ 0x84
 8000e56:	4e41      	ldr	r6, [pc, #260]	@ (8000f5c <HAL_GPIO_Init+0x1d4>)
 8000e58:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8000e5a:	2280      	movs	r2, #128	@ 0x80
 8000e5c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e5e:	03ed      	lsls	r5, r5, #15
 8000e60:	d456      	bmi.n	8000f10 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8000e62:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8000e64:	2180      	movs	r1, #128	@ 0x80
 8000e66:	4d3d      	ldr	r5, [pc, #244]	@ (8000f5c <HAL_GPIO_Init+0x1d4>)
 8000e68:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	0022      	movs	r2, r4
      }
    }

    position++;
 8000e6c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6e:	40da      	lsrs	r2, r3
 8000e70:	d196      	bne.n	8000da0 <HAL_GPIO_Init+0x18>
  }
}
 8000e72:	b003      	add	sp, #12
 8000e74:	bcf0      	pop	{r4, r5, r6, r7}
 8000e76:	46bb      	mov	fp, r7
 8000e78:	46b2      	mov	sl, r6
 8000e7a:	46a9      	mov	r9, r5
 8000e7c:	46a0      	mov	r8, r4
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8000e80:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e82:	000e      	movs	r6, r1
 8000e84:	9900      	ldr	r1, [sp, #0]
 8000e86:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e88:	4659      	mov	r1, fp
 8000e8a:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e8c:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e8e:	000e      	movs	r6, r1
 8000e90:	40be      	lsls	r6, r7
 8000e92:	46b0      	mov	r8, r6
 8000e94:	464e      	mov	r6, r9
 8000e96:	4641      	mov	r1, r8
 8000e98:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8000e9a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000e9c:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e9e:	000e      	movs	r6, r1
 8000ea0:	4661      	mov	r1, ip
 8000ea2:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea4:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ea6:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea8:	000e      	movs	r6, r1
 8000eaa:	2101      	movs	r1, #1
 8000eac:	400e      	ands	r6, r1
 8000eae:	409e      	lsls	r6, r3
 8000eb0:	46b4      	mov	ip, r6
 8000eb2:	4646      	mov	r6, r8
 8000eb4:	4661      	mov	r1, ip
 8000eb6:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8000eb8:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8000eba:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ebc:	000e      	movs	r6, r1
 8000ebe:	9900      	ldr	r1, [sp, #0]
 8000ec0:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec2:	4659      	mov	r1, fp
 8000ec4:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ec6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ec8:	000e      	movs	r6, r1
 8000eca:	40be      	lsls	r6, r7
 8000ecc:	46b4      	mov	ip, r6
 8000ece:	4646      	mov	r6, r8
 8000ed0:	4661      	mov	r1, ip
 8000ed2:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8000ed4:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed6:	2a02      	cmp	r2, #2
 8000ed8:	d000      	beq.n	8000edc <HAL_GPIO_Init+0x154>
 8000eda:	e778      	b.n	8000dce <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8000edc:	08d9      	lsrs	r1, r3, #3
 8000ede:	0089      	lsls	r1, r1, #2
 8000ee0:	468c      	mov	ip, r1
 8000ee2:	4484      	add	ip, r0
 8000ee4:	4661      	mov	r1, ip
 8000ee6:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee8:	2107      	movs	r1, #7
 8000eea:	4019      	ands	r1, r3
 8000eec:	0089      	lsls	r1, r1, #2
 8000eee:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8000ef0:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	4646      	mov	r6, r8
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	9e01      	ldr	r6, [sp, #4]
 8000efa:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000efc:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000efe:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f00:	4646      	mov	r6, r8
 8000f02:	6909      	ldr	r1, [r1, #16]
 8000f04:	40b1      	lsls	r1, r6
 8000f06:	9e01      	ldr	r6, [sp, #4]
 8000f08:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8000f0a:	4661      	mov	r1, ip
 8000f0c:	620e      	str	r6, [r1, #32]
 8000f0e:	e75e      	b.n	8000dce <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8000f10:	4651      	mov	r1, sl
 8000f12:	4311      	orrs	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	e7a5      	b.n	8000e64 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8000f18:	4656      	mov	r6, sl
 8000f1a:	4332      	orrs	r2, r6
 8000f1c:	e79a      	b.n	8000e54 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8000f1e:	4656      	mov	r6, sl
 8000f20:	4332      	orrs	r2, r6
 8000f22:	e790      	b.n	8000e46 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8000f24:	4656      	mov	r6, sl
 8000f26:	4332      	orrs	r2, r6
 8000f28:	e785      	b.n	8000e36 <HAL_GPIO_Init+0xae>
 8000f2a:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8000f2c:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f2e:	4031      	ands	r1, r6
 8000f30:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f32:	4659      	mov	r1, fp
 8000f34:	6889      	ldr	r1, [r1, #8]
 8000f36:	40b9      	lsls	r1, r7
 8000f38:	468c      	mov	ip, r1
 8000f3a:	4641      	mov	r1, r8
 8000f3c:	4666      	mov	r6, ip
 8000f3e:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8000f40:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	e744      	b.n	8000dce <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f44:	2603      	movs	r6, #3
 8000f46:	40be      	lsls	r6, r7
 8000f48:	4331      	orrs	r1, r6
 8000f4a:	e769      	b.n	8000e20 <HAL_GPIO_Init+0x98>
 8000f4c:	2601      	movs	r6, #1
 8000f4e:	40be      	lsls	r6, r7
 8000f50:	4331      	orrs	r1, r6
 8000f52:	e765      	b.n	8000e20 <HAL_GPIO_Init+0x98>
 8000f54:	2602      	movs	r6, #2
 8000f56:	40be      	lsls	r6, r7
 8000f58:	4331      	orrs	r1, r6
 8000f5a:	e761      	b.n	8000e20 <HAL_GPIO_Init+0x98>
 8000f5c:	40021800 	.word	0x40021800
 8000f60:	50000400 	.word	0x50000400
 8000f64:	50000800 	.word	0x50000800
 8000f68:	50000c00 	.word	0x50000c00

08000f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f6e:	4c13      	ldr	r4, [pc, #76]	@ (8000fbc <HAL_PWREx_ControlVoltageScaling+0x50>)
 8000f70:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8000f72:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000f74:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f76:	4013      	ands	r3, r2
 8000f78:	4303      	orrs	r3, r0
 8000f7a:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4298      	cmp	r0, r3
 8000f82:	d001      	beq.n	8000f88 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8000f84:	0028      	movs	r0, r5
 8000f86:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8000f8a:	490f      	ldr	r1, [pc, #60]	@ (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	0058      	lsls	r0, r3, #1
 8000f90:	18c0      	adds	r0, r0, r3
 8000f92:	0040      	lsls	r0, r0, #1
 8000f94:	f7ff f8b4 	bl	8000100 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f98:	2280      	movs	r2, #128	@ 0x80
 8000f9a:	6963      	ldr	r3, [r4, #20]
 8000f9c:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f9e:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa0:	4213      	tst	r3, r2
 8000fa2:	d102      	bne.n	8000faa <HAL_PWREx_ControlVoltageScaling+0x3e>
 8000fa4:	e7ee      	b.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000faa:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8000fac:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fae:	4213      	tst	r3, r2
 8000fb0:	d1f9      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8000fb2:	2500      	movs	r5, #0
 8000fb4:	e7e6      	b.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8000fb6:	2503      	movs	r5, #3
 8000fb8:	e7e4      	b.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x18>
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	40007000 	.word	0x40007000
 8000fc0:	fffff9ff 	.word	0xfffff9ff
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	000f4240 	.word	0x000f4240

08000fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fce:	46ce      	mov	lr, r9
 8000fd0:	4647      	mov	r7, r8
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	0004      	movs	r4, r0
 8000fd6:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fd8:	2800      	cmp	r0, #0
 8000fda:	d027      	beq.n	800102c <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fdc:	6803      	ldr	r3, [r0, #0]
 8000fde:	07da      	lsls	r2, r3, #31
 8000fe0:	d511      	bpl.n	8001006 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe2:	2238      	movs	r2, #56	@ 0x38
 8000fe4:	49c0      	ldr	r1, [pc, #768]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 8000fe6:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fe8:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fea:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000fec:	2a10      	cmp	r2, #16
 8000fee:	d100      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x26>
 8000ff0:	e0cc      	b.n	800118c <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000ff2:	2a08      	cmp	r2, #8
 8000ff4:	d000      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x2c>
 8000ff6:	e0cd      	b.n	8001194 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	4abb      	ldr	r2, [pc, #748]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	0392      	lsls	r2, r2, #14
 8000ffe:	d502      	bpl.n	8001006 <HAL_RCC_OscConfig+0x3a>
 8001000:	6862      	ldr	r2, [r4, #4]
 8001002:	2a00      	cmp	r2, #0
 8001004:	d012      	beq.n	800102c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001006:	079a      	lsls	r2, r3, #30
 8001008:	d532      	bpl.n	8001070 <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100a:	2338      	movs	r3, #56	@ 0x38
 800100c:	4ab6      	ldr	r2, [pc, #728]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 800100e:	6891      	ldr	r1, [r2, #8]
 8001010:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001012:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001014:	2b10      	cmp	r3, #16
 8001016:	d100      	bne.n	800101a <HAL_RCC_OscConfig+0x4e>
 8001018:	e10b      	b.n	8001232 <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800101a:	2b00      	cmp	r3, #0
 800101c:	d000      	beq.n	8001020 <HAL_RCC_OscConfig+0x54>
 800101e:	e10d      	b.n	800123c <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001020:	6813      	ldr	r3, [r2, #0]
 8001022:	055b      	lsls	r3, r3, #21
 8001024:	d508      	bpl.n	8001038 <HAL_RCC_OscConfig+0x6c>
 8001026:	68e3      	ldr	r3, [r4, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 800102c:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800102e:	b003      	add	sp, #12
 8001030:	bcc0      	pop	{r6, r7}
 8001032:	46b9      	mov	r9, r7
 8001034:	46b0      	mov	r8, r6
 8001036:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	6851      	ldr	r1, [r2, #4]
 800103a:	6963      	ldr	r3, [r4, #20]
 800103c:	48ab      	ldr	r0, [pc, #684]	@ (80012ec <HAL_RCC_OscConfig+0x320>)
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	4001      	ands	r1, r0
 8001042:	430b      	orrs	r3, r1
 8001044:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001046:	4aa8      	ldr	r2, [pc, #672]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 8001048:	49a9      	ldr	r1, [pc, #676]	@ (80012f0 <HAL_RCC_OscConfig+0x324>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	400b      	ands	r3, r1
 800104e:	6921      	ldr	r1, [r4, #16]
 8001050:	430b      	orrs	r3, r1
 8001052:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	4aa7      	ldr	r2, [pc, #668]	@ (80012f4 <HAL_RCC_OscConfig+0x328>)
 8001058:	049b      	lsls	r3, r3, #18
 800105a:	0f5b      	lsrs	r3, r3, #29
 800105c:	40da      	lsrs	r2, r3
 800105e:	49a6      	ldr	r1, [pc, #664]	@ (80012f8 <HAL_RCC_OscConfig+0x32c>)
 8001060:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001062:	4ba6      	ldr	r3, [pc, #664]	@ (80012fc <HAL_RCC_OscConfig+0x330>)
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	f7ff fdf3 	bl	8000c50 <HAL_InitTick>
 800106a:	2800      	cmp	r0, #0
 800106c:	d1de      	bne.n	800102c <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	071a      	lsls	r2, r3, #28
 8001072:	d46d      	bmi.n	8001150 <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001074:	075b      	lsls	r3, r3, #29
 8001076:	d545      	bpl.n	8001104 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001078:	2338      	movs	r3, #56	@ 0x38
 800107a:	4a9b      	ldr	r2, [pc, #620]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 800107c:	6891      	ldr	r1, [r2, #8]
 800107e:	400b      	ands	r3, r1
 8001080:	2b20      	cmp	r3, #32
 8001082:	d100      	bne.n	8001086 <HAL_RCC_OscConfig+0xba>
 8001084:	e0cc      	b.n	8001220 <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001086:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001088:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800108a:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800108c:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800108e:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001090:	4219      	tst	r1, r3
 8001092:	d108      	bne.n	80010a6 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001096:	4319      	orrs	r1, r3
 8001098:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800109a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800109c:	4013      	ands	r3, r2
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80010a2:	2301      	movs	r3, #1
 80010a4:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010a6:	2780      	movs	r7, #128	@ 0x80
 80010a8:	4e95      	ldr	r6, [pc, #596]	@ (8001300 <HAL_RCC_OscConfig+0x334>)
 80010aa:	007f      	lsls	r7, r7, #1
 80010ac:	6833      	ldr	r3, [r6, #0]
 80010ae:	423b      	tst	r3, r7
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0xe8>
 80010b2:	e0ff      	b.n	80012b4 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b4:	68a3      	ldr	r3, [r4, #8]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d100      	bne.n	80010bc <HAL_RCC_OscConfig+0xf0>
 80010ba:	e0e5      	b.n	8001288 <HAL_RCC_OscConfig+0x2bc>
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0xf6>
 80010c0:	e1c8      	b.n	8001454 <HAL_RCC_OscConfig+0x488>
 80010c2:	2101      	movs	r1, #1
 80010c4:	4e88      	ldr	r6, [pc, #544]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 80010c6:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80010c8:	438a      	bics	r2, r1
 80010ca:	65f2      	str	r2, [r6, #92]	@ 0x5c
 80010cc:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 80010ce:	3103      	adds	r1, #3
 80010d0:	438a      	bics	r2, r1
 80010d2:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d000      	beq.n	80010da <HAL_RCC_OscConfig+0x10e>
 80010d8:	e0da      	b.n	8001290 <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 80010da:	f7ff fdff 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010de:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80010e0:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010e2:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e4:	4d87      	ldr	r5, [pc, #540]	@ (8001304 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010e6:	e005      	b.n	80010f4 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e8:	f7ff fdf8 	bl	8000cdc <HAL_GetTick>
 80010ec:	1bc0      	subs	r0, r0, r7
 80010ee:	42a8      	cmp	r0, r5
 80010f0:	d900      	bls.n	80010f4 <HAL_RCC_OscConfig+0x128>
 80010f2:	e0ee      	b.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010f4:	4642      	mov	r2, r8
 80010f6:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 80010f8:	421a      	tst	r2, r3
 80010fa:	d1f5      	bne.n	80010e8 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 80010fc:	464b      	mov	r3, r9
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d100      	bne.n	8001104 <HAL_RCC_OscConfig+0x138>
 8001102:	e163      	b.n	80013cc <HAL_RCC_OscConfig+0x400>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001104:	69e3      	ldr	r3, [r4, #28]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d020      	beq.n	800114c <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800110a:	2238      	movs	r2, #56	@ 0x38
 800110c:	4d76      	ldr	r5, [pc, #472]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 800110e:	68a9      	ldr	r1, [r5, #8]
 8001110:	400a      	ands	r2, r1
 8001112:	2a10      	cmp	r2, #16
 8001114:	d100      	bne.n	8001118 <HAL_RCC_OscConfig+0x14c>
 8001116:	e11d      	b.n	8001354 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001118:	2b02      	cmp	r3, #2
 800111a:	d100      	bne.n	800111e <HAL_RCC_OscConfig+0x152>
 800111c:	e15c      	b.n	80013d8 <HAL_RCC_OscConfig+0x40c>
        __HAL_RCC_PLL_DISABLE();
 800111e:	682b      	ldr	r3, [r5, #0]
 8001120:	4a79      	ldr	r2, [pc, #484]	@ (8001308 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001122:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8001124:	4013      	ands	r3, r2
 8001126:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001128:	f7ff fdd8 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800112c:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800112e:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001130:	e005      	b.n	800113e <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001132:	f7ff fdd3 	bl	8000cdc <HAL_GetTick>
 8001136:	1b00      	subs	r0, r0, r4
 8001138:	2802      	cmp	r0, #2
 800113a:	d900      	bls.n	800113e <HAL_RCC_OscConfig+0x172>
 800113c:	e0c9      	b.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800113e:	682b      	ldr	r3, [r5, #0]
 8001140:	4233      	tst	r3, r6
 8001142:	d1f6      	bne.n	8001132 <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001144:	68eb      	ldr	r3, [r5, #12]
 8001146:	4a71      	ldr	r2, [pc, #452]	@ (800130c <HAL_RCC_OscConfig+0x340>)
 8001148:	4013      	ands	r3, r2
 800114a:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800114c:	2000      	movs	r0, #0
 800114e:	e76e      	b.n	800102e <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001150:	2238      	movs	r2, #56	@ 0x38
 8001152:	4d65      	ldr	r5, [pc, #404]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 8001154:	68a9      	ldr	r1, [r5, #8]
 8001156:	400a      	ands	r2, r1
 8001158:	2a18      	cmp	r2, #24
 800115a:	d043      	beq.n	80011e4 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800115c:	69a3      	ldr	r3, [r4, #24]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d100      	bne.n	8001164 <HAL_RCC_OscConfig+0x198>
 8001162:	e0b8      	b.n	80012d6 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8001164:	2201      	movs	r2, #1
 8001166:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001168:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 800116a:	4313      	orrs	r3, r2
 800116c:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800116e:	f7ff fdb5 	bl	8000cdc <HAL_GetTick>
 8001172:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001174:	e005      	b.n	8001182 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001176:	f7ff fdb1 	bl	8000cdc <HAL_GetTick>
 800117a:	1b80      	subs	r0, r0, r6
 800117c:	2802      	cmp	r0, #2
 800117e:	d900      	bls.n	8001182 <HAL_RCC_OscConfig+0x1b6>
 8001180:	e0a7      	b.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001182:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001184:	421f      	tst	r7, r3
 8001186:	d0f6      	beq.n	8001176 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	e773      	b.n	8001074 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118c:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800118e:	0789      	lsls	r1, r1, #30
 8001190:	d100      	bne.n	8001194 <HAL_RCC_OscConfig+0x1c8>
 8001192:	e731      	b.n	8000ff8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001194:	2280      	movs	r2, #128	@ 0x80
 8001196:	6863      	ldr	r3, [r4, #4]
 8001198:	0252      	lsls	r2, r2, #9
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_RCC_OscConfig+0x22a>
 800119e:	21a0      	movs	r1, #160	@ 0xa0
 80011a0:	02c9      	lsls	r1, r1, #11
 80011a2:	428b      	cmp	r3, r1
 80011a4:	d100      	bne.n	80011a8 <HAL_RCC_OscConfig+0x1dc>
 80011a6:	e0fc      	b.n	80013a2 <HAL_RCC_OscConfig+0x3d6>
 80011a8:	4d4f      	ldr	r5, [pc, #316]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 80011aa:	4959      	ldr	r1, [pc, #356]	@ (8001310 <HAL_RCC_OscConfig+0x344>)
 80011ac:	682a      	ldr	r2, [r5, #0]
 80011ae:	400a      	ands	r2, r1
 80011b0:	602a      	str	r2, [r5, #0]
 80011b2:	682a      	ldr	r2, [r5, #0]
 80011b4:	4957      	ldr	r1, [pc, #348]	@ (8001314 <HAL_RCC_OscConfig+0x348>)
 80011b6:	400a      	ands	r2, r1
 80011b8:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d11f      	bne.n	80011fe <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 80011be:	f7ff fd8d 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c2:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 80011c4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011c6:	02bf      	lsls	r7, r7, #10
 80011c8:	e004      	b.n	80011d4 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ca:	f7ff fd87 	bl	8000cdc <HAL_GetTick>
 80011ce:	1b80      	subs	r0, r0, r6
 80011d0:	2864      	cmp	r0, #100	@ 0x64
 80011d2:	d87e      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	423b      	tst	r3, r7
 80011d8:	d1f7      	bne.n	80011ca <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	079a      	lsls	r2, r3, #30
 80011de:	d400      	bmi.n	80011e2 <HAL_RCC_OscConfig+0x216>
 80011e0:	e746      	b.n	8001070 <HAL_RCC_OscConfig+0xa4>
 80011e2:	e712      	b.n	800100a <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80011e4:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80011e6:	0792      	lsls	r2, r2, #30
 80011e8:	d400      	bmi.n	80011ec <HAL_RCC_OscConfig+0x220>
 80011ea:	e743      	b.n	8001074 <HAL_RCC_OscConfig+0xa8>
 80011ec:	69a2      	ldr	r2, [r4, #24]
 80011ee:	2a00      	cmp	r2, #0
 80011f0:	d000      	beq.n	80011f4 <HAL_RCC_OscConfig+0x228>
 80011f2:	e73f      	b.n	8001074 <HAL_RCC_OscConfig+0xa8>
 80011f4:	e71a      	b.n	800102c <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f6:	4a3c      	ldr	r2, [pc, #240]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 80011f8:	6811      	ldr	r1, [r2, #0]
 80011fa:	430b      	orrs	r3, r1
 80011fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011fe:	f7ff fd6d 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001202:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001204:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001206:	4f38      	ldr	r7, [pc, #224]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 8001208:	02b6      	lsls	r6, r6, #10
 800120a:	e004      	b.n	8001216 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120c:	f7ff fd66 	bl	8000cdc <HAL_GetTick>
 8001210:	1b40      	subs	r0, r0, r5
 8001212:	2864      	cmp	r0, #100	@ 0x64
 8001214:	d85d      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4233      	tst	r3, r6
 800121a:	d0f7      	beq.n	800120c <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121c:	6823      	ldr	r3, [r4, #0]
 800121e:	e7dd      	b.n	80011dc <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001220:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8001222:	079b      	lsls	r3, r3, #30
 8001224:	d400      	bmi.n	8001228 <HAL_RCC_OscConfig+0x25c>
 8001226:	e76d      	b.n	8001104 <HAL_RCC_OscConfig+0x138>
 8001228:	68a3      	ldr	r3, [r4, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d000      	beq.n	8001230 <HAL_RCC_OscConfig+0x264>
 800122e:	e769      	b.n	8001104 <HAL_RCC_OscConfig+0x138>
 8001230:	e6fc      	b.n	800102c <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001232:	3b0d      	subs	r3, #13
 8001234:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001236:	2b02      	cmp	r3, #2
 8001238:	d100      	bne.n	800123c <HAL_RCC_OscConfig+0x270>
 800123a:	e0bc      	b.n	80013b6 <HAL_RCC_OscConfig+0x3ea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800123c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800123e:	4d2a      	ldr	r5, [pc, #168]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001240:	2b00      	cmp	r3, #0
 8001242:	d073      	beq.n	800132c <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001244:	682b      	ldr	r3, [r5, #0]
 8001246:	4a2a      	ldr	r2, [pc, #168]	@ (80012f0 <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001248:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800124a:	4013      	ands	r3, r2
 800124c:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800124e:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001250:	4313      	orrs	r3, r2
 8001252:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	682a      	ldr	r2, [r5, #0]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4313      	orrs	r3, r2
 800125c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800125e:	f7ff fd3d 	bl	8000cdc <HAL_GetTick>
 8001262:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001264:	e004      	b.n	8001270 <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001266:	f7ff fd39 	bl	8000cdc <HAL_GetTick>
 800126a:	1b80      	subs	r0, r0, r6
 800126c:	2802      	cmp	r0, #2
 800126e:	d830      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	423b      	tst	r3, r7
 8001274:	d0f7      	beq.n	8001266 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	686a      	ldr	r2, [r5, #4]
 8001278:	6963      	ldr	r3, [r4, #20]
 800127a:	491c      	ldr	r1, [pc, #112]	@ (80012ec <HAL_RCC_OscConfig+0x320>)
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	400a      	ands	r2, r1
 8001280:	4313      	orrs	r3, r2
 8001282:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	e6f3      	b.n	8001070 <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001288:	4917      	ldr	r1, [pc, #92]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
 800128a:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 800128c:	4313      	orrs	r3, r2
 800128e:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8001290:	f7ff fd24 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 8001296:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001298:	4698      	mov	r8, r3
 800129a:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	4d19      	ldr	r5, [pc, #100]	@ (8001304 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800129e:	e004      	b.n	80012aa <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a0:	f7ff fd1c 	bl	8000cdc <HAL_GetTick>
 80012a4:	1b80      	subs	r0, r0, r6
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d813      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012aa:	4643      	mov	r3, r8
 80012ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012ae:	421f      	tst	r7, r3
 80012b0:	d0f6      	beq.n	80012a0 <HAL_RCC_OscConfig+0x2d4>
 80012b2:	e723      	b.n	80010fc <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b4:	6833      	ldr	r3, [r6, #0]
 80012b6:	433b      	orrs	r3, r7
 80012b8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80012ba:	f7ff fd0f 	bl	8000cdc <HAL_GetTick>
 80012be:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012c0:	6833      	ldr	r3, [r6, #0]
 80012c2:	423b      	tst	r3, r7
 80012c4:	d000      	beq.n	80012c8 <HAL_RCC_OscConfig+0x2fc>
 80012c6:	e6f5      	b.n	80010b4 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c8:	f7ff fd08 	bl	8000cdc <HAL_GetTick>
 80012cc:	1b40      	subs	r0, r0, r5
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f6      	bls.n	80012c0 <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 80012d2:	2003      	movs	r0, #3
 80012d4:	e6ab      	b.n	800102e <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 80012d6:	2201      	movs	r2, #1
 80012d8:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012da:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80012dc:	4393      	bics	r3, r2
 80012de:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80012e0:	f7ff fcfc 	bl	8000cdc <HAL_GetTick>
 80012e4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012e6:	e01c      	b.n	8001322 <HAL_RCC_OscConfig+0x356>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	ffff80ff 	.word	0xffff80ff
 80012f0:	ffffc7ff 	.word	0xffffc7ff
 80012f4:	00f42400 	.word	0x00f42400
 80012f8:	20000000 	.word	0x20000000
 80012fc:	20000008 	.word	0x20000008
 8001300:	40007000 	.word	0x40007000
 8001304:	00001388 	.word	0x00001388
 8001308:	feffffff 	.word	0xfeffffff
 800130c:	effefffc 	.word	0xeffefffc
 8001310:	fffeffff 	.word	0xfffeffff
 8001314:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001318:	f7ff fce0 	bl	8000cdc <HAL_GetTick>
 800131c:	1b80      	subs	r0, r0, r6
 800131e:	2802      	cmp	r0, #2
 8001320:	d8d7      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001322:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8001324:	421f      	tst	r7, r3
 8001326:	d1f7      	bne.n	8001318 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	e6a3      	b.n	8001074 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	4a50      	ldr	r2, [pc, #320]	@ (8001470 <HAL_RCC_OscConfig+0x4a4>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001330:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8001332:	4013      	ands	r3, r2
 8001334:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001336:	f7ff fcd1 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800133a:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 800133c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800133e:	e004      	b.n	800134a <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fccc 	bl	8000cdc <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	2802      	cmp	r0, #2
 8001348:	d8c3      	bhi.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134a:	682b      	ldr	r3, [r5, #0]
 800134c:	423b      	tst	r3, r7
 800134e:	d1f7      	bne.n	8001340 <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001350:	6823      	ldr	r3, [r4, #0]
 8001352:	e68d      	b.n	8001070 <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001354:	2b01      	cmp	r3, #1
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0x38e>
 8001358:	e668      	b.n	800102c <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 800135c:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	6a21      	ldr	r1, [r4, #32]
 8001360:	4002      	ands	r2, r0
 8001362:	428a      	cmp	r2, r1
 8001364:	d000      	beq.n	8001368 <HAL_RCC_OscConfig+0x39c>
 8001366:	e661      	b.n	800102c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001368:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800136c:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	428a      	cmp	r2, r1
 8001370:	d000      	beq.n	8001374 <HAL_RCC_OscConfig+0x3a8>
 8001372:	e65b      	b.n	800102c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001374:	21fe      	movs	r1, #254	@ 0xfe
 8001376:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001378:	01c9      	lsls	r1, r1, #7
 800137a:	4001      	ands	r1, r0
 800137c:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800137e:	4291      	cmp	r1, r2
 8001380:	d000      	beq.n	8001384 <HAL_RCC_OscConfig+0x3b8>
 8001382:	e653      	b.n	800102c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001384:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001388:	0392      	lsls	r2, r2, #14
 800138a:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800138c:	428a      	cmp	r2, r1
 800138e:	d000      	beq.n	8001392 <HAL_RCC_OscConfig+0x3c6>
 8001390:	e64c      	b.n	800102c <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001392:	6b23      	ldr	r3, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001394:	0f40      	lsrs	r0, r0, #29
 8001396:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001398:	1ac0      	subs	r0, r0, r3
 800139a:	1e43      	subs	r3, r0, #1
 800139c:	4198      	sbcs	r0, r3
 800139e:	b2c0      	uxtb	r0, r0
 80013a0:	e645      	b.n	800102e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	4b33      	ldr	r3, [pc, #204]	@ (8001474 <HAL_RCC_OscConfig+0x4a8>)
 80013a6:	02c9      	lsls	r1, r1, #11
 80013a8:	6818      	ldr	r0, [r3, #0]
 80013aa:	4301      	orrs	r1, r0
 80013ac:	6019      	str	r1, [r3, #0]
 80013ae:	6819      	ldr	r1, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	e723      	b.n	80011fe <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b6:	6813      	ldr	r3, [r2, #0]
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	d455      	bmi.n	8001468 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013bc:	6851      	ldr	r1, [r2, #4]
 80013be:	6963      	ldr	r3, [r4, #20]
 80013c0:	482d      	ldr	r0, [pc, #180]	@ (8001478 <HAL_RCC_OscConfig+0x4ac>)
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	4001      	ands	r1, r0
 80013c6:	430b      	orrs	r3, r1
 80013c8:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ca:	e64a      	b.n	8001062 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 80013cc:	4a29      	ldr	r2, [pc, #164]	@ (8001474 <HAL_RCC_OscConfig+0x4a8>)
 80013ce:	492b      	ldr	r1, [pc, #172]	@ (800147c <HAL_RCC_OscConfig+0x4b0>)
 80013d0:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80013d2:	400b      	ands	r3, r1
 80013d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80013d6:	e695      	b.n	8001104 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	4a29      	ldr	r2, [pc, #164]	@ (8001480 <HAL_RCC_OscConfig+0x4b4>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013dc:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80013de:	4013      	ands	r3, r2
 80013e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc7b 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e6:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80013e8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ea:	e005      	b.n	80013f8 <HAL_RCC_OscConfig+0x42c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff fc76 	bl	8000cdc <HAL_GetTick>
 80013f0:	1b80      	subs	r0, r0, r6
 80013f2:	2802      	cmp	r0, #2
 80013f4:	d900      	bls.n	80013f8 <HAL_RCC_OscConfig+0x42c>
 80013f6:	e76c      	b.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	423b      	tst	r3, r7
 80013fc:	d1f6      	bne.n	80013ec <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013fe:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8001400:	6a23      	ldr	r3, [r4, #32]
 8001402:	68ea      	ldr	r2, [r5, #12]
 8001404:	430b      	orrs	r3, r1
 8001406:	491f      	ldr	r1, [pc, #124]	@ (8001484 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001408:	4e1a      	ldr	r6, [pc, #104]	@ (8001474 <HAL_RCC_OscConfig+0x4a8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140a:	400a      	ands	r2, r1
 800140c:	4313      	orrs	r3, r2
 800140e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001410:	4313      	orrs	r3, r2
 8001412:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8001414:	4313      	orrs	r3, r2
 8001416:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001418:	0212      	lsls	r2, r2, #8
 800141a:	4313      	orrs	r3, r2
 800141c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	682a      	ldr	r2, [r5, #0]
 8001422:	045b      	lsls	r3, r3, #17
 8001424:	4313      	orrs	r3, r2
 8001426:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	68ea      	ldr	r2, [r5, #12]
 800142c:	055b      	lsls	r3, r3, #21
 800142e:	4313      	orrs	r3, r2
 8001430:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8001432:	f7ff fc53 	bl	8000cdc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001436:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8001438:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800143a:	04ad      	lsls	r5, r5, #18
 800143c:	e005      	b.n	800144a <HAL_RCC_OscConfig+0x47e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff fc4d 	bl	8000cdc <HAL_GetTick>
 8001442:	1b00      	subs	r0, r0, r4
 8001444:	2802      	cmp	r0, #2
 8001446:	d900      	bls.n	800144a <HAL_RCC_OscConfig+0x47e>
 8001448:	e743      	b.n	80012d2 <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800144a:	6833      	ldr	r3, [r6, #0]
 800144c:	422b      	tst	r3, r5
 800144e:	d0f6      	beq.n	800143e <HAL_RCC_OscConfig+0x472>
  return HAL_OK;
 8001450:	2000      	movs	r0, #0
 8001452:	e5ec      	b.n	800102e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001454:	2104      	movs	r1, #4
 8001456:	4b07      	ldr	r3, [pc, #28]	@ (8001474 <HAL_RCC_OscConfig+0x4a8>)
 8001458:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800145a:	430a      	orrs	r2, r1
 800145c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800145e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001460:	3903      	subs	r1, #3
 8001462:	430a      	orrs	r2, r1
 8001464:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001466:	e713      	b.n	8001290 <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001468:	68e3      	ldr	r3, [r4, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1a6      	bne.n	80013bc <HAL_RCC_OscConfig+0x3f0>
 800146e:	e5dd      	b.n	800102c <HAL_RCC_OscConfig+0x60>
 8001470:	fffffeff 	.word	0xfffffeff
 8001474:	40021000 	.word	0x40021000
 8001478:	ffff80ff 	.word	0xffff80ff
 800147c:	efffffff 	.word	0xefffffff
 8001480:	feffffff 	.word	0xfeffffff
 8001484:	1fc1808c 	.word	0x1fc1808c

08001488 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001488:	2338      	movs	r3, #56	@ 0x38
 800148a:	4a1e      	ldr	r2, [pc, #120]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800148c:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800148e:	6891      	ldr	r1, [r2, #8]
 8001490:	420b      	tst	r3, r1
 8001492:	d105      	bne.n	80014a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001494:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001496:	481c      	ldr	r0, [pc, #112]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x80>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001498:	049b      	lsls	r3, r3, #18
 800149a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800149c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800149e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a0:	6891      	ldr	r1, [r2, #8]
 80014a2:	4019      	ands	r1, r3
 80014a4:	2908      	cmp	r1, #8
 80014a6:	d014      	beq.n	80014d2 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a8:	6891      	ldr	r1, [r2, #8]
 80014aa:	4019      	ands	r1, r3
 80014ac:	2910      	cmp	r1, #16
 80014ae:	d012      	beq.n	80014d6 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80014b0:	6891      	ldr	r1, [r2, #8]
 80014b2:	4019      	ands	r1, r3
 80014b4:	2920      	cmp	r1, #32
 80014b6:	d021      	beq.n	80014fc <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80014b8:	6890      	ldr	r0, [r2, #8]
 80014ba:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 80014bc:	3818      	subs	r0, #24
 80014be:	1e43      	subs	r3, r0, #1
 80014c0:	4198      	sbcs	r0, r3
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_RCC_GetSysClockFreq+0x84>)
 80014c4:	4240      	negs	r0, r0
 80014c6:	4018      	ands	r0, r3
 80014c8:	23fa      	movs	r3, #250	@ 0xfa
 80014ca:	01db      	lsls	r3, r3, #7
 80014cc:	469c      	mov	ip, r3
 80014ce:	4460      	add	r0, ip
 80014d0:	e7e5      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x80>)
 80014d4:	e7e3      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80014d6:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014d8:	68d1      	ldr	r1, [r2, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014da:	480b      	ldr	r0, [pc, #44]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x80>)
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014dc:	0649      	lsls	r1, r1, #25
 80014de:	0f49      	lsrs	r1, r1, #29
 80014e0:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014e2:	68d4      	ldr	r4, [r2, #12]
 80014e4:	f7fe fe0c 	bl	8000100 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014e8:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014ea:	0464      	lsls	r4, r4, #17
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014ec:	68d9      	ldr	r1, [r3, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014ee:	0e64      	lsrs	r4, r4, #25
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014f0:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80014f2:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80014f4:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 80014f6:	f7fe fe03 	bl	8000100 <__udivsi3>
  return sysclockfreq;
 80014fa:	e7d0      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80014fc:	2080      	movs	r0, #128	@ 0x80
 80014fe:	0200      	lsls	r0, r0, #8
 8001500:	e7cd      	b.n	800149e <HAL_RCC_GetSysClockFreq+0x16>
 8001502:	46c0      	nop			@ (mov r8, r8)
 8001504:	40021000 	.word	0x40021000
 8001508:	00f42400 	.word	0x00f42400
 800150c:	ffff8300 	.word	0xffff8300

08001510 <HAL_RCC_ClockConfig>:
{
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	46ce      	mov	lr, r9
 8001514:	4647      	mov	r7, r8
 8001516:	0005      	movs	r5, r0
 8001518:	000c      	movs	r4, r1
 800151a:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 800151c:	2800      	cmp	r0, #0
 800151e:	d026      	beq.n	800156e <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001520:	2207      	movs	r2, #7
 8001522:	4e57      	ldr	r6, [pc, #348]	@ (8001680 <HAL_RCC_ClockConfig+0x170>)
 8001524:	6833      	ldr	r3, [r6, #0]
 8001526:	4013      	ands	r3, r2
 8001528:	428b      	cmp	r3, r1
 800152a:	d35e      	bcc.n	80015ea <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	682b      	ldr	r3, [r5, #0]
 800152e:	079a      	lsls	r2, r3, #30
 8001530:	d50e      	bpl.n	8001550 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001532:	075a      	lsls	r2, r3, #29
 8001534:	d505      	bpl.n	8001542 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001536:	22e0      	movs	r2, #224	@ 0xe0
 8001538:	4952      	ldr	r1, [pc, #328]	@ (8001684 <HAL_RCC_ClockConfig+0x174>)
 800153a:	01d2      	lsls	r2, r2, #7
 800153c:	6888      	ldr	r0, [r1, #8]
 800153e:	4302      	orrs	r2, r0
 8001540:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001542:	4950      	ldr	r1, [pc, #320]	@ (8001684 <HAL_RCC_ClockConfig+0x174>)
 8001544:	4850      	ldr	r0, [pc, #320]	@ (8001688 <HAL_RCC_ClockConfig+0x178>)
 8001546:	688a      	ldr	r2, [r1, #8]
 8001548:	4002      	ands	r2, r0
 800154a:	68a8      	ldr	r0, [r5, #8]
 800154c:	4302      	orrs	r2, r0
 800154e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001550:	07db      	lsls	r3, r3, #31
 8001552:	d52b      	bpl.n	80015ac <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001554:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001556:	4a4b      	ldr	r2, [pc, #300]	@ (8001684 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001558:	2b01      	cmp	r3, #1
 800155a:	d100      	bne.n	800155e <HAL_RCC_ClockConfig+0x4e>
 800155c:	e07c      	b.n	8001658 <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155e:	2b02      	cmp	r3, #2
 8001560:	d007      	beq.n	8001572 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001562:	2b00      	cmp	r3, #0
 8001564:	d000      	beq.n	8001568 <HAL_RCC_ClockConfig+0x58>
 8001566:	e07d      	b.n	8001664 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	0552      	lsls	r2, r2, #21
 800156c:	d404      	bmi.n	8001578 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800156e:	2001      	movs	r0, #1
 8001570:	e037      	b.n	80015e2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	0192      	lsls	r2, r2, #6
 8001576:	d5fa      	bpl.n	800156e <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001578:	2107      	movs	r1, #7
 800157a:	4e42      	ldr	r6, [pc, #264]	@ (8001684 <HAL_RCC_ClockConfig+0x174>)
 800157c:	68b2      	ldr	r2, [r6, #8]
 800157e:	438a      	bics	r2, r1
 8001580:	4313      	orrs	r3, r2
 8001582:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001584:	f7ff fbaa 	bl	8000cdc <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001588:	2338      	movs	r3, #56	@ 0x38
 800158a:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800158c:	4b3f      	ldr	r3, [pc, #252]	@ (800168c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800158e:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	e004      	b.n	800159e <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f7ff fba2 	bl	8000cdc <HAL_GetTick>
 8001598:	1bc0      	subs	r0, r0, r7
 800159a:	4548      	cmp	r0, r9
 800159c:	d83b      	bhi.n	8001616 <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4643      	mov	r3, r8
 80015a0:	68b2      	ldr	r2, [r6, #8]
 80015a2:	401a      	ands	r2, r3
 80015a4:	686b      	ldr	r3, [r5, #4]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1f3      	bne.n	8001594 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	2207      	movs	r2, #7
 80015ae:	4e34      	ldr	r6, [pc, #208]	@ (8001680 <HAL_RCC_ClockConfig+0x170>)
 80015b0:	6833      	ldr	r3, [r6, #0]
 80015b2:	4013      	ands	r3, r2
 80015b4:	42a3      	cmp	r3, r4
 80015b6:	d838      	bhi.n	800162a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	075b      	lsls	r3, r3, #29
 80015bc:	d42d      	bmi.n	800161a <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015be:	f7ff ff63 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 80015c2:	4b30      	ldr	r3, [pc, #192]	@ (8001684 <HAL_RCC_ClockConfig+0x174>)
 80015c4:	4a32      	ldr	r2, [pc, #200]	@ (8001690 <HAL_RCC_ClockConfig+0x180>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4932      	ldr	r1, [pc, #200]	@ (8001694 <HAL_RCC_ClockConfig+0x184>)
 80015ca:	051b      	lsls	r3, r3, #20
 80015cc:	0f1b      	lsrs	r3, r3, #28
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	589b      	ldr	r3, [r3, r2]
 80015d2:	221f      	movs	r2, #31
 80015d4:	4013      	ands	r3, r2
 80015d6:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 80015d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015da:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	f7ff fb37 	bl	8000c50 <HAL_InitTick>
}
 80015e2:	bcc0      	pop	{r6, r7}
 80015e4:	46b9      	mov	r9, r7
 80015e6:	46b0      	mov	r8, r6
 80015e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ea:	6833      	ldr	r3, [r6, #0]
 80015ec:	4393      	bics	r3, r2
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80015f2:	f7ff fb73 	bl	8000cdc <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015f6:	2307      	movs	r3, #7
 80015f8:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80015fc:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001600:	4642      	mov	r2, r8
 8001602:	6833      	ldr	r3, [r6, #0]
 8001604:	4013      	ands	r3, r2
 8001606:	42a3      	cmp	r3, r4
 8001608:	d100      	bne.n	800160c <HAL_RCC_ClockConfig+0xfc>
 800160a:	e78f      	b.n	800152c <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fb66 	bl	8000cdc <HAL_GetTick>
 8001610:	1bc0      	subs	r0, r0, r7
 8001612:	4548      	cmp	r0, r9
 8001614:	d9f4      	bls.n	8001600 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 8001616:	2003      	movs	r0, #3
 8001618:	e7e3      	b.n	80015e2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800161a:	4a1a      	ldr	r2, [pc, #104]	@ (8001684 <HAL_RCC_ClockConfig+0x174>)
 800161c:	491f      	ldr	r1, [pc, #124]	@ (800169c <HAL_RCC_ClockConfig+0x18c>)
 800161e:	6893      	ldr	r3, [r2, #8]
 8001620:	400b      	ands	r3, r1
 8001622:	68e9      	ldr	r1, [r5, #12]
 8001624:	430b      	orrs	r3, r1
 8001626:	6093      	str	r3, [r2, #8]
 8001628:	e7c9      	b.n	80015be <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	6833      	ldr	r3, [r6, #0]
 800162c:	4393      	bics	r3, r2
 800162e:	4323      	orrs	r3, r4
 8001630:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001632:	f7ff fb53 	bl	8000cdc <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001636:	2307      	movs	r3, #7
 8001638:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 800163c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163e:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001640:	4642      	mov	r2, r8
 8001642:	6833      	ldr	r3, [r6, #0]
 8001644:	4013      	ands	r3, r2
 8001646:	42a3      	cmp	r3, r4
 8001648:	d0b6      	beq.n	80015b8 <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	f7ff fb47 	bl	8000cdc <HAL_GetTick>
 800164e:	1bc0      	subs	r0, r0, r7
 8001650:	4548      	cmp	r0, r9
 8001652:	d9f5      	bls.n	8001640 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8001654:	2003      	movs	r0, #3
 8001656:	e7c4      	b.n	80015e2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	0392      	lsls	r2, r2, #14
 800165c:	d500      	bpl.n	8001660 <HAL_RCC_ClockConfig+0x150>
 800165e:	e78b      	b.n	8001578 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
 8001662:	e7be      	b.n	80015e2 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001664:	2b03      	cmp	r3, #3
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001668:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800166a:	0792      	lsls	r2, r2, #30
 800166c:	d500      	bpl.n	8001670 <HAL_RCC_ClockConfig+0x160>
 800166e:	e783      	b.n	8001578 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
 8001672:	e7b6      	b.n	80015e2 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001674:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8001676:	0792      	lsls	r2, r2, #30
 8001678:	d500      	bpl.n	800167c <HAL_RCC_ClockConfig+0x16c>
 800167a:	e77d      	b.n	8001578 <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 800167c:	2001      	movs	r0, #1
 800167e:	e7b0      	b.n	80015e2 <HAL_RCC_ClockConfig+0xd2>
 8001680:	40022000 	.word	0x40022000
 8001684:	40021000 	.word	0x40021000
 8001688:	fffff0ff 	.word	0xfffff0ff
 800168c:	00001388 	.word	0x00001388
 8001690:	08002594 	.word	0x08002594
 8001694:	20000000 	.word	0x20000000
 8001698:	20000008 	.word	0x20000008
 800169c:	ffff8fff 	.word	0xffff8fff

080016a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016a4:	d063      	beq.n	800176e <HAL_TIM_Base_Init+0xce>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016a6:	233d      	movs	r3, #61	@ 0x3d
 80016a8:	5cc3      	ldrb	r3, [r0, r3]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d050      	beq.n	8001752 <HAL_TIM_Base_Init+0xb2>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016b0:	233d      	movs	r3, #61	@ 0x3d
 80016b2:	2202      	movs	r2, #2
 80016b4:	54e2      	strb	r2, [r4, r3]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016b6:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016b8:	4e33      	ldr	r6, [pc, #204]	@ (8001788 <HAL_TIM_Base_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 80016ba:	681a      	ldr	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80016bc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016be:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016c0:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016c2:	42b3      	cmp	r3, r6
 80016c4:	d012      	beq.n	80016ec <HAL_TIM_Base_Init+0x4c>
 80016c6:	4e31      	ldr	r6, [pc, #196]	@ (800178c <HAL_TIM_Base_Init+0xec>)
 80016c8:	42b3      	cmp	r3, r6
 80016ca:	d047      	beq.n	800175c <HAL_TIM_Base_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016cc:	4e30      	ldr	r6, [pc, #192]	@ (8001790 <HAL_TIM_Base_Init+0xf0>)
 80016ce:	42b3      	cmp	r3, r6
 80016d0:	d048      	beq.n	8001764 <HAL_TIM_Base_Init+0xc4>
 80016d2:	4e30      	ldr	r6, [pc, #192]	@ (8001794 <HAL_TIM_Base_Init+0xf4>)
 80016d4:	42b3      	cmp	r3, r6
 80016d6:	d00d      	beq.n	80016f4 <HAL_TIM_Base_Init+0x54>
 80016d8:	4e2f      	ldr	r6, [pc, #188]	@ (8001798 <HAL_TIM_Base_Init+0xf8>)
 80016da:	42b3      	cmp	r3, r6
 80016dc:	d049      	beq.n	8001772 <HAL_TIM_Base_Init+0xd2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016de:	2680      	movs	r6, #128	@ 0x80
 80016e0:	43b2      	bics	r2, r6
 80016e2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80016e4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016e6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80016e8:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016ea:	e00f      	b.n	800170c <HAL_TIM_Base_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016ec:	2670      	movs	r6, #112	@ 0x70
 80016ee:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80016f0:	68a6      	ldr	r6, [r4, #8]
 80016f2:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80016f4:	4e29      	ldr	r6, [pc, #164]	@ (800179c <HAL_TIM_Base_Init+0xfc>)
 80016f6:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016f8:	6926      	ldr	r6, [r4, #16]
 80016fa:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016fc:	2680      	movs	r6, #128	@ 0x80
 80016fe:	43b2      	bics	r2, r6
 8001700:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001702:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001704:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001706:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001708:	6962      	ldr	r2, [r4, #20]
 800170a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800170c:	2201      	movs	r2, #1
 800170e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001710:	6919      	ldr	r1, [r3, #16]
 8001712:	420a      	tst	r2, r1
 8001714:	d002      	beq.n	800171c <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001716:	6919      	ldr	r1, [r3, #16]
 8001718:	4391      	bics	r1, r2
 800171a:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800171c:	2301      	movs	r3, #1
 800171e:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8001720:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001722:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001724:	3a0a      	subs	r2, #10
 8001726:	54a3      	strb	r3, [r4, r2]
 8001728:	3201      	adds	r2, #1
 800172a:	54a3      	strb	r3, [r4, r2]
 800172c:	3201      	adds	r2, #1
 800172e:	54a3      	strb	r3, [r4, r2]
 8001730:	3201      	adds	r2, #1
 8001732:	54a3      	strb	r3, [r4, r2]
 8001734:	3201      	adds	r2, #1
 8001736:	54a3      	strb	r3, [r4, r2]
 8001738:	3201      	adds	r2, #1
 800173a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800173c:	3201      	adds	r2, #1
 800173e:	54a3      	strb	r3, [r4, r2]
 8001740:	3201      	adds	r2, #1
 8001742:	54a3      	strb	r3, [r4, r2]
 8001744:	3201      	adds	r2, #1
 8001746:	54a3      	strb	r3, [r4, r2]
 8001748:	3201      	adds	r2, #1
 800174a:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800174c:	3a0a      	subs	r2, #10
 800174e:	54a3      	strb	r3, [r4, r2]
}
 8001750:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001752:	333c      	adds	r3, #60	@ 0x3c
 8001754:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001756:	f7ff f98f 	bl	8000a78 <HAL_TIM_Base_MspInit>
 800175a:	e7a9      	b.n	80016b0 <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800175c:	2670      	movs	r6, #112	@ 0x70
 800175e:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8001760:	68a6      	ldr	r6, [r4, #8]
 8001762:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001764:	4e0d      	ldr	r6, [pc, #52]	@ (800179c <HAL_TIM_Base_Init+0xfc>)
 8001766:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001768:	6926      	ldr	r6, [r4, #16]
 800176a:	4332      	orrs	r2, r6
 800176c:	e7b7      	b.n	80016de <HAL_TIM_Base_Init+0x3e>
    return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
 8001770:	e7ee      	b.n	8001750 <HAL_TIM_Base_Init+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001772:	4e0a      	ldr	r6, [pc, #40]	@ (800179c <HAL_TIM_Base_Init+0xfc>)
 8001774:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001776:	6926      	ldr	r6, [r4, #16]
 8001778:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800177a:	2680      	movs	r6, #128	@ 0x80
 800177c:	43b2      	bics	r2, r6
 800177e:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8001780:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001782:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001784:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001786:	e7bf      	b.n	8001708 <HAL_TIM_Base_Init+0x68>
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40000400 	.word	0x40000400
 8001790:	40002000 	.word	0x40002000
 8001794:	40014400 	.word	0x40014400
 8001798:	40014800 	.word	0x40014800
 800179c:	fffffcff 	.word	0xfffffcff

080017a0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80017a0:	213d      	movs	r1, #61	@ 0x3d
{
 80017a2:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80017a4:	5c42      	ldrb	r2, [r0, r1]
{
 80017a6:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80017a8:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80017ac:	2a01      	cmp	r2, #1
 80017ae:	d10c      	bne.n	80017ca <HAL_TIM_Base_Start+0x2a>
  htim->State = HAL_TIM_STATE_BUSY;
 80017b0:	3201      	adds	r2, #1
 80017b2:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <HAL_TIM_Base_Start+0x48>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d007      	beq.n	80017cc <HAL_TIM_Base_Start+0x2c>
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_TIM_Base_Start+0x4c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d004      	beq.n	80017cc <HAL_TIM_Base_Start+0x2c>
    __HAL_TIM_ENABLE(htim);
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4322      	orrs	r2, r4
 80017c6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80017c8:	2000      	movs	r0, #0
}
 80017ca:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <HAL_TIM_Base_Start+0x50>)
 80017d0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d2:	2a06      	cmp	r2, #6
 80017d4:	d0f8      	beq.n	80017c8 <HAL_TIM_Base_Start+0x28>
 80017d6:	3907      	subs	r1, #7
 80017d8:	428a      	cmp	r2, r1
 80017da:	d0f5      	beq.n	80017c8 <HAL_TIM_Base_Start+0x28>
      __HAL_TIM_ENABLE(htim);
 80017dc:	2101      	movs	r1, #1
 80017de:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80017e0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	e7f0      	b.n	80017ca <HAL_TIM_Base_Start+0x2a>
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40000400 	.word	0x40000400
 80017f0:	00010007 	.word	0x00010007

080017f4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80017f4:	213d      	movs	r1, #61	@ 0x3d
{
 80017f6:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80017f8:	5c42      	ldrb	r2, [r0, r1]
{
 80017fa:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80017fc:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001800:	2a01      	cmp	r2, #1
 8001802:	d10f      	bne.n	8001824 <HAL_TIM_Base_Start_IT+0x30>
  htim->State = HAL_TIM_STATE_BUSY;
 8001804:	3201      	adds	r2, #1
 8001806:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	4322      	orrs	r2, r4
 800180e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001810:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <HAL_TIM_Base_Start_IT+0x50>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d007      	beq.n	8001826 <HAL_TIM_Base_Start_IT+0x32>
 8001816:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <HAL_TIM_Base_Start_IT+0x54>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d004      	beq.n	8001826 <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4322      	orrs	r2, r4
 8001820:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
}
 8001824:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	4908      	ldr	r1, [pc, #32]	@ (800184c <HAL_TIM_Base_Start_IT+0x58>)
 800182a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800182c:	2a06      	cmp	r2, #6
 800182e:	d0f8      	beq.n	8001822 <HAL_TIM_Base_Start_IT+0x2e>
 8001830:	3907      	subs	r1, #7
 8001832:	428a      	cmp	r2, r1
 8001834:	d0f5      	beq.n	8001822 <HAL_TIM_Base_Start_IT+0x2e>
      __HAL_TIM_ENABLE(htim);
 8001836:	2101      	movs	r1, #1
 8001838:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800183a:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	e7f0      	b.n	8001824 <HAL_TIM_Base_Start_IT+0x30>
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40000400 	.word	0x40000400
 800184c:	00010007 	.word	0x00010007

08001850 <HAL_TIM_PWM_MspInit>:
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
 8001850:	4770      	bx	lr
 8001852:	46c0      	nop			@ (mov r8, r8)

08001854 <HAL_TIM_PWM_Init>:
{
 8001854:	b570      	push	{r4, r5, r6, lr}
 8001856:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8001858:	d063      	beq.n	8001922 <HAL_TIM_PWM_Init+0xce>
  if (htim->State == HAL_TIM_STATE_RESET)
 800185a:	233d      	movs	r3, #61	@ 0x3d
 800185c:	5cc3      	ldrb	r3, [r0, r3]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d050      	beq.n	8001906 <HAL_TIM_PWM_Init+0xb2>
  htim->State = HAL_TIM_STATE_BUSY;
 8001864:	233d      	movs	r3, #61	@ 0x3d
 8001866:	2202      	movs	r2, #2
 8001868:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800186c:	4e33      	ldr	r6, [pc, #204]	@ (800193c <HAL_TIM_PWM_Init+0xe8>)
  tmpcr1 = TIMx->CR1;
 800186e:	681a      	ldr	r2, [r3, #0]
  TIMx->PSC = Structure->Prescaler;
 8001870:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001872:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001874:	69a5      	ldr	r5, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001876:	42b3      	cmp	r3, r6
 8001878:	d012      	beq.n	80018a0 <HAL_TIM_PWM_Init+0x4c>
 800187a:	4e31      	ldr	r6, [pc, #196]	@ (8001940 <HAL_TIM_PWM_Init+0xec>)
 800187c:	42b3      	cmp	r3, r6
 800187e:	d047      	beq.n	8001910 <HAL_TIM_PWM_Init+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001880:	4e30      	ldr	r6, [pc, #192]	@ (8001944 <HAL_TIM_PWM_Init+0xf0>)
 8001882:	42b3      	cmp	r3, r6
 8001884:	d048      	beq.n	8001918 <HAL_TIM_PWM_Init+0xc4>
 8001886:	4e30      	ldr	r6, [pc, #192]	@ (8001948 <HAL_TIM_PWM_Init+0xf4>)
 8001888:	42b3      	cmp	r3, r6
 800188a:	d00d      	beq.n	80018a8 <HAL_TIM_PWM_Init+0x54>
 800188c:	4e2f      	ldr	r6, [pc, #188]	@ (800194c <HAL_TIM_PWM_Init+0xf8>)
 800188e:	42b3      	cmp	r3, r6
 8001890:	d049      	beq.n	8001926 <HAL_TIM_PWM_Init+0xd2>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001892:	2680      	movs	r6, #128	@ 0x80
 8001894:	43b2      	bics	r2, r6
 8001896:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8001898:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800189a:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800189c:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800189e:	e00f      	b.n	80018c0 <HAL_TIM_PWM_Init+0x6c>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018a0:	2670      	movs	r6, #112	@ 0x70
 80018a2:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80018a4:	68a6      	ldr	r6, [r4, #8]
 80018a6:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80018a8:	4e29      	ldr	r6, [pc, #164]	@ (8001950 <HAL_TIM_PWM_Init+0xfc>)
 80018aa:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018ac:	6926      	ldr	r6, [r4, #16]
 80018ae:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018b0:	2680      	movs	r6, #128	@ 0x80
 80018b2:	43b2      	bics	r2, r6
 80018b4:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80018b6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b8:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80018ba:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80018bc:	6962      	ldr	r2, [r4, #20]
 80018be:	631a      	str	r2, [r3, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80018c0:	2201      	movs	r2, #1
 80018c2:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	420a      	tst	r2, r1
 80018c8:	d002      	beq.n	80018d0 <HAL_TIM_PWM_Init+0x7c>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80018ca:	6919      	ldr	r1, [r3, #16]
 80018cc:	4391      	bics	r1, r2
 80018ce:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d0:	2301      	movs	r3, #1
 80018d2:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80018d4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018d8:	3a0a      	subs	r2, #10
 80018da:	54a3      	strb	r3, [r4, r2]
 80018dc:	3201      	adds	r2, #1
 80018de:	54a3      	strb	r3, [r4, r2]
 80018e0:	3201      	adds	r2, #1
 80018e2:	54a3      	strb	r3, [r4, r2]
 80018e4:	3201      	adds	r2, #1
 80018e6:	54a3      	strb	r3, [r4, r2]
 80018e8:	3201      	adds	r2, #1
 80018ea:	54a3      	strb	r3, [r4, r2]
 80018ec:	3201      	adds	r2, #1
 80018ee:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018f0:	3201      	adds	r2, #1
 80018f2:	54a3      	strb	r3, [r4, r2]
 80018f4:	3201      	adds	r2, #1
 80018f6:	54a3      	strb	r3, [r4, r2]
 80018f8:	3201      	adds	r2, #1
 80018fa:	54a3      	strb	r3, [r4, r2]
 80018fc:	3201      	adds	r2, #1
 80018fe:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001900:	3a0a      	subs	r2, #10
 8001902:	54a3      	strb	r3, [r4, r2]
}
 8001904:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001906:	333c      	adds	r3, #60	@ 0x3c
 8001908:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 800190a:	f7ff ffa1 	bl	8001850 <HAL_TIM_PWM_MspInit>
 800190e:	e7a9      	b.n	8001864 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001910:	2670      	movs	r6, #112	@ 0x70
 8001912:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8001914:	68a6      	ldr	r6, [r4, #8]
 8001916:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8001918:	4e0d      	ldr	r6, [pc, #52]	@ (8001950 <HAL_TIM_PWM_Init+0xfc>)
 800191a:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800191c:	6926      	ldr	r6, [r4, #16]
 800191e:	4332      	orrs	r2, r6
 8001920:	e7b7      	b.n	8001892 <HAL_TIM_PWM_Init+0x3e>
    return HAL_ERROR;
 8001922:	2001      	movs	r0, #1
 8001924:	e7ee      	b.n	8001904 <HAL_TIM_PWM_Init+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001926:	4e0a      	ldr	r6, [pc, #40]	@ (8001950 <HAL_TIM_PWM_Init+0xfc>)
 8001928:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800192a:	6926      	ldr	r6, [r4, #16]
 800192c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800192e:	2680      	movs	r6, #128	@ 0x80
 8001930:	43b2      	bics	r2, r6
 8001932:	4315      	orrs	r5, r2
  TIMx->CR1 = tmpcr1;
 8001934:	601d      	str	r5, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001936:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001938:	6299      	str	r1, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800193a:	e7bf      	b.n	80018bc <HAL_TIM_PWM_Init+0x68>
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40000400 	.word	0x40000400
 8001944:	40002000 	.word	0x40002000
 8001948:	40014400 	.word	0x40014400
 800194c:	40014800 	.word	0x40014800
 8001950:	fffffcff 	.word	0xfffffcff

08001954 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001954:	2910      	cmp	r1, #16
 8001956:	d803      	bhi.n	8001960 <HAL_TIM_PWM_Start+0xc>
 8001958:	4a2a      	ldr	r2, [pc, #168]	@ (8001a04 <HAL_TIM_PWM_Start+0xb0>)
 800195a:	008b      	lsls	r3, r1, #2
 800195c:	58d3      	ldr	r3, [r2, r3]
 800195e:	469f      	mov	pc, r3
 8001960:	2343      	movs	r3, #67	@ 0x43
 8001962:	5cc2      	ldrb	r2, [r0, r3]
 8001964:	2a01      	cmp	r2, #1
 8001966:	d12a      	bne.n	80019be <HAL_TIM_PWM_Start+0x6a>
 8001968:	2202      	movs	r2, #2
 800196a:	54c2      	strb	r2, [r0, r3]
 800196c:	221f      	movs	r2, #31
 800196e:	4011      	ands	r1, r2
 8001970:	3a1e      	subs	r2, #30
 8001972:	408a      	lsls	r2, r1
 8001974:	6803      	ldr	r3, [r0, #0]
 8001976:	6a19      	ldr	r1, [r3, #32]
 8001978:	4391      	bics	r1, r2
 800197a:	6219      	str	r1, [r3, #32]
 800197c:	6a19      	ldr	r1, [r3, #32]
 800197e:	430a      	orrs	r2, r1
 8001980:	621a      	str	r2, [r3, #32]
 8001982:	4a21      	ldr	r2, [pc, #132]	@ (8001a08 <HAL_TIM_PWM_Start+0xb4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d036      	beq.n	80019f6 <HAL_TIM_PWM_Start+0xa2>
 8001988:	4a20      	ldr	r2, [pc, #128]	@ (8001a0c <HAL_TIM_PWM_Start+0xb8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d02d      	beq.n	80019ea <HAL_TIM_PWM_Start+0x96>
 800198e:	4a20      	ldr	r2, [pc, #128]	@ (8001a10 <HAL_TIM_PWM_Start+0xbc>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d02a      	beq.n	80019ea <HAL_TIM_PWM_Start+0x96>
 8001994:	4a1f      	ldr	r2, [pc, #124]	@ (8001a14 <HAL_TIM_PWM_Start+0xc0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d107      	bne.n	80019aa <HAL_TIM_PWM_Start+0x56>
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	491e      	ldr	r1, [pc, #120]	@ (8001a18 <HAL_TIM_PWM_Start+0xc4>)
 800199e:	400a      	ands	r2, r1
 80019a0:	2a06      	cmp	r2, #6
 80019a2:	d006      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x5e>
 80019a4:	3907      	subs	r1, #7
 80019a6:	428a      	cmp	r2, r1
 80019a8:	d003      	beq.n	80019b2 <HAL_TIM_PWM_Start+0x5e>
 80019aa:	2101      	movs	r1, #1
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	2000      	movs	r0, #0
 80019b4:	4770      	bx	lr
 80019b6:	233e      	movs	r3, #62	@ 0x3e
 80019b8:	5cc2      	ldrb	r2, [r0, r3]
 80019ba:	2a01      	cmp	r2, #1
 80019bc:	d0d4      	beq.n	8001968 <HAL_TIM_PWM_Start+0x14>
 80019be:	2001      	movs	r0, #1
 80019c0:	e7f8      	b.n	80019b4 <HAL_TIM_PWM_Start+0x60>
 80019c2:	233f      	movs	r3, #63	@ 0x3f
 80019c4:	5cc2      	ldrb	r2, [r0, r3]
 80019c6:	2a01      	cmp	r2, #1
 80019c8:	d0ce      	beq.n	8001968 <HAL_TIM_PWM_Start+0x14>
 80019ca:	e7f8      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 80019cc:	2340      	movs	r3, #64	@ 0x40
 80019ce:	5cc2      	ldrb	r2, [r0, r3]
 80019d0:	2a01      	cmp	r2, #1
 80019d2:	d0c9      	beq.n	8001968 <HAL_TIM_PWM_Start+0x14>
 80019d4:	e7f3      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 80019d6:	2341      	movs	r3, #65	@ 0x41
 80019d8:	5cc2      	ldrb	r2, [r0, r3]
 80019da:	2a01      	cmp	r2, #1
 80019dc:	d0c4      	beq.n	8001968 <HAL_TIM_PWM_Start+0x14>
 80019de:	e7ee      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 80019e0:	2342      	movs	r3, #66	@ 0x42
 80019e2:	5cc2      	ldrb	r2, [r0, r3]
 80019e4:	2a01      	cmp	r2, #1
 80019e6:	d0bf      	beq.n	8001968 <HAL_TIM_PWM_Start+0x14>
 80019e8:	e7e9      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019ee:	0212      	lsls	r2, r2, #8
 80019f0:	430a      	orrs	r2, r1
 80019f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80019f4:	e7d9      	b.n	80019aa <HAL_TIM_PWM_Start+0x56>
 80019f6:	2280      	movs	r2, #128	@ 0x80
 80019f8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019fa:	0212      	lsls	r2, r2, #8
 80019fc:	430a      	orrs	r2, r1
 80019fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a00:	e7cb      	b.n	800199a <HAL_TIM_PWM_Start+0x46>
 8001a02:	46c0      	nop			@ (mov r8, r8)
 8001a04:	080025d4 	.word	0x080025d4
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40014400 	.word	0x40014400
 8001a10:	40014800 	.word	0x40014800
 8001a14:	40000400 	.word	0x40000400
 8001a18:	00010007 	.word	0x00010007

08001a1c <HAL_TIM_PWM_Stop>:
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
 8001a1c:	b530      	push	{r4, r5, lr}
 8001a1e:	251f      	movs	r5, #31
 8001a20:	2401      	movs	r4, #1
 8001a22:	400d      	ands	r5, r1
 8001a24:	40ac      	lsls	r4, r5
 8001a26:	6803      	ldr	r3, [r0, #0]
 8001a28:	6a1a      	ldr	r2, [r3, #32]
 8001a2a:	43a2      	bics	r2, r4
 8001a2c:	621a      	str	r2, [r3, #32]
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	621a      	str	r2, [r3, #32]
 8001a32:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_TIM_PWM_Stop+0xa4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d014      	beq.n	8001a62 <HAL_TIM_PWM_Stop+0x46>
 8001a38:	4a22      	ldr	r2, [pc, #136]	@ (8001ac4 <HAL_TIM_PWM_Stop+0xa8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d011      	beq.n	8001a62 <HAL_TIM_PWM_Stop+0x46>
 8001a3e:	4a22      	ldr	r2, [pc, #136]	@ (8001ac8 <HAL_TIM_PWM_Stop+0xac>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00e      	beq.n	8001a62 <HAL_TIM_PWM_Stop+0x46>
 8001a44:	6a1c      	ldr	r4, [r3, #32]
 8001a46:	4a21      	ldr	r2, [pc, #132]	@ (8001acc <HAL_TIM_PWM_Stop+0xb0>)
 8001a48:	4214      	tst	r4, r2
 8001a4a:	d103      	bne.n	8001a54 <HAL_TIM_PWM_Stop+0x38>
 8001a4c:	6a1c      	ldr	r4, [r3, #32]
 8001a4e:	4a20      	ldr	r2, [pc, #128]	@ (8001ad0 <HAL_TIM_PWM_Stop+0xb4>)
 8001a50:	4214      	tst	r4, r2
 8001a52:	d01f      	beq.n	8001a94 <HAL_TIM_PWM_Stop+0x78>
 8001a54:	2900      	cmp	r1, #0
 8001a56:	d111      	bne.n	8001a7c <HAL_TIM_PWM_Stop+0x60>
 8001a58:	233e      	movs	r3, #62	@ 0x3e
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	54c2      	strb	r2, [r0, r3]
 8001a5e:	2000      	movs	r0, #0
 8001a60:	bd30      	pop	{r4, r5, pc}
 8001a62:	6a1c      	ldr	r4, [r3, #32]
 8001a64:	4a19      	ldr	r2, [pc, #100]	@ (8001acc <HAL_TIM_PWM_Stop+0xb0>)
 8001a66:	4214      	tst	r4, r2
 8001a68:	d1ec      	bne.n	8001a44 <HAL_TIM_PWM_Stop+0x28>
 8001a6a:	6a1c      	ldr	r4, [r3, #32]
 8001a6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ad0 <HAL_TIM_PWM_Stop+0xb4>)
 8001a6e:	4214      	tst	r4, r2
 8001a70:	d1e8      	bne.n	8001a44 <HAL_TIM_PWM_Stop+0x28>
 8001a72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a74:	4c17      	ldr	r4, [pc, #92]	@ (8001ad4 <HAL_TIM_PWM_Stop+0xb8>)
 8001a76:	4022      	ands	r2, r4
 8001a78:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a7a:	e7e3      	b.n	8001a44 <HAL_TIM_PWM_Stop+0x28>
 8001a7c:	2904      	cmp	r1, #4
 8001a7e:	d00e      	beq.n	8001a9e <HAL_TIM_PWM_Stop+0x82>
 8001a80:	2908      	cmp	r1, #8
 8001a82:	d014      	beq.n	8001aae <HAL_TIM_PWM_Stop+0x92>
 8001a84:	290c      	cmp	r1, #12
 8001a86:	d00e      	beq.n	8001aa6 <HAL_TIM_PWM_Stop+0x8a>
 8001a88:	2910      	cmp	r1, #16
 8001a8a:	d014      	beq.n	8001ab6 <HAL_TIM_PWM_Stop+0x9a>
 8001a8c:	2343      	movs	r3, #67	@ 0x43
 8001a8e:	2201      	movs	r2, #1
 8001a90:	54c2      	strb	r2, [r0, r3]
 8001a92:	e7e4      	b.n	8001a5e <HAL_TIM_PWM_Stop+0x42>
 8001a94:	2401      	movs	r4, #1
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	43a2      	bics	r2, r4
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e7da      	b.n	8001a54 <HAL_TIM_PWM_Stop+0x38>
 8001a9e:	233f      	movs	r3, #63	@ 0x3f
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	54c2      	strb	r2, [r0, r3]
 8001aa4:	e7db      	b.n	8001a5e <HAL_TIM_PWM_Stop+0x42>
 8001aa6:	2341      	movs	r3, #65	@ 0x41
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	54c2      	strb	r2, [r0, r3]
 8001aac:	e7d7      	b.n	8001a5e <HAL_TIM_PWM_Stop+0x42>
 8001aae:	2340      	movs	r3, #64	@ 0x40
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	54c2      	strb	r2, [r0, r3]
 8001ab4:	e7d3      	b.n	8001a5e <HAL_TIM_PWM_Stop+0x42>
 8001ab6:	2342      	movs	r3, #66	@ 0x42
 8001ab8:	2201      	movs	r2, #1
 8001aba:	54c2      	strb	r2, [r0, r3]
 8001abc:	e7cf      	b.n	8001a5e <HAL_TIM_PWM_Stop+0x42>
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40014400 	.word	0x40014400
 8001ac8:	40014800 	.word	0x40014800
 8001acc:	00001111 	.word	0x00001111
 8001ad0:	00000444 	.word	0x00000444
 8001ad4:	ffff7fff 	.word	0xffff7fff

08001ad8 <HAL_TIM_PWM_ConfigChannel>:
{
 8001ad8:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001ada:	203c      	movs	r0, #60	@ 0x3c
{
 8001adc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001ade:	5c1c      	ldrb	r4, [r3, r0]
 8001ae0:	2c01      	cmp	r4, #1
 8001ae2:	d100      	bne.n	8001ae6 <HAL_TIM_PWM_ConfigChannel+0xe>
 8001ae4:	e16b      	b.n	8001dbe <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8001ae6:	2401      	movs	r4, #1
 8001ae8:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8001aea:	2a14      	cmp	r2, #20
 8001aec:	d803      	bhi.n	8001af6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001aee:	48b5      	ldr	r0, [pc, #724]	@ (8001dc4 <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	5882      	ldr	r2, [r0, r2]
 8001af4:	4697      	mov	pc, r2
 8001af6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8001af8:	223c      	movs	r2, #60	@ 0x3c
 8001afa:	2100      	movs	r1, #0
 8001afc:	5499      	strb	r1, [r3, r2]
}
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b00:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b02:	4db1      	ldr	r5, [pc, #708]	@ (8001dc8 <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 8001b04:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001b06:	6a10      	ldr	r0, [r2, #32]
 8001b08:	4028      	ands	r0, r5
 8001b0a:	6210      	str	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b0c:	4daf      	ldr	r5, [pc, #700]	@ (8001dcc <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 8001b0e:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001b10:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001b12:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b14:	680d      	ldr	r5, [r1, #0]
 8001b16:	022d      	lsls	r5, r5, #8
 8001b18:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001b1a:	48ad      	ldr	r0, [pc, #692]	@ (8001dd0 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 8001b1c:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001b1e:	6888      	ldr	r0, [r1, #8]
 8001b20:	0500      	lsls	r0, r0, #20
 8001b22:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b24:	4cab      	ldr	r4, [pc, #684]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001b26:	42a2      	cmp	r2, r4
 8001b28:	d100      	bne.n	8001b2c <HAL_TIM_PWM_ConfigChannel+0x54>
 8001b2a:	e118      	b.n	8001d5e <HAL_TIM_PWM_ConfigChannel+0x286>
 8001b2c:	4caa      	ldr	r4, [pc, #680]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001b2e:	42a2      	cmp	r2, r4
 8001b30:	d100      	bne.n	8001b34 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001b32:	e114      	b.n	8001d5e <HAL_TIM_PWM_ConfigChannel+0x286>
 8001b34:	4ca9      	ldr	r4, [pc, #676]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001b36:	42a2      	cmp	r2, r4
 8001b38:	d100      	bne.n	8001b3c <HAL_TIM_PWM_ConfigChannel+0x64>
 8001b3a:	e110      	b.n	8001d5e <HAL_TIM_PWM_ConfigChannel+0x286>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001b3c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b3e:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001b40:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8001b42:	65d4      	str	r4, [r2, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b44:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b46:	2080      	movs	r0, #128	@ 0x80
 8001b48:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8001b4a:	0100      	lsls	r0, r0, #4
 8001b4c:	4320      	orrs	r0, r4
 8001b4e:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b50:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001b52:	4ca3      	ldr	r4, [pc, #652]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b54:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001b56:	4020      	ands	r0, r4
 8001b58:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001b5a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001b5c:	0209      	lsls	r1, r1, #8
 8001b5e:	4301      	orrs	r1, r0
 8001b60:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001b62:	2000      	movs	r0, #0
 8001b64:	e7c8      	b.n	8001af8 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b66:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b68:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b6a:	4e9e      	ldr	r6, [pc, #632]	@ (8001de4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8001b6c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b6e:	6a14      	ldr	r4, [r2, #32]
 8001b70:	43ac      	bics	r4, r5
 8001b72:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001b74:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001b76:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b78:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001b7a:	680e      	ldr	r6, [r1, #0]
 8001b7c:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8001b7e:	2602      	movs	r6, #2
 8001b80:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8001b82:	688e      	ldr	r6, [r1, #8]
 8001b84:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b86:	4e93      	ldr	r6, [pc, #588]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001b88:	42b2      	cmp	r2, r6
 8001b8a:	d100      	bne.n	8001b8e <HAL_TIM_PWM_ConfigChannel+0xb6>
 8001b8c:	e0da      	b.n	8001d44 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001b8e:	4e92      	ldr	r6, [pc, #584]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001b90:	42b2      	cmp	r2, r6
 8001b92:	d100      	bne.n	8001b96 <HAL_TIM_PWM_ConfigChannel+0xbe>
 8001b94:	e0d6      	b.n	8001d44 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8001b96:	4e91      	ldr	r6, [pc, #580]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001b98:	42b2      	cmp	r2, r6
 8001b9a:	d100      	bne.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0xc6>
 8001b9c:	e0d2      	b.n	8001d44 <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8001b9e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001ba0:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ba2:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ba4:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ba6:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ba8:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001baa:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bac:	6990      	ldr	r0, [r2, #24]
 8001bae:	4320      	orrs	r0, r4
 8001bb0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001bb2:	6990      	ldr	r0, [r2, #24]
 8001bb4:	3c04      	subs	r4, #4
 8001bb6:	43a0      	bics	r0, r4
 8001bb8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001bba:	6990      	ldr	r0, [r2, #24]
 8001bbc:	4301      	orrs	r1, r0
 8001bbe:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	e799      	b.n	8001af8 <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bc4:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001bc6:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8001bc8:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bca:	6a14      	ldr	r4, [r2, #32]
 8001bcc:	43ac      	bics	r4, r5
 8001bce:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bd0:	4d85      	ldr	r5, [pc, #532]	@ (8001de8 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001bd2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001bd4:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bd6:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bd8:	680d      	ldr	r5, [r1, #0]
 8001bda:	022d      	lsls	r5, r5, #8
 8001bdc:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001bde:	2420      	movs	r4, #32
 8001be0:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001be2:	688c      	ldr	r4, [r1, #8]
 8001be4:	0124      	lsls	r4, r4, #4
 8001be6:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001be8:	487a      	ldr	r0, [pc, #488]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001bea:	4282      	cmp	r2, r0
 8001bec:	d100      	bne.n	8001bf0 <HAL_TIM_PWM_ConfigChannel+0x118>
 8001bee:	e0c2      	b.n	8001d76 <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bf0:	4879      	ldr	r0, [pc, #484]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001bf2:	4282      	cmp	r2, r0
 8001bf4:	d100      	bne.n	8001bf8 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001bf6:	e0c5      	b.n	8001d84 <HAL_TIM_PWM_ConfigChannel+0x2ac>
 8001bf8:	4878      	ldr	r0, [pc, #480]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001bfa:	4282      	cmp	r2, r0
 8001bfc:	d100      	bne.n	8001c00 <HAL_TIM_PWM_ConfigChannel+0x128>
 8001bfe:	e0c1      	b.n	8001d84 <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 8001c00:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c02:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001c04:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001c06:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c08:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8001c0a:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c0c:	6994      	ldr	r4, [r2, #24]
 8001c0e:	0100      	lsls	r0, r0, #4
 8001c10:	4320      	orrs	r0, r4
 8001c12:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c14:	6990      	ldr	r0, [r2, #24]
 8001c16:	4c72      	ldr	r4, [pc, #456]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c18:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c1a:	4020      	ands	r0, r4
 8001c1c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c1e:	6990      	ldr	r0, [r2, #24]
 8001c20:	0209      	lsls	r1, r1, #8
 8001c22:	4301      	orrs	r1, r0
 8001c24:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2000      	movs	r0, #0
 8001c28:	e766      	b.n	8001af8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c2a:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c2c:	4d6f      	ldr	r5, [pc, #444]	@ (8001dec <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 8001c2e:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c30:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c32:	4e6c      	ldr	r6, [pc, #432]	@ (8001de4 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c34:	402c      	ands	r4, r5
 8001c36:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001c38:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c3a:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c3c:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8001c3e:	680e      	ldr	r6, [r1, #0]
 8001c40:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001c42:	4c6b      	ldr	r4, [pc, #428]	@ (8001df0 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8001c44:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c46:	688c      	ldr	r4, [r1, #8]
 8001c48:	0224      	lsls	r4, r4, #8
 8001c4a:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c4c:	4c61      	ldr	r4, [pc, #388]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001c4e:	42a2      	cmp	r2, r4
 8001c50:	d100      	bne.n	8001c54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c52:	e0a5      	b.n	8001da0 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c54:	4c60      	ldr	r4, [pc, #384]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001c56:	42a2      	cmp	r2, r4
 8001c58:	d100      	bne.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c5a:	e0a8      	b.n	8001dae <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8001c5c:	4c5f      	ldr	r4, [pc, #380]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001c5e:	42a2      	cmp	r2, r4
 8001c60:	d100      	bne.n	8001c64 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8001c62:	e0a4      	b.n	8001dae <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 8001c64:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001c66:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001c68:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001c6a:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c6c:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001c6e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c70:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c72:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c74:	4320      	orrs	r0, r4
 8001c76:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c78:	69d0      	ldr	r0, [r2, #28]
 8001c7a:	3c04      	subs	r4, #4
 8001c7c:	43a0      	bics	r0, r4
 8001c7e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c80:	69d0      	ldr	r0, [r2, #28]
 8001c82:	4301      	orrs	r1, r0
 8001c84:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001c86:	2000      	movs	r0, #0
 8001c88:	e736      	b.n	8001af8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c8a:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c8c:	4d59      	ldr	r5, [pc, #356]	@ (8001df4 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8001c8e:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001c90:	6a10      	ldr	r0, [r2, #32]
 8001c92:	4028      	ands	r0, r5
 8001c94:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c96:	4d54      	ldr	r5, [pc, #336]	@ (8001de8 <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8001c98:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001c9a:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001c9c:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001c9e:	680d      	ldr	r5, [r1, #0]
 8001ca0:	022d      	lsls	r5, r5, #8
 8001ca2:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8001ca4:	4854      	ldr	r0, [pc, #336]	@ (8001df8 <HAL_TIM_PWM_ConfigChannel+0x320>)
 8001ca6:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ca8:	6888      	ldr	r0, [r1, #8]
 8001caa:	0300      	lsls	r0, r0, #12
 8001cac:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001cae:	4c49      	ldr	r4, [pc, #292]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001cb0:	42a2      	cmp	r2, r4
 8001cb2:	d06f      	beq.n	8001d94 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001cb4:	4c48      	ldr	r4, [pc, #288]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001cb6:	42a2      	cmp	r2, r4
 8001cb8:	d06c      	beq.n	8001d94 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8001cba:	4c48      	ldr	r4, [pc, #288]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001cbc:	42a2      	cmp	r2, r4
 8001cbe:	d069      	beq.n	8001d94 <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001cc2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001cc4:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001cc6:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8001cc8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cca:	2080      	movs	r0, #128	@ 0x80
 8001ccc:	69d4      	ldr	r4, [r2, #28]
 8001cce:	0100      	lsls	r0, r0, #4
 8001cd0:	4320      	orrs	r0, r4
 8001cd2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cd4:	69d0      	ldr	r0, [r2, #28]
 8001cd6:	4c42      	ldr	r4, [pc, #264]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cd8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cda:	4020      	ands	r0, r4
 8001cdc:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cde:	69d0      	ldr	r0, [r2, #28]
 8001ce0:	0209      	lsls	r1, r1, #8
 8001ce2:	4301      	orrs	r1, r0
 8001ce4:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e706      	b.n	8001af8 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001cea:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001cec:	4d43      	ldr	r5, [pc, #268]	@ (8001dfc <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8001cee:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001cf0:	6a10      	ldr	r0, [r2, #32]
 8001cf2:	4028      	ands	r0, r5
 8001cf4:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001cf6:	4d42      	ldr	r5, [pc, #264]	@ (8001e00 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 8001cf8:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8001cfa:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001cfc:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8001cfe:	680d      	ldr	r5, [r1, #0]
 8001d00:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8001d02:	4840      	ldr	r0, [pc, #256]	@ (8001e04 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8001d04:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001d06:	6888      	ldr	r0, [r1, #8]
 8001d08:	0400      	lsls	r0, r0, #16
 8001d0a:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d0c:	4c31      	ldr	r4, [pc, #196]	@ (8001dd4 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8001d0e:	42a2      	cmp	r2, r4
 8001d10:	d02b      	beq.n	8001d6a <HAL_TIM_PWM_ConfigChannel+0x292>
 8001d12:	4c31      	ldr	r4, [pc, #196]	@ (8001dd8 <HAL_TIM_PWM_ConfigChannel+0x300>)
 8001d14:	42a2      	cmp	r2, r4
 8001d16:	d028      	beq.n	8001d6a <HAL_TIM_PWM_ConfigChannel+0x292>
 8001d18:	4c30      	ldr	r4, [pc, #192]	@ (8001ddc <HAL_TIM_PWM_ConfigChannel+0x304>)
 8001d1a:	42a2      	cmp	r2, r4
 8001d1c:	d025      	beq.n	8001d6a <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8001d1e:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001d20:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8001d22:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8001d24:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d26:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001d28:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d2a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d2c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001d2e:	4320      	orrs	r0, r4
 8001d30:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001d32:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001d34:	3c04      	subs	r4, #4
 8001d36:	43a0      	bics	r0, r4
 8001d38:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001d3a:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8001d3c:	4301      	orrs	r1, r0
 8001d3e:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8001d40:	2000      	movs	r0, #0
 8001d42:	e6d9      	b.n	8001af8 <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d44:	2608      	movs	r6, #8
 8001d46:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8001d48:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d4a:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001d4c:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d4e:	2604      	movs	r6, #4
 8001d50:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d52:	4e2d      	ldr	r6, [pc, #180]	@ (8001e08 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8001d54:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d56:	694d      	ldr	r5, [r1, #20]
 8001d58:	433d      	orrs	r5, r7
 8001d5a:	4335      	orrs	r5, r6
 8001d5c:	e71f      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001d5e:	4c2b      	ldr	r4, [pc, #172]	@ (8001e0c <HAL_TIM_PWM_ConfigChannel+0x334>)
 8001d60:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001d62:	694e      	ldr	r6, [r1, #20]
 8001d64:	02b6      	lsls	r6, r6, #10
 8001d66:	4326      	orrs	r6, r4
 8001d68:	e6e8      	b.n	8001b3c <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001d6a:	4c24      	ldr	r4, [pc, #144]	@ (8001dfc <HAL_TIM_PWM_ConfigChannel+0x324>)
 8001d6c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001d6e:	694e      	ldr	r6, [r1, #20]
 8001d70:	0236      	lsls	r6, r6, #8
 8001d72:	4326      	orrs	r6, r4
 8001d74:	e7d3      	b.n	8001d1e <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d76:	2080      	movs	r0, #128	@ 0x80
 8001d78:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d7a:	68c8      	ldr	r0, [r1, #12]
 8001d7c:	0100      	lsls	r0, r0, #4
 8001d7e:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d80:	2040      	movs	r0, #64	@ 0x40
 8001d82:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d84:	4822      	ldr	r0, [pc, #136]	@ (8001e10 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001d86:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d88:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001d8a:	698e      	ldr	r6, [r1, #24]
 8001d8c:	433e      	orrs	r6, r7
 8001d8e:	00b6      	lsls	r6, r6, #2
 8001d90:	4306      	orrs	r6, r0
 8001d92:	e735      	b.n	8001c00 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d94:	4c1f      	ldr	r4, [pc, #124]	@ (8001e14 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8001d96:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d98:	694e      	ldr	r6, [r1, #20]
 8001d9a:	01b6      	lsls	r6, r6, #6
 8001d9c:	4326      	orrs	r6, r4
 8001d9e:	e78f      	b.n	8001cc0 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001da0:	4c1d      	ldr	r4, [pc, #116]	@ (8001e18 <HAL_TIM_PWM_ConfigChannel+0x340>)
 8001da2:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001da4:	68cc      	ldr	r4, [r1, #12]
 8001da6:	0224      	lsls	r4, r4, #8
 8001da8:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8001daa:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8001dac:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001dae:	4c1b      	ldr	r4, [pc, #108]	@ (8001e1c <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001db0:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001db2:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001db4:	698d      	ldr	r5, [r1, #24]
 8001db6:	433d      	orrs	r5, r7
 8001db8:	012d      	lsls	r5, r5, #4
 8001dba:	4325      	orrs	r5, r4
 8001dbc:	e752      	b.n	8001c64 <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	e69d      	b.n	8001afe <HAL_TIM_PWM_ConfigChannel+0x26>
 8001dc2:	46c0      	nop			@ (mov r8, r8)
 8001dc4:	08002618 	.word	0x08002618
 8001dc8:	ffefffff 	.word	0xffefffff
 8001dcc:	feff8fff 	.word	0xfeff8fff
 8001dd0:	ffdfffff 	.word	0xffdfffff
 8001dd4:	40012c00 	.word	0x40012c00
 8001dd8:	40014400 	.word	0x40014400
 8001ddc:	40014800 	.word	0x40014800
 8001de0:	fffffbff 	.word	0xfffffbff
 8001de4:	fffeff8c 	.word	0xfffeff8c
 8001de8:	feff8cff 	.word	0xfeff8cff
 8001dec:	fffffeff 	.word	0xfffffeff
 8001df0:	fffffdff 	.word	0xfffffdff
 8001df4:	ffffefff 	.word	0xffffefff
 8001df8:	ffffdfff 	.word	0xffffdfff
 8001dfc:	fffeffff 	.word	0xfffeffff
 8001e00:	fffeff8f 	.word	0xfffeff8f
 8001e04:	fffdffff 	.word	0xfffdffff
 8001e08:	fffffcff 	.word	0xfffffcff
 8001e0c:	fffbffff 	.word	0xfffbffff
 8001e10:	fffff3ff 	.word	0xfffff3ff
 8001e14:	ffffbfff 	.word	0xffffbfff
 8001e18:	fffff7ff 	.word	0xfffff7ff
 8001e1c:	ffffcfff 	.word	0xffffcfff

08001e20 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e20:	233c      	movs	r3, #60	@ 0x3c
{
 8001e22:	b570      	push	{r4, r5, r6, lr}
 8001e24:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001e26:	5cc0      	ldrb	r0, [r0, r3]
 8001e28:	2801      	cmp	r0, #1
 8001e2a:	d100      	bne.n	8001e2e <HAL_TIM_ConfigClockSource+0xe>
 8001e2c:	e073      	b.n	8001f16 <HAL_TIM_ConfigClockSource+0xf6>
 8001e2e:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001e32:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	3301      	adds	r3, #1
 8001e36:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001e38:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e3a:	4d51      	ldr	r5, [pc, #324]	@ (8001f80 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8001e3c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e3e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001e40:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e42:	680b      	ldr	r3, [r1, #0]
 8001e44:	2b60      	cmp	r3, #96	@ 0x60
 8001e46:	d100      	bne.n	8001e4a <HAL_TIM_ConfigClockSource+0x2a>
 8001e48:	e067      	b.n	8001f1a <HAL_TIM_ConfigClockSource+0xfa>
 8001e4a:	d81d      	bhi.n	8001e88 <HAL_TIM_ConfigClockSource+0x68>
 8001e4c:	2b40      	cmp	r3, #64	@ 0x40
 8001e4e:	d100      	bne.n	8001e52 <HAL_TIM_ConfigClockSource+0x32>
 8001e50:	e07d      	b.n	8001f4e <HAL_TIM_ConfigClockSource+0x12e>
 8001e52:	d93f      	bls.n	8001ed4 <HAL_TIM_ConfigClockSource+0xb4>
 8001e54:	2b50      	cmp	r3, #80	@ 0x50
 8001e56:	d135      	bne.n	8001ec4 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8001e58:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001e5a:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e5c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e5e:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e60:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e62:	43a6      	bics	r6, r4
 8001e64:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e66:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001e68:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e6a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e6c:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e6e:	240a      	movs	r4, #10
 8001e70:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001e72:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e74:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001e76:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e78:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e7a:	4942      	ldr	r1, [pc, #264]	@ (8001f84 <HAL_TIM_ConfigClockSource+0x164>)
 8001e7c:	400b      	ands	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e7e:	2157      	movs	r1, #87	@ 0x57
 8001e80:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e82:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e84:	2000      	movs	r0, #0
 8001e86:	e01e      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001e88:	2480      	movs	r4, #128	@ 0x80
 8001e8a:	0164      	lsls	r4, r4, #5
 8001e8c:	42a3      	cmp	r3, r4
 8001e8e:	d0f9      	beq.n	8001e84 <HAL_TIM_ConfigClockSource+0x64>
 8001e90:	2480      	movs	r4, #128	@ 0x80
 8001e92:	01a4      	lsls	r4, r4, #6
 8001e94:	42a3      	cmp	r3, r4
 8001e96:	d12b      	bne.n	8001ef0 <HAL_TIM_ConfigClockSource+0xd0>
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e98:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_TIM_ConfigClockSource+0x168>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e9c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e9e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ea0:	688b      	ldr	r3, [r1, #8]
 8001ea2:	68c9      	ldr	r1, [r1, #12]
 8001ea4:	432b      	orrs	r3, r5
 8001ea6:	0209      	lsls	r1, r1, #8
 8001ea8:	430b      	orrs	r3, r1
 8001eaa:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eac:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eae:	2380      	movs	r3, #128	@ 0x80
 8001eb0:	6881      	ldr	r1, [r0, #8]
 8001eb2:	01db      	lsls	r3, r3, #7
 8001eb4:	430b      	orrs	r3, r1
 8001eb6:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb8:	2000      	movs	r0, #0
 8001eba:	e004      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001ebc:	2110      	movs	r1, #16
 8001ebe:	001c      	movs	r4, r3
 8001ec0:	438c      	bics	r4, r1
 8001ec2:	d00c      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8001ec4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8001ec6:	233d      	movs	r3, #61	@ 0x3d
 8001ec8:	2101      	movs	r1, #1
 8001eca:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8001ecc:	2100      	movs	r1, #0
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	54d1      	strb	r1, [r2, r3]
}
 8001ed2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d002      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0xbe>
 8001ed8:	d9f0      	bls.n	8001ebc <HAL_TIM_ConfigClockSource+0x9c>
 8001eda:	2b30      	cmp	r3, #48	@ 0x30
 8001edc:	d1f2      	bne.n	8001ec4 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001ede:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ee0:	4c28      	ldr	r4, [pc, #160]	@ (8001f84 <HAL_TIM_ConfigClockSource+0x164>)
 8001ee2:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	2107      	movs	r1, #7
 8001ee8:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001eea:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2000      	movs	r0, #0
 8001eee:	e7ea      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8001ef0:	2b70      	cmp	r3, #112	@ 0x70
 8001ef2:	d1e7      	bne.n	8001ec4 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8001ef4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efa:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001efc:	688b      	ldr	r3, [r1, #8]
 8001efe:	68c9      	ldr	r1, [r1, #12]
 8001f00:	432b      	orrs	r3, r5
 8001f02:	0209      	lsls	r1, r1, #8
 8001f04:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f06:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f08:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8001f0a:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001f0c:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f0e:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8001f10:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f12:	2000      	movs	r0, #0
 8001f14:	e7d7      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8001f16:	2002      	movs	r0, #2
 8001f18:	e7db      	b.n	8001ed2 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1a:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8001f1c:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f1e:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8001f20:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f22:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8001f24:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f26:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f28:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f2a:	4e18      	ldr	r6, [pc, #96]	@ (8001f8c <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f2c:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f2e:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f30:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f32:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f34:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f36:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f38:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8001f3a:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f3c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f40:	4910      	ldr	r1, [pc, #64]	@ (8001f84 <HAL_TIM_ConfigClockSource+0x164>)
 8001f42:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f44:	2167      	movs	r1, #103	@ 0x67
 8001f46:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f48:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	e7bb      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8001f4e:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8001f50:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f52:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f54:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f56:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f58:	43a6      	bics	r6, r4
 8001f5a:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f5c:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001f5e:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f60:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f62:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f64:	240a      	movs	r4, #10
 8001f66:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001f68:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001f6a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f6c:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001f6e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f70:	4904      	ldr	r1, [pc, #16]	@ (8001f84 <HAL_TIM_ConfigClockSource+0x164>)
 8001f72:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f74:	2147      	movs	r1, #71	@ 0x47
 8001f76:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f78:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	e7a3      	b.n	8001ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8001f7e:	46c0      	nop			@ (mov r8, r8)
 8001f80:	ffce0088 	.word	0xffce0088
 8001f84:	ffcfff8f 	.word	0xffcfff8f
 8001f88:	ffff00ff 	.word	0xffff00ff
 8001f8c:	ffff0fff 	.word	0xffff0fff

08001f90 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8001f90:	233c      	movs	r3, #60	@ 0x3c
{
 8001f92:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f94:	5cc2      	ldrb	r2, [r0, r3]
 8001f96:	2a01      	cmp	r2, #1
 8001f98:	d04d      	beq.n	8002036 <HAL_TIM_SlaveConfigSynchro+0xa6>
 8001f9a:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8001f9e:	54c5      	strb	r5, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001fa4:	6804      	ldr	r4, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80020a0 <HAL_TIM_SlaveConfigSynchro+0x110>)
  tmpsmcr = htim->Instance->SMCR;
 8001fa8:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001faa:	4e3e      	ldr	r6, [pc, #248]	@ (80020a4 <HAL_TIM_SlaveConfigSynchro+0x114>)
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fac:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001fae:	684b      	ldr	r3, [r1, #4]
 8001fb0:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001fb2:	4032      	ands	r2, r6
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001fb4:	680e      	ldr	r6, [r1, #0]
 8001fb6:	4332      	orrs	r2, r6
  htim->Instance->SMCR = tmpsmcr;
 8001fb8:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8001fba:	2b50      	cmp	r3, #80	@ 0x50
 8001fbc:	d05f      	beq.n	800207e <HAL_TIM_SlaveConfigSynchro+0xee>
 8001fbe:	d90f      	bls.n	8001fe0 <HAL_TIM_SlaveConfigSynchro+0x50>
 8001fc0:	2b60      	cmp	r3, #96	@ 0x60
 8001fc2:	d03a      	beq.n	800203a <HAL_TIM_SlaveConfigSynchro+0xaa>
 8001fc4:	2b70      	cmp	r3, #112	@ 0x70
 8001fc6:	d10e      	bne.n	8001fe6 <HAL_TIM_SlaveConfigSynchro+0x56>
  tmpsmcr = TIMx->SMCR;
 8001fc8:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fca:	4b37      	ldr	r3, [pc, #220]	@ (80020a8 <HAL_TIM_SlaveConfigSynchro+0x118>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fcc:	688d      	ldr	r5, [r1, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fce:	401a      	ands	r2, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fd0:	68cb      	ldr	r3, [r1, #12]
 8001fd2:	6909      	ldr	r1, [r1, #16]
 8001fd4:	432b      	orrs	r3, r5
 8001fd6:	0209      	lsls	r1, r1, #8
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8001fdc:	60a3      	str	r3, [r4, #8]
 8001fde:	e00f      	b.n	8002000 <HAL_TIM_SlaveConfigSynchro+0x70>
  switch (sSlaveConfig->InputTrigger)
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	d03d      	beq.n	8002060 <HAL_TIM_SlaveConfigSynchro+0xd0>
 8001fe4:	d907      	bls.n	8001ff6 <HAL_TIM_SlaveConfigSynchro+0x66>
    htim->State = HAL_TIM_STATE_READY;
 8001fe6:	233d      	movs	r3, #61	@ 0x3d
 8001fe8:	2201      	movs	r2, #1
 8001fea:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 8001fec:	2200      	movs	r2, #0
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	e013      	b.n	800201e <HAL_TIM_SlaveConfigSynchro+0x8e>
  switch (sSlaveConfig->InputTrigger)
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d002      	beq.n	8002000 <HAL_TIM_SlaveConfigSynchro+0x70>
 8001ffa:	d911      	bls.n	8002020 <HAL_TIM_SlaveConfigSynchro+0x90>
 8001ffc:	2b30      	cmp	r3, #48	@ 0x30
 8001ffe:	d1f2      	bne.n	8001fe6 <HAL_TIM_SlaveConfigSynchro+0x56>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002000:	2240      	movs	r2, #64	@ 0x40
 8002002:	68e3      	ldr	r3, [r4, #12]
 8002004:	4393      	bics	r3, r2
 8002006:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002008:	68e3      	ldr	r3, [r4, #12]
 800200a:	4a28      	ldr	r2, [pc, #160]	@ (80020ac <HAL_TIM_SlaveConfigSynchro+0x11c>)
 800200c:	4013      	ands	r3, r2
 800200e:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002010:	2201      	movs	r2, #1
 8002012:	233d      	movs	r3, #61	@ 0x3d
 8002014:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8002016:	2200      	movs	r2, #0
 8002018:	3b01      	subs	r3, #1
 800201a:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 800201c:	2000      	movs	r0, #0
}
 800201e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 8002020:	2210      	movs	r2, #16
 8002022:	4393      	bics	r3, r2
 8002024:	d0ec      	beq.n	8002000 <HAL_TIM_SlaveConfigSynchro+0x70>
    htim->State = HAL_TIM_STATE_READY;
 8002026:	233d      	movs	r3, #61	@ 0x3d
 8002028:	2201      	movs	r2, #1
 800202a:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(htim);
 800202c:	2200      	movs	r2, #0
 800202e:	3b01      	subs	r3, #1
 8002030:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
 8002034:	e7f3      	b.n	800201e <HAL_TIM_SlaveConfigSynchro+0x8e>
  __HAL_LOCK(htim);
 8002036:	2002      	movs	r0, #2
 8002038:	e7f1      	b.n	800201e <HAL_TIM_SlaveConfigSynchro+0x8e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800203a:	2610      	movs	r6, #16
                               sSlaveConfig->TriggerPolarity,
 800203c:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800203e:	690a      	ldr	r2, [r1, #16]
  tmpccer = TIMx->CCER;
 8002040:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002042:	6a25      	ldr	r5, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002044:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002046:	43b5      	bics	r5, r6
 8002048:	6225      	str	r5, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204a:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800204c:	4e18      	ldr	r6, [pc, #96]	@ (80020b0 <HAL_TIM_SlaveConfigSynchro+0x120>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800204e:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002050:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002052:	432a      	orrs	r2, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002054:	25a0      	movs	r5, #160	@ 0xa0
 8002056:	43a9      	bics	r1, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8002058:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 800205a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800205c:	6223      	str	r3, [r4, #32]
 800205e:	e7cf      	b.n	8002000 <HAL_TIM_SlaveConfigSynchro+0x70>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002060:	2e05      	cmp	r6, #5
 8002062:	d0c0      	beq.n	8001fe6 <HAL_TIM_SlaveConfigSynchro+0x56>
      tmpccer = htim->Instance->CCER;
 8002064:	6a26      	ldr	r6, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002066:	6a23      	ldr	r3, [r4, #32]
 8002068:	43ab      	bics	r3, r5
 800206a:	6223      	str	r3, [r4, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800206c:	23f0      	movs	r3, #240	@ 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 800206e:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002070:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002072:	690b      	ldr	r3, [r1, #16]
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8002078:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800207a:	6226      	str	r6, [r4, #32]
      break;
 800207c:	e7c0      	b.n	8002000 <HAL_TIM_SlaveConfigSynchro+0x70>
                               sSlaveConfig->TriggerPolarity,
 800207e:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8002080:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 8002082:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002084:	6a26      	ldr	r6, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002086:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002088:	43ae      	bics	r6, r5
 800208a:	6226      	str	r6, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800208c:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 800208e:	69a5      	ldr	r5, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002090:	43b5      	bics	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002092:	432b      	orrs	r3, r5
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002094:	250a      	movs	r5, #10
 8002096:	43a9      	bics	r1, r5
  tmpccer |= TIM_ICPolarity;
 8002098:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800209a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800209c:	6222      	str	r2, [r4, #32]
 800209e:	e7af      	b.n	8002000 <HAL_TIM_SlaveConfigSynchro+0x70>
 80020a0:	ffcfff8f 	.word	0xffcfff8f
 80020a4:	fffefff8 	.word	0xfffefff8
 80020a8:	ffff00ff 	.word	0xffff00ff
 80020ac:	ffffbfff 	.word	0xffffbfff
 80020b0:	ffff0fff 	.word	0xffff0fff

080020b4 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80020b4:	4770      	bx	lr
 80020b6:	46c0      	nop			@ (mov r8, r8)

080020b8 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80020b8:	4770      	bx	lr
 80020ba:	46c0      	nop			@ (mov r8, r8)

080020bc <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80020bc:	4770      	bx	lr
 80020be:	46c0      	nop			@ (mov r8, r8)

080020c0 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80020c0:	4770      	bx	lr
 80020c2:	46c0      	nop			@ (mov r8, r8)

080020c4 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020c4:	2202      	movs	r2, #2
{
 80020c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80020c8:	6803      	ldr	r3, [r0, #0]
{
 80020ca:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80020cc:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020ce:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020d0:	4222      	tst	r2, r4
 80020d2:	d001      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020d4:	4232      	tst	r2, r6
 80020d6:	d162      	bne.n	800219e <HAL_TIM_IRQHandler+0xda>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020d8:	2304      	movs	r3, #4
 80020da:	4223      	tst	r3, r4
 80020dc:	d001      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020de:	4233      	tst	r3, r6
 80020e0:	d149      	bne.n	8002176 <HAL_TIM_IRQHandler+0xb2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020e2:	2308      	movs	r3, #8
 80020e4:	4223      	tst	r3, r4
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020e8:	4233      	tst	r3, r6
 80020ea:	d132      	bne.n	8002152 <HAL_TIM_IRQHandler+0x8e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020ec:	2310      	movs	r3, #16
 80020ee:	4223      	tst	r3, r4
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020f2:	4233      	tst	r3, r6
 80020f4:	d119      	bne.n	800212a <HAL_TIM_IRQHandler+0x66>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020f6:	2301      	movs	r3, #1
 80020f8:	4223      	tst	r3, r4
 80020fa:	d001      	beq.n	8002100 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020fc:	4233      	tst	r3, r6
 80020fe:	d16a      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002100:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002102:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002104:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002106:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002108:	4027      	ands	r7, r4
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800210a:	421c      	tst	r4, r3
 800210c:	d056      	beq.n	80021bc <HAL_TIM_IRQHandler+0xf8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800210e:	0633      	lsls	r3, r6, #24
 8002110:	d469      	bmi.n	80021e6 <HAL_TIM_IRQHandler+0x122>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002112:	2340      	movs	r3, #64	@ 0x40
 8002114:	4223      	tst	r3, r4
 8002116:	d002      	beq.n	800211e <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002118:	4233      	tst	r3, r6
 800211a:	d000      	beq.n	800211e <HAL_TIM_IRQHandler+0x5a>
 800211c:	e073      	b.n	8002206 <HAL_TIM_IRQHandler+0x142>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800211e:	2320      	movs	r3, #32
 8002120:	4223      	tst	r3, r4
 8002122:	d001      	beq.n	8002128 <HAL_TIM_IRQHandler+0x64>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002124:	4233      	tst	r3, r6
 8002126:	d14e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x102>
}
 8002128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800212a:	2211      	movs	r2, #17
 800212c:	682b      	ldr	r3, [r5, #0]
 800212e:	4252      	negs	r2, r2
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	3219      	adds	r2, #25
 8002134:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002136:	69da      	ldr	r2, [r3, #28]
 8002138:	23c0      	movs	r3, #192	@ 0xc0
 800213a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800213c:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800213e:	421a      	tst	r2, r3
 8002140:	d172      	bne.n	8002228 <HAL_TIM_IRQHandler+0x164>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	f7ff ffb7 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002146:	0028      	movs	r0, r5
 8002148:	f7ff ffb8 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214c:	2300      	movs	r3, #0
 800214e:	772b      	strb	r3, [r5, #28]
 8002150:	e7d1      	b.n	80020f6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002152:	2209      	movs	r2, #9
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	4252      	negs	r2, r2
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215a:	320d      	adds	r2, #13
 800215c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800215e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8002160:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002162:	079b      	lsls	r3, r3, #30
 8002164:	d15d      	bne.n	8002222 <HAL_TIM_IRQHandler+0x15e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	f7ff ffa5 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216a:	0028      	movs	r0, r5
 800216c:	f7ff ffa6 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002170:	2300      	movs	r3, #0
 8002172:	772b      	strb	r3, [r5, #28]
 8002174:	e7ba      	b.n	80020ec <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002176:	2205      	movs	r2, #5
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	4252      	negs	r2, r2
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217e:	3207      	adds	r2, #7
 8002180:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002182:	699a      	ldr	r2, [r3, #24]
 8002184:	23c0      	movs	r3, #192	@ 0xc0
 8002186:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8002188:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800218a:	421a      	tst	r2, r3
 800218c:	d146      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	f7ff ff91 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002192:	0028      	movs	r0, r5
 8002194:	f7ff ff92 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002198:	2300      	movs	r3, #0
 800219a:	772b      	strb	r3, [r5, #28]
 800219c:	e7a1      	b.n	80020e2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800219e:	3a05      	subs	r2, #5
 80021a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	3204      	adds	r2, #4
 80021a4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	079b      	lsls	r3, r3, #30
 80021aa:	d134      	bne.n	8002216 <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ac:	f7ff ff82 	bl	80020b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b0:	0028      	movs	r0, r5
 80021b2:	f7ff ff83 	bl	80020bc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021b6:	2300      	movs	r3, #0
 80021b8:	772b      	strb	r3, [r5, #28]
 80021ba:	e78d      	b.n	80020d8 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021bc:	2f00      	cmp	r7, #0
 80021be:	d0a8      	beq.n	8002112 <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021c0:	0633      	lsls	r3, r6, #24
 80021c2:	d5a6      	bpl.n	8002112 <HAL_TIM_IRQHandler+0x4e>
 80021c4:	e018      	b.n	80021f8 <HAL_TIM_IRQHandler+0x134>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021c6:	2221      	movs	r2, #33	@ 0x21
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 80021cc:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80021d0:	f000 f8c6 	bl	8002360 <HAL_TIMEx_CommutCallback>
}
 80021d4:	e7a8      	b.n	8002128 <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d6:	2202      	movs	r2, #2
 80021d8:	682b      	ldr	r3, [r5, #0]
 80021da:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 80021dc:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021de:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021e0:	f7fe f81a 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
 80021e4:	e78c      	b.n	8002100 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021e6:	682b      	ldr	r3, [r5, #0]
 80021e8:	4a11      	ldr	r2, [pc, #68]	@ (8002230 <HAL_TIM_IRQHandler+0x16c>)
      HAL_TIMEx_BreakCallback(htim);
 80021ea:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80021ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021ee:	f000 f8b9 	bl	8002364 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80021f2:	2f00      	cmp	r7, #0
 80021f4:	d100      	bne.n	80021f8 <HAL_TIM_IRQHandler+0x134>
 80021f6:	e78c      	b.n	8002112 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002234 <HAL_TIM_IRQHandler+0x170>)
      HAL_TIMEx_Break2Callback(htim);
 80021fc:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002200:	f000 f8b2 	bl	8002368 <HAL_TIMEx_Break2Callback>
 8002204:	e785      	b.n	8002112 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002206:	2241      	movs	r2, #65	@ 0x41
 8002208:	682b      	ldr	r3, [r5, #0]
 800220a:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 800220c:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800220e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002210:	f7ff ff56 	bl	80020c0 <HAL_TIM_TriggerCallback>
 8002214:	e783      	b.n	800211e <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 8002216:	f7ff ff4f 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 800221a:	e7cc      	b.n	80021b6 <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 800221c:	f7ff ff4c 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8002220:	e7ba      	b.n	8002198 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	f7ff ff49 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 8002226:	e7a3      	b.n	8002170 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_IC_CaptureCallback(htim);
 8002228:	f7ff ff46 	bl	80020b8 <HAL_TIM_IC_CaptureCallback>
 800222c:	e78e      	b.n	800214c <HAL_TIM_IRQHandler+0x88>
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	ffffdf7f 	.word	0xffffdf7f
 8002234:	fffffeff 	.word	0xfffffeff

08002238 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002238:	233c      	movs	r3, #60	@ 0x3c
{
 800223a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800223c:	5cc3      	ldrb	r3, [r0, r3]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d026      	beq.n	8002290 <HAL_TIMEx_MasterConfigSynchronization+0x58>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002242:	233d      	movs	r3, #61	@ 0x3d
 8002244:	2202      	movs	r2, #2
 8002246:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002248:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800224a:	4d12      	ldr	r5, [pc, #72]	@ (8002294 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 = htim->Instance->CR2;
 800224c:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800224e:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002250:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002252:	42aa      	cmp	r2, r5
 8002254:	d00e      	beq.n	8002274 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 &= ~TIM_CR2_MMS;
 8002256:	2570      	movs	r5, #112	@ 0x70
 8002258:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800225a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800225c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8002260:	429a      	cmp	r2, r3
 8002262:	d00f      	beq.n	8002284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002264:	233d      	movs	r3, #61	@ 0x3d
 8002266:	2201      	movs	r2, #1
 8002268:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800226a:	2200      	movs	r2, #0
 800226c:	3b01      	subs	r3, #1
 800226e:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8002270:	2000      	movs	r0, #0
}
 8002272:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002274:	4d09      	ldr	r5, [pc, #36]	@ (800229c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8002276:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002278:	684d      	ldr	r5, [r1, #4]
 800227a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 800227c:	2570      	movs	r5, #112	@ 0x70
 800227e:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002280:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 8002282:	6053      	str	r3, [r2, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	439c      	bics	r4, r3
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002288:	688b      	ldr	r3, [r1, #8]
 800228a:	431c      	orrs	r4, r3
    htim->Instance->SMCR = tmpsmcr;
 800228c:	6094      	str	r4, [r2, #8]
 800228e:	e7e9      	b.n	8002264 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8002290:	2002      	movs	r0, #2
 8002292:	e7ee      	b.n	8002272 <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	ff0fffff 	.word	0xff0fffff

080022a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a0:	233c      	movs	r3, #60	@ 0x3c
{
 80022a2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80022a4:	5cc3      	ldrb	r3, [r0, r3]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d03d      	beq.n	8002326 <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022aa:	4a20      	ldr	r2, [pc, #128]	@ (800232c <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 80022ac:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80022ae:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80022b0:	4013      	ands	r3, r2
 80022b2:	688a      	ldr	r2, [r1, #8]
 80022b4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80022b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002330 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	684a      	ldr	r2, [r1, #4]
 80022bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80022be:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	680a      	ldr	r2, [r1, #0]
 80022c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80022c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002338 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	690a      	ldr	r2, [r1, #16]
 80022cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80022ce:	4a1b      	ldr	r2, [pc, #108]	@ (800233c <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	694a      	ldr	r2, [r1, #20]
 80022d4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80022dc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80022de:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	698a      	ldr	r2, [r1, #24]
 80022e4:	0412      	lsls	r2, r2, #16
 80022e6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80022e8:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	69ca      	ldr	r2, [r1, #28]
 80022ee:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80022f0:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80022f2:	4294      	cmp	r4, r2
 80022f4:	d005      	beq.n	8002302 <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80022f6:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80022f8:	2200      	movs	r2, #0
 80022fa:	233c      	movs	r3, #60	@ 0x3c
 80022fc:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80022fe:	2000      	movs	r0, #0
}
 8002300:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002302:	4a13      	ldr	r2, [pc, #76]	@ (8002350 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002304:	4013      	ands	r3, r2
 8002306:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8002308:	0512      	lsls	r2, r2, #20
 800230a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800230c:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800230e:	401a      	ands	r2, r3
 8002310:	6a0b      	ldr	r3, [r1, #32]
 8002312:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002314:	4b10      	ldr	r3, [pc, #64]	@ (8002358 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002316:	401a      	ands	r2, r3
 8002318:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800231a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800231c:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 800231e:	401a      	ands	r2, r3
 8002320:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002322:	4313      	orrs	r3, r2
 8002324:	e7e7      	b.n	80022f6 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8002326:	2002      	movs	r0, #2
 8002328:	e7ea      	b.n	8002300 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	fffffcff 	.word	0xfffffcff
 8002330:	fffffbff 	.word	0xfffffbff
 8002334:	fffff7ff 	.word	0xfffff7ff
 8002338:	ffffefff 	.word	0xffffefff
 800233c:	ffffdfff 	.word	0xffffdfff
 8002340:	ffffbfff 	.word	0xffffbfff
 8002344:	fff0ffff 	.word	0xfff0ffff
 8002348:	efffffff 	.word	0xefffffff
 800234c:	40012c00 	.word	0x40012c00
 8002350:	ff0fffff 	.word	0xff0fffff
 8002354:	feffffff 	.word	0xfeffffff
 8002358:	fdffffff 	.word	0xfdffffff
 800235c:	dfffffff 	.word	0xdfffffff

08002360 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8002360:	4770      	bx	lr
 8002362:	46c0      	nop			@ (mov r8, r8)

08002364 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8002364:	4770      	bx	lr
 8002366:	46c0      	nop			@ (mov r8, r8)

08002368 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8002368:	4770      	bx	lr
 800236a:	46c0      	nop			@ (mov r8, r8)

0800236c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	464e      	mov	r6, r9
 8002370:	46de      	mov	lr, fp
 8002372:	4657      	mov	r7, sl
 8002374:	4645      	mov	r5, r8
 8002376:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002378:	680e      	ldr	r6, [r1, #0]
  pinpos = 0;
 800237a:	2400      	movs	r4, #0
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800237c:	2e00      	cmp	r6, #0
 800237e:	d113      	bne.n	80023a8 <LL_GPIO_Init+0x3c>
 8002380:	e05f      	b.n	8002442 <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002382:	68c5      	ldr	r5, [r0, #12]
 8002384:	46a8      	mov	r8, r5
 8002386:	4647      	mov	r7, r8
 8002388:	690d      	ldr	r5, [r1, #16]
 800238a:	401f      	ands	r7, r3
 800238c:	4355      	muls	r5, r2
 800238e:	433d      	orrs	r5, r7
 8002390:	60c5      	str	r5, [r0, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002392:	465b      	mov	r3, fp
 8002394:	6805      	ldr	r5, [r0, #0]
 8002396:	402b      	ands	r3, r5
 8002398:	4665      	mov	r5, ip
 800239a:	436a      	muls	r2, r5
 800239c:	4313      	orrs	r3, r2
 800239e:	6003      	str	r3, [r0, #0]
 80023a0:	0033      	movs	r3, r6
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 80023a2:	3401      	adds	r4, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80023a4:	40e3      	lsrs	r3, r4
 80023a6:	d04c      	beq.n	8002442 <LL_GPIO_Init+0xd6>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80023a8:	2301      	movs	r3, #1
 80023aa:	0035      	movs	r5, r6
 80023ac:	40a3      	lsls	r3, r4
 80023ae:	401d      	ands	r5, r3
    if (currentpin != 0x00u)
 80023b0:	421e      	tst	r6, r3
 80023b2:	d0f5      	beq.n	80023a0 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80023b4:	002a      	movs	r2, r5
 80023b6:	436a      	muls	r2, r5
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023b8:	684b      	ldr	r3, [r1, #4]
 80023ba:	2701      	movs	r7, #1
 80023bc:	469c      	mov	ip, r3
 80023be:	0053      	lsls	r3, r2, #1
 80023c0:	189b      	adds	r3, r3, r2
 80023c2:	43db      	mvns	r3, r3
 80023c4:	427f      	negs	r7, r7
 80023c6:	4467      	add	r7, ip
 80023c8:	469b      	mov	fp, r3
 80023ca:	2f01      	cmp	r7, #1
 80023cc:	d8d9      	bhi.n	8002382 <LL_GPIO_Init+0x16>
 80023ce:	6887      	ldr	r7, [r0, #8]
 80023d0:	46b9      	mov	r9, r7
 80023d2:	688f      	ldr	r7, [r1, #8]
 80023d4:	4357      	muls	r7, r2
 80023d6:	46b8      	mov	r8, r7
 80023d8:	464f      	mov	r7, r9
 80023da:	401f      	ands	r7, r3
 80023dc:	46b9      	mov	r9, r7
 80023de:	4647      	mov	r7, r8
 80023e0:	464b      	mov	r3, r9
 80023e2:	431f      	orrs	r7, r3
 80023e4:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80023e6:	6843      	ldr	r3, [r0, #4]
 80023e8:	001f      	movs	r7, r3
 80023ea:	68cb      	ldr	r3, [r1, #12]
 80023ec:	43af      	bics	r7, r5
 80023ee:	46b8      	mov	r8, r7
 80023f0:	001f      	movs	r7, r3
 80023f2:	436f      	muls	r7, r5
 80023f4:	46b9      	mov	r9, r7
 80023f6:	4647      	mov	r7, r8
 80023f8:	464b      	mov	r3, r9
 80023fa:	431f      	orrs	r7, r3
 80023fc:	6047      	str	r7, [r0, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80023fe:	68c3      	ldr	r3, [r0, #12]
 8002400:	4699      	mov	r9, r3
 8002402:	690b      	ldr	r3, [r1, #16]
 8002404:	001f      	movs	r7, r3
 8002406:	4357      	muls	r7, r2
 8002408:	465b      	mov	r3, fp
 800240a:	46b8      	mov	r8, r7
 800240c:	464f      	mov	r7, r9
 800240e:	401f      	ands	r7, r3
 8002410:	46b9      	mov	r9, r7
 8002412:	4647      	mov	r7, r8
 8002414:	464b      	mov	r3, r9
 8002416:	431f      	orrs	r7, r3
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002418:	4663      	mov	r3, ip
 800241a:	60c7      	str	r7, [r0, #12]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d1b8      	bne.n	8002392 <LL_GPIO_Init+0x26>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002420:	694b      	ldr	r3, [r1, #20]
 8002422:	4698      	mov	r8, r3
        if (currentpin < LL_GPIO_PIN_8)
 8002424:	2dff      	cmp	r5, #255	@ 0xff
 8002426:	d813      	bhi.n	8002450 <LL_GPIO_Init+0xe4>
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002428:	0013      	movs	r3, r2
 800242a:	4353      	muls	r3, r2
 800242c:	4699      	mov	r9, r3
 800242e:	464f      	mov	r7, r9
 8002430:	6a05      	ldr	r5, [r0, #32]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1bdb      	subs	r3, r3, r7
 8002436:	439d      	bics	r5, r3
 8002438:	4643      	mov	r3, r8
 800243a:	437b      	muls	r3, r7
 800243c:	431d      	orrs	r5, r3
 800243e:	6205      	str	r5, [r0, #32]
}
 8002440:	e7a7      	b.n	8002392 <LL_GPIO_Init+0x26>
  }

  return (SUCCESS);
}
 8002442:	2000      	movs	r0, #0
 8002444:	bcf0      	pop	{r4, r5, r6, r7}
 8002446:	46bb      	mov	fp, r7
 8002448:	46b2      	mov	sl, r6
 800244a:	46a9      	mov	r9, r5
 800244c:	46a0      	mov	r8, r4
 800244e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002450:	0a2d      	lsrs	r5, r5, #8
 8002452:	436d      	muls	r5, r5
 8002454:	436d      	muls	r5, r5
 8002456:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002458:	4699      	mov	r9, r3
 800245a:	012b      	lsls	r3, r5, #4
 800245c:	1b5b      	subs	r3, r3, r5
 800245e:	469a      	mov	sl, r3
 8002460:	464b      	mov	r3, r9
 8002462:	4657      	mov	r7, sl
 8002464:	43bb      	bics	r3, r7
 8002466:	4699      	mov	r9, r3
 8002468:	4643      	mov	r3, r8
 800246a:	436b      	muls	r3, r5
 800246c:	001d      	movs	r5, r3
 800246e:	464b      	mov	r3, r9
 8002470:	431d      	orrs	r5, r3
 8002472:	6245      	str	r5, [r0, #36]	@ 0x24
}
 8002474:	e78d      	b.n	8002392 <LL_GPIO_Init+0x26>
 8002476:	46c0      	nop			@ (mov r8, r8)

08002478 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002478:	4a19      	ldr	r2, [pc, #100]	@ (80024e0 <LL_TIM_Init+0x68>)
{
 800247a:	b530      	push	{r4, r5, lr}
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800247c:	6803      	ldr	r3, [r0, #0]

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800247e:	688d      	ldr	r5, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002480:	880c      	ldrh	r4, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002482:	4290      	cmp	r0, r2
 8002484:	d026      	beq.n	80024d4 <LL_TIM_Init+0x5c>
 8002486:	4a17      	ldr	r2, [pc, #92]	@ (80024e4 <LL_TIM_Init+0x6c>)
 8002488:	4290      	cmp	r0, r2
 800248a:	d012      	beq.n	80024b2 <LL_TIM_Init+0x3a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800248c:	4a16      	ldr	r2, [pc, #88]	@ (80024e8 <LL_TIM_Init+0x70>)
 800248e:	4290      	cmp	r0, r2
 8002490:	d013      	beq.n	80024ba <LL_TIM_Init+0x42>
 8002492:	4a16      	ldr	r2, [pc, #88]	@ (80024ec <LL_TIM_Init+0x74>)
 8002494:	4290      	cmp	r0, r2
 8002496:	d002      	beq.n	800249e <LL_TIM_Init+0x26>
 8002498:	4a15      	ldr	r2, [pc, #84]	@ (80024f0 <LL_TIM_Init+0x78>)
 800249a:	4290      	cmp	r0, r2
 800249c:	d111      	bne.n	80024c2 <LL_TIM_Init+0x4a>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800249e:	4a15      	ldr	r2, [pc, #84]	@ (80024f4 <LL_TIM_Init+0x7c>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	68ca      	ldr	r2, [r1, #12]
 80024a4:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024a6:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024a8:	62c5      	str	r5, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80024aa:	6284      	str	r4, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80024ac:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80024ae:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80024b0:	e00a      	b.n	80024c8 <LL_TIM_Init+0x50>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024b2:	2270      	movs	r2, #112	@ 0x70
 80024b4:	4393      	bics	r3, r2
 80024b6:	684a      	ldr	r2, [r1, #4]
 80024b8:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80024ba:	4a0e      	ldr	r2, [pc, #56]	@ (80024f4 <LL_TIM_Init+0x7c>)
 80024bc:	4013      	ands	r3, r2
 80024be:	68ca      	ldr	r2, [r1, #12]
 80024c0:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80024c2:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024c4:	62c5      	str	r5, [r0, #44]	@ 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80024c6:	6284      	str	r4, [r0, #40]	@ 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024c8:	2201      	movs	r2, #1
 80024ca:	6943      	ldr	r3, [r0, #20]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80024d0:	2000      	movs	r0, #0
 80024d2:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024d4:	2270      	movs	r2, #112	@ 0x70
 80024d6:	4393      	bics	r3, r2
 80024d8:	684a      	ldr	r2, [r1, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	e7df      	b.n	800249e <LL_TIM_Init+0x26>
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40002000 	.word	0x40002000
 80024ec:	40014400 	.word	0x40014400
 80024f0:	40014800 	.word	0x40014800
 80024f4:	fffffcff 	.word	0xfffffcff

080024f8 <LL_mDelay>:
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024f8:	4a09      	ldr	r2, [pc, #36]	@ (8002520 <LL_mDelay+0x28>)
{
 80024fa:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	9301      	str	r3, [sp, #4]
   uint32_t tmpDelay; /* MISRAC2012-Rule-17.8 */
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002500:	9b01      	ldr	r3, [sp, #4]
  tmpDelay  = Delay;
  /* Add a period to guaranty minimum wait */
  if (tmpDelay  < LL_MAX_DELAY)
  {
    tmpDelay ++;
 8002502:	1c43      	adds	r3, r0, #1
 8002504:	1e59      	subs	r1, r3, #1
 8002506:	418b      	sbcs	r3, r1
  }

  while (tmpDelay  != 0U)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002508:	2180      	movs	r1, #128	@ 0x80
    tmpDelay ++;
 800250a:	18c0      	adds	r0, r0, r3
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800250c:	0249      	lsls	r1, r1, #9
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	420b      	tst	r3, r1
 8002512:	d0fc      	beq.n	800250e <LL_mDelay+0x16>
    {
      tmpDelay --;
 8002514:	3801      	subs	r0, #1
 8002516:	2800      	cmp	r0, #0
 8002518:	d1f9      	bne.n	800250e <LL_mDelay+0x16>
    }
  }
}
 800251a:	b002      	add	sp, #8
 800251c:	4770      	bx	lr
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	e000e010 	.word	0xe000e010

08002524 <memset>:
 8002524:	0003      	movs	r3, r0
 8002526:	1882      	adds	r2, r0, r2
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	7019      	strb	r1, [r3, #0]
 8002530:	3301      	adds	r3, #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4c0c      	ldr	r4, [pc, #48]	@ (800256c <__libc_init_array+0x38>)
 800253a:	4d0d      	ldr	r5, [pc, #52]	@ (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	2600      	movs	r6, #0
 8002546:	f000 f819 	bl	800257c <_init>
 800254a:	4c0a      	ldr	r4, [pc, #40]	@ (8002574 <__libc_init_array+0x40>)
 800254c:	4d0a      	ldr	r5, [pc, #40]	@ (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	00b3      	lsls	r3, r6, #2
 800255a:	58eb      	ldr	r3, [r5, r3]
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	00b3      	lsls	r3, r6, #2
 8002564:	58eb      	ldr	r3, [r5, r3]
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	0800266c 	.word	0x0800266c
 8002570:	0800266c 	.word	0x0800266c
 8002574:	08002670 	.word	0x08002670
 8002578:	0800266c 	.word	0x0800266c

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
